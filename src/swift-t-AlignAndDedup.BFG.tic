
# Generated by stc version 0.7.2
# date                    : 2017/01/31 11:08:02
# Turbine version         : 0.9.1
# Input filename          : /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift
# Output filename         : /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/swift-t-AlignAndDedup.BFG.tic
# STC home                : /usr/local/apps/bioapps/swift-t-1.1/stc
# Turbine home            : /usr/local/apps/bioapps/swift-t-1.1/turbine
# Compiler settings:
# stc.auto-declare              : true
# stc.c_preprocess              : true
# stc.checkpointing             : true
# stc.compiler-debug            : true
# stc.debugging                 : COMMENTS
# stc.ic.output-file            : 
# stc.input_filename            : /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift
# stc.log.file                  : 
# stc.log.trace                 : false
# stc.must_pass_wait_vars       : true
# stc.opt.algebra               : true
# stc.opt.array-build           : true
# stc.opt.batch-refcounts       : true
# stc.opt.cancel-refcounts      : true
# stc.opt.constant-fold         : true
# stc.opt.controlflow-fusion    : true
# stc.opt.dataflow-op-inline    : true
# stc.opt.dead-code-elim        : true
# stc.opt.demote-globals        : true
# stc.opt.disable-asserts       : false
# stc.opt.expand-loop-threshold-insts: 256
# stc.opt.expand-loop-threshold-iters: 16
# stc.opt.expand-loops          : false
# stc.opt.finalized-var         : true
# stc.opt.flatten-nested        : true
# stc.opt.full-function-inline  : false
# stc.opt.full-unroll           : false
# stc.opt.function-always-inline-threshold: 5
# stc.opt.function-inline       : true
# stc.opt.function-inline-threshold: 50
# stc.opt.function-signature    : true
# stc.opt.hoist                 : true
# stc.opt.hoist-refcounts       : true
# stc.opt.loop-simplify         : true
# stc.opt.max-iterations        : 10
# stc.opt.merge-refcounts       : true
# stc.opt.piggyback-refcounts   : true
# stc.opt.pipeline              : false
# stc.opt.propagate-aliases     : true
# stc.opt.reorder-insts         : false
# stc.opt.shared-constants      : true
# stc.opt.unroll-loop-threshold-insts: 192
# stc.opt.unroll-loop-threshold-iters: 8
# stc.opt.unroll-loops          : true
# stc.opt.value-number          : true
# stc.opt.wait-coalesce         : true
# stc.output_filename           : /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/swift-t-AlignAndDedup.BFG.tic
# stc.preproc.force-cpp         : false
# stc.preproc.force-gcc         : false
# stc.preprocess_only           : false
# stc.profile                   : false
# stc.refcounting               : true
# stc.rpath                     : /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src
# stc.stc_home                  : /usr/local/apps/bioapps/swift-t-1.1/stc
# stc.turbine.version           : 0.9.1
# stc.turbine_home              : /usr/local/apps/bioapps/swift-t-1.1/turbine
# stc.version                   : 0.7.2

# Metadata:

# rpath entries
lappend auto_path "/ui/ncsa/jacobrh/Swift-T-Variant-Calling/src"
package require turbine 0.9.1
namespace import turbine::*


proc swift:constants {  } {
    turbine::c::log "function:swift:constants"
}

package require align 0.2


proc swift:main {  } {
    turbine::c::log "function: __entry"
    # Var: string t:7 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:153:33
    # Var: string t:10 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:160:6
    # Var: string t:13 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:161:6
    # Var: string t:20 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:162:37
    # Var: string t:23 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:169:15
    # Var: string t:31 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:176:15
    # Var: $string v:configFilename VALUE_OF [string:configFilename]
    # Var: file u:sampleInfoFile /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:153:0
    # Var: file u:failLog /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:169:70
    # Var: file u:docSampleInfo /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:187:32
    # Var: file u:docRunfile /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:183:99
    # Var: string[string] u:vars /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:146:0
    # Var: file u:configFile /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:142:0
    # Var: file u:outList /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:176:41
    # Var: $string v:f RENAMED [$string:__v:f]
    # Var: string t:55 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:__entry():205:6
    # Var: string t:57 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:__entry():205:24
    # Var: string t:59 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:__entry():205:66
    # Var: string t:83 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:__entry():236:28
    # Var: string t:86 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:__entry():236:72
    # Var: string t:8:2 RENAMED [string:__t:8] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:alignReads():61:5
    # Var: $file v:configFile:1 VALUE_OF [file:configFile]
    # Var: $file v:configFile:2 VALUE_OF [file:configFile]
    # Var: $string$[int] v:configFileData VALUE_OF [string[int]:configFileData]
    # Var: string[int] t:88 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:__entry():236:92
    # Var: int t:85 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:__entry():236:61
    # Var: boolean t:7:2 RENAMED [boolean:__t:7] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:alignReads():61:25
    lassign [ adlb::multicreate [ list string 1 1 1 ] [ list string 3 1 2 ] [ list string 2 1 3 ] [ list string 2 1 4 ] [ list string 1 1 5 ] [ list string 1 1 6 ] [ list container string string 11 1 11 ] [ list string 1 1 14 ] [ list string 1 1 15 ] [ list string 1 1 16 ] [ list string 1 1 17 ] [ list string 1 1 18 ] [ list string 1 1 19 ] [ list container integer string 1 1 20 ] [ list integer 1 1 21 ] [ list integer 1 1 22 ] ] t:7 t:10 t:13 t:20 t:23 t:31 u:vars t:55 t:57 t:59 t:83 t:86 t:8:2 t:88 t:85 t:7:2
    turbine::c::log "allocated t:7=<${t:7}> t:10=<${t:10}> t:13=<${t:13}> t:20=<${t:20}> t:23=<${t:23}>"
    turbine::c::log "allocated t:31=<${t:31}> u:vars=<${u:vars}> t:55=<${t:55}> t:57=<${t:57}> t:59=<${t:59}>"
    turbine::c::log "allocated t:83=<${t:83}> t:86=<${t:86}> t:8:2=<${t:8:2}> t:88=<${t:88}> t:85=<${t:85}>"
    turbine::c::log "allocated t:7:2=<${t:7:2}>"
    lassign [ turbine::make_file_tds [ adlb::multicreate [ list file 1 1 7 ] [ list file 2 1 8 ] [ list file 0 1 9 ] [ list file 0 1 10 ] [ list file 1 1 12 ] [ list file 2 1 13 ] ] [ list 0 1 1 1 0 1 ] ] u:sampleInfoFile u:failLog u:docSampleInfo u:docRunfile u:configFile u:outList
    turbine::argv_accept_impl [ list "runfile" ]
    set v:configFilename [ turbine::argv_get_impl "runfile" ]
    set tcltmp:init_rc 1
    set v:configFile:1 [ turbine::create_local_file_ref "" ${tcltmp:init_rc} 0 ]
    turbine::input_file_local v:configFile:1 ${v:configFilename}
    turbine::store_file ${u:configFile} v:configFile:1 1
    set v:configFile:2 [ turbine::retrieve_file ${u:configFile} ]
    set v:configFileData [ turbine::file_lines_impl ${v:configFile:2} ]
    turbine::container_reference ${u:vars} "SAMPLEINFORMATION" ${t:7} string
    turbine::container_reference ${u:vars} "OUTPUTDIR" ${t:10} string
    turbine::container_reference ${u:vars} "TMPDIR" ${t:13} string
    turbine::container_reference ${u:vars} "DELIVERYFOLDER" ${t:20} string
    set wfilename:failLog [ turbine::get_file_path ${u:failLog} ]
    set wfilename:outList [ turbine::get_file_path ${u:outList} ]
    set v:f [ file tail ${v:configFilename} ]
    turbine::container_reference ${u:vars} "SAMPLELB" ${t:55} string
    turbine::container_reference ${u:vars} "SAMPLEPL" ${t:57} string
    turbine::container_reference ${u:vars} "SAMPLECN" ${t:59} string
    turbine::container_reference ${u:vars} "SAMTOOLSDIR" ${t:83} string
    turbine::container_reference ${u:vars} "PBSCORES" ${t:86} string
    turbine::container_reference ${u:vars} "ALIGNERTOOL" ${t:8:2} string
    turbine::array_kv_build ${t:88} [ ::adlb::dict_create 0 "-u" ] 1 integer string
    dict for {tcltmp:ignore v:line} ${v:configFileData} {
        # Var: string[int] u:keyValuePair RENAMED [string[int]:keyValuePair] ./generalfunctions/general.swift:getConfigVariables():20:2
        # Var: $string$[int] v:keyValuePair VALUE_OF [string[int]:keyValuePair]
        # Var: $string v:alias:name VALUE_OF [string:__alias:name]
        # Var: $string v:alias:value VALUE_OF [string:__alias:value]
        lassign [ adlb::multicreate [ list container integer string 1 2 23 ] ] u:keyValuePair
        turbine::c::log "allocated u:keyValuePair=<${u:keyValuePair}>"
        set v:keyValuePair [ turbine::split_impl ${v:line} "=" ]
        turbine::build_rec ${u:keyValuePair} ${v:keyValuePair} [ list container integer string ] 0 1
        set a:name [ adlb::subscript_container ${u:keyValuePair} 0 ]
        set v:alias:name [ turbine::retrieve_string ${a:name} ]
        set a:value [ adlb::subscript_container ${u:keyValuePair} 1 ]
        set v:alias:value [ turbine::retrieve_string ${a:value} CACHED 1 ]
        turbine::container_insert ${u:vars} ${v:alias:name} ${v:alias:value} string 0
        adlb::write_refcount_decr ${u:keyValuePair} 1
    }
    turbine::rule [ list ${t:13} ] "mkdir-app-leaf1 ${t:13}"
    turbine::rule [ list ${wfilename:failLog} ] "__entry-call_foreign-write {${wfilename:failLog}} {${u:failLog}}"
    turbine::rule [ list ${wfilename:outList} ] "__entry-call_foreign-write-1 {${wfilename:outList}} {${u:outList}}"
    turbine::rule [ list ${t:86} ] "__entry-async_op-parse_int ${t:85} ${t:86}"
    turbine::rule [ list ${t:8:2} ] "__entry-async_op-eq_string ${t:7:2} ${t:8:2}"
    turbine::rule [ list ${t:10} ] [ list __entry-optmerged ${t:10} ${t:20} ${t:23} ${t:31} ${v:f} ${u:configFile} ${u:docRunfile} ${u:failLog} ${u:outList} ]
    turbine::rule [ list ${t:7} ] "__entry-optmerged-2 ${t:10} ${t:13} ${t:20} ${t:23} ${t:31} ${t:55} ${t:57} ${t:59} ${t:7} ${t:7:2} ${t:83} ${t:85} ${t:88} {${u:docSampleInfo}} {${u:failLog}} {${u:outList}} {${u:sampleInfoFile}} ${u:vars}"
    turbine::decr_local_file_refcount v:configFile:1
    adlb::write_refcount_decr ${u:vars} 1
}


proc mkdir-app-leaf1 { t:13 } {
    # Var: $string v:dirname:4 RENAMED [$string:__v:dirname] /usr/local/apps/bioapps/swift-t-1.1/turbine/export/unix.swift:mkdir():65:15
    # Var: $void v:v:6 RENAMED [$void:__v:v] /usr/local/apps/bioapps/swift-t-1.1/turbine/export/unix.swift:mkdir():65:15
    set v:dirname:4 [ turbine::retrieve_string ${t:13} CACHED 1 ]
    turbine::c::log [ list exec: "mkdir" "-p" ${v:dirname:4} [ dict create ] ]
    turbine::exec_external "mkdir" [ dict create ] "-p" ${v:dirname:4}
}


proc __entry-call_foreign-write { wfilename:failLog u:failLog } {
    # Var: $file v:failLog VALUE_OF [file:failLog]
    # Var: $string v:__wfilename:failLog VALUE_OF [string:__wfilename:failLog]
    set v:__wfilename:failLog [ turbine::retrieve_string ${wfilename:failLog} CACHED 1 ]
    set tcltmp:init_rc 2
    set v:failLog [ turbine::create_local_file_ref ${v:__wfilename:failLog} ${tcltmp:init_rc} 1 ]
    turbine::file_write_local v:failLog ""
    turbine::store_file ${u:failLog} v:failLog 0
}


proc __entry-call_foreign-write-1 { wfilename:outList u:outList } {
    # Var: $file v:outList VALUE_OF [file:outList]
    # Var: $string v:__wfilename:outList VALUE_OF [string:__wfilename:outList]
    set v:__wfilename:outList [ turbine::retrieve_string ${wfilename:outList} CACHED 1 ]
    set tcltmp:init_rc 2
    set v:outList [ turbine::create_local_file_ref ${v:__wfilename:outList} ${tcltmp:init_rc} 1 ]
    turbine::file_write_local v:outList ""
    turbine::store_file ${u:outList} v:outList 0
}


proc __entry-async_op-parse_int { t:85 t:86 } {
    # Var: $string v:t:86 VALUE_OF [string:__t:86]
    # Var: $int v:t:85 VALUE_OF [int:__t:85]
    set v:t:86 [ turbine::retrieve_string ${t:86} CACHED 1 ]
    set v:t:85 [ turbine::parse_int_impl ${v:t:86} 10 ]
    turbine::store_integer ${t:85} ${v:t:85}
}


proc __entry-async_op-eq_string { t:7:2 t:8:2 } {
    # Var: $string v:t:8:2 VALUE_OF [string:__t:8:2]
    # Var: $boolean v:t:7:2 VALUE_OF [boolean:__t:7:2]
    set v:t:8:2 [ turbine::retrieve_string ${t:8:2} CACHED 1 ]
    set v:t:7:2 [ string equal ${v:t:8:2} "BWAMEM" ]
    turbine::store_integer ${t:7:2} ${v:t:7:2}
}


proc __entry-optmerged { t:10 t:20 t:23 t:31 v:f u:configFile u:docRunfile u:failLog u:outList } {
    # Var: $string v:t:10:2 VALUE_OF [string:__t:10]
    # Var: $string v:t:31 VALUE_OF [string:__t:31]
    set v:t:10:2 [ turbine::retrieve_string ${t:10} CACHED 1 ]
    set v:t:31 "${v:t:10:2}/BamFileList.txt"
    turbine::store_string ${t:31} ${v:t:31}
    turbine::set_filename_val ${u:outList} ${v:t:31}
    set tcltmp:prio [ turbine::get_priority ]
    turbine::set_priority ${tcltmp:prio}
    adlb::spawn 0 [ list mkdir-app-leaf1-1 ${v:t:10:2} ]
    turbine::reset_priority
    turbine::rule [ list ${t:20} ] [ list __entry-optmerged-1 ${t:20} ${t:23} ${v:f} ${v:t:10:2} ${u:configFile} ${u:docRunfile} ${u:failLog} ]
}


proc mkdir-app-leaf1-1 { v:t:10:2 } {
    # Var: $void v:v:5 RENAMED [$void:__v:v] /usr/local/apps/bioapps/swift-t-1.1/turbine/export/unix.swift:mkdir():65:15
    turbine::c::log [ list exec: "mkdir" "-p" ${v:t:10:2} [ dict create ] ]
    turbine::exec_external "mkdir" [ dict create ] "-p" ${v:t:10:2}
}


proc __entry-optmerged-1 { t:20 t:23 v:f v:t:10:2 u:configFile u:docRunfile u:failLog } {
    # Var: $string v:t:20 VALUE_OF [string:__t:20]
    # Var: $string v:t:16 VALUE_OF [string:__t:16]
    # Var: $string v:t:23 VALUE_OF [string:__t:23]
    # Var: $string v:t:36 VALUE_OF [string:__t:36]
    set v:t:20 [ turbine::retrieve_string ${t:20} CACHED 1 ]
    set v:t:16 "${v:t:10:2}/${v:t:20}/docs"
    set v:t:23 "${v:t:10:2}/${v:t:20}/docs/Failures.log"
    turbine::store_string ${t:23} ${v:t:23}
    set v:t:36 "${v:t:10:2}/${v:t:20}/docs/${v:f}"
    turbine::set_filename_val ${u:failLog} ${v:t:23}
    turbine::set_filename_val ${u:docRunfile} ${v:t:36}
    set tcltmp:prio [ turbine::get_priority ]
    turbine::set_priority ${tcltmp:prio}
    adlb::spawn 0 [ list mkdir-app-leaf1-2 ${v:t:16} ]
    turbine::reset_priority
    set tcltmp:prio [ turbine::get_priority ]
    turbine::set_priority ${tcltmp:prio}
    adlb::spawn 0 [ list __entry:wait:configFile ${v:t:36} ${u:configFile} ${u:docRunfile} ]
    turbine::reset_priority
}


proc mkdir-app-leaf1-2 { v:t:16 } {
    # Var: $void v:v:7 RENAMED [$void:__v:v] /usr/local/apps/bioapps/swift-t-1.1/turbine/export/unix.swift:mkdir():65:15
    turbine::c::log [ list exec: "mkdir" "-p" ${v:t:16} [ dict create ] ]
    turbine::exec_external "mkdir" [ dict create ] "-p" ${v:t:16}
}


proc __entry:wait:configFile { v:t:36 u:configFile u:docRunfile } {
    # Var: $file v:configFile VALUE_OF [file:configFile]
    # Var: $file v:docRunfile VALUE_OF [file:docRunfile]
    set v:configFile [ turbine::retrieve_file ${u:configFile} CACHED 1 ]
    set tcltmp:init_rc 2
    set v:docRunfile [ turbine::create_local_file_ref ${v:t:36} ${tcltmp:init_rc} 1 ]
    turbine::copy_local_file_contents ${v:docRunfile} ${v:configFile}
    turbine::store_file ${u:docRunfile} v:docRunfile 0
}


proc __entry-optmerged-2 { t:10 t:13 t:20 t:23 t:31 t:55 t:57 t:59 t:7 t:7:2 t:83 t:85 t:88 u:docSampleInfo u:failLog u:outList u:sampleInfoFile u:vars } {
    # Var: $string v:p:1 RENAMED [$string:__v:p]
    # Var: $string v:f:1 RENAMED [$string:__v:f]
    # Var: $file v:sampleInfoFile:1 VALUE_OF [file:sampleInfoFile]
    # Var: $file v:sampleInfoFile:2 VALUE_OF [file:sampleInfoFile]
    # Var: $string$[int] v:sampleLines VALUE_OF [string[int]:sampleLines]
    set v:p:1 [ turbine::retrieve_string ${t:7} CACHED 1 ]
    set v:f:1 [ file tail ${v:p:1} ]
    set tcltmp:init_rc 1
    set v:sampleInfoFile:1 [ turbine::create_local_file_ref "" ${tcltmp:init_rc} 0 ]
    turbine::input_file_local v:sampleInfoFile:1 ${v:p:1}
    turbine::store_file ${u:sampleInfoFile} v:sampleInfoFile:1 1
    set v:sampleInfoFile:2 [ turbine::retrieve_file ${u:sampleInfoFile} ]
    set v:sampleLines [ turbine::file_lines_impl ${v:sampleInfoFile:2} ]
    turbine::rule [ list ${t:10} ${t:20} ] [ list __entry-async_op-strcat ${t:10} ${t:20} ${v:f:1} ${u:docSampleInfo} ${u:sampleInfoFile} ]
    turbine::rule [ list ] "__entry-foreach-wait1 ${t:10} ${t:13} ${t:23} ${t:31} ${t:55} ${t:57} ${t:59} ${t:7:2} ${t:83} ${t:85} ${t:88} {${v:sampleLines}} {${u:failLog}} {${u:outList}} ${u:vars}"
    turbine::decr_local_file_refcount v:sampleInfoFile:1
}


proc __entry-async_op-strcat { t:10 t:20 v:f:1 u:docSampleInfo u:sampleInfoFile } {
    # Var: $string v:t:10:7 VALUE_OF [string:__t:10]
    # Var: $string v:t:20:3 VALUE_OF [string:__t:20]
    # Var: $string v:t:44 VALUE_OF [string:__t:44]
    set v:t:10:7 [ turbine::retrieve_string ${t:10} CACHED 1 ]
    set v:t:20:3 [ turbine::retrieve_string ${t:20} CACHED 1 ]
    set v:t:44 "${v:t:10:7}/${v:t:20:3}/docs/${v:f:1}"
    turbine::set_filename_val ${u:docSampleInfo} ${v:t:44}
    set tcltmp:prio [ turbine::get_priority ]
    turbine::set_priority ${tcltmp:prio}
    adlb::spawn 0 [ list __entry:wait:sampleInfoFile ${v:t:44} ${u:docSampleInfo} ${u:sampleInfoFile} ]
    turbine::reset_priority
}


proc __entry:wait:sampleInfoFile { v:t:44 u:docSampleInfo u:sampleInfoFile } {
    # Var: $file v:sampleInfoFile VALUE_OF [file:sampleInfoFile]
    # Var: $file v:docSampleInfo VALUE_OF [file:docSampleInfo]
    set v:sampleInfoFile [ turbine::retrieve_file ${u:sampleInfoFile} CACHED 1 ]
    set tcltmp:init_rc 2
    set v:docSampleInfo [ turbine::create_local_file_ref ${v:t:44} ${tcltmp:init_rc} 1 ]
    turbine::copy_local_file_contents ${v:docSampleInfo} ${v:sampleInfoFile}
    turbine::store_file ${u:docSampleInfo} v:docSampleInfo 0
}


proc __entry-foreach-wait1 { t:10 t:13 t:23 t:31 t:55 t:57 t:59 t:7:2 t:83 t:85 t:88 v:sampleLines u:failLog u:outList u:vars } {
    set tcltmp:iters [ dict size ${v:sampleLines} ]
    turbine::read_refcount_incr ${t:55} [ expr { ${tcltmp:iters} } ]
    turbine::file_read_refcount_incr ${u:failLog} [ expr { 2 * ${tcltmp:iters} } ]
    turbine::read_refcount_incr ${t:31} [ expr { ${tcltmp:iters} } ]
    turbine::read_refcount_incr ${t:83} [ expr { ${tcltmp:iters} } ]
    turbine::read_refcount_incr ${t:85} [ expr { 3 * ${tcltmp:iters} } ]
    turbine::read_refcount_incr ${t:7:2} [ expr { ${tcltmp:iters} } ]
    turbine::read_refcount_incr ${t:59} [ expr { ${tcltmp:iters} } ]
    turbine::read_refcount_incr ${t:88} [ expr { ${tcltmp:iters} } ]
    turbine::read_refcount_incr ${t:57} [ expr { ${tcltmp:iters} } ]
    turbine::read_refcount_incr ${u:vars} [ expr { 5 * ${tcltmp:iters} } ]
    turbine::read_refcount_incr ${t:13} [ expr { 2 * ${tcltmp:iters} } ]
    turbine::file_read_refcount_incr ${u:outList} [ expr { ${tcltmp:iters} } ]
    turbine::read_refcount_incr ${t:10} [ expr { ${tcltmp:iters} } ]
    turbine::read_refcount_incr ${t:23} [ expr { 2 * ${tcltmp:iters} } ]
    dict for {tcltmp:ignore v:sample} ${v:sampleLines} {
        # Var: string[int] u:sampleInfo /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:__entry():199:1
        # Var: string u:rgheader /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:__entry():204:1
        # Var: file u:alignedbam /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:__entry():227:48
        # Var: string t:78 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:__entry():230:19
        # Var: file u:alignedsam /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:__entry():230:65
        # Var: boolean t:90 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:__entry():239:6
        # Var: $string$[int] v:sampleInfo VALUE_OF [string[int]:sampleInfo]
        # Var: $string v:alias:sampleName VALUE_OF [string:__alias:sampleName]
        # Var: $string v:alias:read1 VALUE_OF [string:__alias:read1]
        # Var: $string v:alias:read2 VALUE_OF [string:__alias:read2]
        # Var: string t:5:2 RENAMED [string:__t:5] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:alignReads():58:19
        # Var: file u:alignedLog RENAMED [file:alignedLog] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:alignReads():58:48
        lassign [ adlb::multicreate [ list container integer string 1 2 24 ] [ list string 2 1 25 ] [ list string 3 1 27 ] [ list integer 1 1 29 ] [ list string 2 1 30 ] ] u:sampleInfo u:rgheader t:78 t:90 t:5:2
        turbine::c::log "allocated u:sampleInfo=<${u:sampleInfo}> u:rgheader=<${u:rgheader}> t:78=<${t:78}> t:90=<${t:90}> t:5:2=<${t:5:2}>"
        lassign [ turbine::make_file_tds [ adlb::multicreate [ list file 2 1 26 ] [ list file 1 1 28 ] [ list file 0 1 31 ] ] [ list 1 1 1 ] ] u:alignedbam u:alignedsam u:alignedLog
        set v:sampleInfo [ turbine::split_impl ${v:sample} " " ]
        turbine::build_rec ${u:sampleInfo} ${v:sampleInfo} [ list container integer string ] 0 1
        set a:sampleName [ adlb::subscript_container ${u:sampleInfo} 0 ]
        set v:alias:sampleName [ turbine::retrieve_string ${a:sampleName} ]
        set a:read1 [ adlb::subscript_container ${u:sampleInfo} 1 ]
        set v:alias:read1 [ turbine::retrieve_string ${a:read1} ]
        set a:read2 [ adlb::subscript_container ${u:sampleInfo} 2 ]
        set v:alias:read2 [ turbine::retrieve_string ${a:read2} CACHED 1 ]
        f:samtools_view ${u:alignedbam} ${t:83} ${u:alignedsam} ${t:85} ${t:88} -100 "HARD" "RANK"
        turbine::rule [ list ${t:7:2} ] [ list alignReads-if1 ${t:5:2} ${t:78} ${t:7:2} ${t:85} ${v:alias:read1} ${v:alias:read2} ${u:alignedLog} ${u:alignedsam} ${u:rgheader} ${u:vars} ]
        turbine::rule [ list ${t:55} ${t:57} ${t:59} ] [ list __entry-async_op-sprintf ${t:55} ${t:57} ${t:59} ${v:alias:sampleName} ${u:rgheader} ]
        turbine::rule [ list ${t:13} ] [ list __entry-async_op-strcat-1 ${t:13} ${t:78} ${v:alias:sampleName} ${u:alignedsam} ]
        turbine::rule [ list ${t:10} ] [ list __entry-optmerged-3 ${t:10} ${t:13} ${t:23} ${t:31} ${t:5:2} ${t:78} ${t:83} ${t:85} ${t:88} ${t:90} ${v:alias:sampleName} ${u:alignedLog} ${u:alignedbam} ${u:alignedsam} ${u:failLog} ${u:outList} ${u:vars} ]
        adlb::write_refcount_decr ${u:sampleInfo} 1
    }
    turbine::read_refcount_decr ${t:55} 1
    turbine::read_refcount_decr ${t:57} 1
    turbine::read_refcount_decr ${t:31} 1
    turbine::file_read_refcount_decr ${u:failLog} 1
    turbine::read_refcount_decr ${t:23} 1
    turbine::read_refcount_decr ${t:88} 1
    turbine::read_refcount_decr ${t:85} 1
    turbine::read_refcount_decr ${t:59} 1
    turbine::read_refcount_decr ${t:83} 1
    turbine::read_refcount_decr ${t:7:2} 1
    turbine::read_refcount_decr ${u:vars} 1
    turbine::read_refcount_decr ${t:13} 1
    turbine::read_refcount_decr ${t:10} 1
    turbine::file_read_refcount_decr ${u:outList} 1
}


proc alignReads-if1 { t:5:2 t:78 t:7:2 t:85 v:alias:read1 v:alias:read2 u:alignedLog u:alignedsam u:rgheader u:vars } {
    # Var: $boolean v:__t:7 RENAMED [$boolean:__v:__t:7] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:alignReads():61:28
    set v:__t:7 [ turbine::retrieve_integer ${t:7:2} CACHED 1 ]
    if { ${v:__t:7} } {
        # Var: string t:11:2 RENAMED [string:__t:11] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:alignReads():63:34
        # Var: string t:13:2 RENAMED [string:__t:13] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:alignReads():63:64
        # Var: string[int] t:15:2 RENAMED [string[int]:__t:15] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:alignReads():64:9
        # Var: string t:16:2 RENAMED [string:__t:16] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:alignReads():64:9
        lassign [ adlb::multicreate [ list string 1 1 32 ] [ list string 1 1 33 ] [ list container integer string 1 1 34 ] [ list string 1 1 35 ] ] t:11:2 t:13:2 t:15:2 t:16:2
        turbine::c::log "allocated t:11:2=<${t:11:2}> t:13:2=<${t:13:2}> t:15:2=<${t:15:2}> t:16:2=<${t:16:2}>"
        turbine::read_refcount_incr ${u:vars} 1
        turbine::container_reference ${u:vars} "BWADIR" ${t:11:2} string
        turbine::container_reference ${u:vars} "BWAINDEX" ${t:13:2} string
        turbine::container_reference ${u:vars} "BWAMEMPARAMS" ${t:16:2} string
        turbine::rule [ list ${t:16:2} ] [ list __entry-arr_copy_in_imm ${t:11:2} ${t:13:2} ${t:15:2} ${t:16:2} ${t:5:2} ${t:78} ${t:85} ${v:alias:read1} ${v:alias:read2} ${u:alignedLog} ${u:alignedsam} ${u:rgheader} ]
    } else {
        # Var: string t:21:2 RENAMED [string:__t:21] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:alignReads():69:36
        # Var: string t:23:2 RENAMED [string:__t:23] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:alignReads():69:72
        lassign [ adlb::multicreate [ list string 1 1 36 ] [ list string 1 1 37 ] ] t:21:2 t:23:2
        turbine::c::log "allocated t:21:2=<${t:21:2}> t:23:2=<${t:23:2}>"
        turbine::container_reference ${u:vars} "NOVOALIGNDIR" ${t:21:2} string
        turbine::container_reference ${u:vars} "NOVOALIGNINDEX" ${t:23:2} string
        turbine::rule [ list ${t:21:2} ${t:23:2} ${t:5:2} ${t:78} ${t:85} ${u:rgheader} ] [ list novoalign-app-leaf1 ${t:21:2} ${t:23:2} ${t:5:2} ${t:78} ${t:85} ${v:alias:read1} ${v:alias:read2} ${u:alignedLog} ${u:alignedsam} ${u:rgheader} ]
    }
    turbine::read_refcount_decr ${u:vars} 1
    turbine::read_refcount_decr ${u:rgheader} 1
    turbine::read_refcount_decr ${t:85} 1
    turbine::read_refcount_decr ${t:78} 1
    turbine::read_refcount_decr ${t:5:2} 1
}


proc __entry-arr_copy_in_imm { t:11:2 t:13:2 t:15:2 t:16:2 t:5:2 t:78 t:85 v:alias:read1 v:alias:read2 u:alignedLog u:alignedsam u:rgheader } {
    # Var: $string v:t:16:2 VALUE_OF [string:__t:16:2]
    set v:t:16:2 [ turbine::retrieve_string ${t:16:2} CACHED 1 ]
    turbine::array_kv_build ${t:15:2} [ ::adlb::dict_create 0 ${v:t:16:2} ] 1 integer string
    turbine::rule [ list ${t:11:2} ${t:13:2} ${t:5:2} ${t:78} ${t:85} ${u:rgheader} ] [ list bwa_mem-app-leaf1 ${t:11:2} ${t:13:2} ${t:15:2} ${t:5:2} ${t:78} ${t:85} ${v:alias:read1} ${v:alias:read2} ${u:alignedLog} ${u:alignedsam} ${u:rgheader} ]
}


proc bwa_mem-app-leaf1 { t:11:2 t:13:2 t:15:2 t:5:2 t:78 t:85 v:alias:read1 v:alias:read2 u:alignedLog u:alignedsam u:rgheader } {
    # Var: $string v:bwadir RENAMED [$string:__v:bwadir] ./bioapps/align_dedup.swift:bwa_mem():4:101
    # Var: $string$[int] v:bwamemparams RENAMED [$string$[int]:__v:bwamemparams] ./bioapps/align_dedup.swift:bwa_mem():4:101
    # Var: $int v:PBSCORES RENAMED [$int:__v:PBSCORES] ./bioapps/align_dedup.swift:bwa_mem():4:101
    # Var: $string v:rgheader RENAMED [$string:__v:rgheader] ./bioapps/align_dedup.swift:bwa_mem():4:101
    # Var: $string v:INDEX RENAMED [$string:__v:INDEX] ./bioapps/align_dedup.swift:bwa_mem():4:101
    # Var: $string v:__filename:output:2 RENAMED [$string:__v:__filename:output] ./bioapps/align_dedup.swift:bwa_mem():4:101
    # Var: $string v:__filename:outLog:2 RENAMED [$string:__v:__filename:outLog] ./bioapps/align_dedup.swift:bwa_mem():4:101
    # Var: $file v:output:2 RENAMED [$file:__v:output] ./bioapps/align_dedup.swift:bwa_mem():4:101
    # Var: $file v:outLog:2 RENAMED [$file:__v:outLog] ./bioapps/align_dedup.swift:bwa_mem():4:101
    set v:bwadir [ turbine::retrieve_string ${t:11:2} CACHED 1 ]
    set v:bwamemparams [ turbine::unpack_args ${t:15:2} 1 string ]
    set v:PBSCORES [ turbine::retrieve_integer ${t:85} CACHED 1 ]
    set v:rgheader [ turbine::retrieve_string ${u:rgheader} CACHED 1 ]
    set v:INDEX [ turbine::retrieve_string ${t:13:2} CACHED 1 ]
    set v:__filename:output:2 [ turbine::retrieve_string ${t:78} CACHED 1 ]
    set v:__filename:outLog:2 [ turbine::retrieve_string ${t:5:2} CACHED 1 ]
    set tcltmp:init_rc 2
    set v:output:2 [ turbine::create_local_file_ref ${v:__filename:output:2} ${tcltmp:init_rc} 1 ]
    set tcltmp:init_rc 2
    set v:outLog:2 [ turbine::create_local_file_ref ${v:__filename:outLog:2} ${tcltmp:init_rc} 1 ]
    turbine::c::log [ list exec: __v:bwadir "mem" "-M" {*}${v:bwamemparams} "-t" ${v:PBSCORES} "-R" ${v:rgheader} ${v:INDEX} ${v:alias:read1} ${v:alias:read2} [ dict create "stdout" ${v:__filename:output:2} "stderr" ${v:__filename:outLog:2} ] ]
    turbine::exec_external ${v:bwadir} [ dict create "stdout" ${v:__filename:output:2} "stderr" ${v:__filename:outLog:2} ] "mem" "-M" {*}${v:bwamemparams} "-t" ${v:PBSCORES} "-R" ${v:rgheader} ${v:INDEX} ${v:alias:read1} ${v:alias:read2}
    turbine::store_file ${u:alignedsam} v:output:2 0
    turbine::store_file ${u:alignedLog} v:outLog:2 0
    turbine::decr_local_file_refcount v:output:2
    turbine::decr_local_file_refcount v:outLog:2
    turbine::read_refcount_decr ${t:15:2} 1
}


proc novoalign-app-leaf1 { t:21:2 t:23:2 t:5:2 t:78 t:85 v:alias:read1 v:alias:read2 u:alignedLog u:alignedsam u:rgheader } {
    # Var: $string v:novoaligndir RENAMED [$string:__v:novoaligndir] ./bioapps/align_dedup.swift:novoalign():9:99
    # Var: $int v:PBSCORES:1 RENAMED [$int:__v:PBSCORES] ./bioapps/align_dedup.swift:novoalign():9:99
    # Var: $string v:INDEX:1 RENAMED [$string:__v:INDEX] ./bioapps/align_dedup.swift:novoalign():9:99
    # Var: $string v:rgheader:1 RENAMED [$string:__v:rgheader] ./bioapps/align_dedup.swift:novoalign():9:99
    # Var: $string v:__filename:output:3 RENAMED [$string:__v:__filename:output] ./bioapps/align_dedup.swift:novoalign():9:99
    # Var: $string v:__filename:outLog:3 RENAMED [$string:__v:__filename:outLog] ./bioapps/align_dedup.swift:novoalign():9:99
    # Var: $file v:output:3 RENAMED [$file:__v:output] ./bioapps/align_dedup.swift:novoalign():9:99
    # Var: $file v:outLog:3 RENAMED [$file:__v:outLog] ./bioapps/align_dedup.swift:novoalign():9:99
    set v:novoaligndir [ turbine::retrieve_string ${t:21:2} CACHED 1 ]
    set v:PBSCORES:1 [ turbine::retrieve_integer ${t:85} CACHED 1 ]
    set v:INDEX:1 [ turbine::retrieve_string ${t:23:2} CACHED 1 ]
    set v:rgheader:1 [ turbine::retrieve_string ${u:rgheader} CACHED 1 ]
    set v:__filename:output:3 [ turbine::retrieve_string ${t:78} CACHED 1 ]
    set v:__filename:outLog:3 [ turbine::retrieve_string ${t:5:2} CACHED 1 ]
    set tcltmp:init_rc 2
    set v:output:3 [ turbine::create_local_file_ref ${v:__filename:output:3} ${tcltmp:init_rc} 1 ]
    set tcltmp:init_rc 2
    set v:outLog:3 [ turbine::create_local_file_ref ${v:__filename:outLog:3} ${tcltmp:init_rc} 1 ]
    turbine::c::log [ list exec: __v:novoaligndir "-c" ${v:PBSCORES:1} "-d" ${v:INDEX:1} "-f" ${v:alias:read1} ${v:alias:read2} "-o" "SAM" ${v:rgheader:1} [ dict create "stdout" ${v:__filename:output:3} "stderr" ${v:__filename:outLog:3} ] ]
    turbine::exec_external ${v:novoaligndir} [ dict create "stdout" ${v:__filename:output:3} "stderr" ${v:__filename:outLog:3} ] "-c" ${v:PBSCORES:1} "-d" ${v:INDEX:1} "-f" ${v:alias:read1} ${v:alias:read2} "-o" "SAM" ${v:rgheader:1}
    turbine::store_file ${u:alignedsam} v:output:3 0
    turbine::store_file ${u:alignedLog} v:outLog:3 0
    turbine::decr_local_file_refcount v:output:3
    turbine::decr_local_file_refcount v:outLog:3
}


proc __entry-async_op-sprintf { t:55 t:57 t:59 v:alias:sampleName u:rgheader } {
    # Var: $string v:t:55 VALUE_OF [string:__t:55]
    # Var: $string v:t:57 VALUE_OF [string:__t:57]
    # Var: $string v:t:59 VALUE_OF [string:__t:59]
    # Var: $string v:rgheader:2 VALUE_OF [string:rgheader]
    set v:t:55 [ turbine::retrieve_string ${t:55} CACHED 1 ]
    set v:t:57 [ turbine::retrieve_string ${t:57} CACHED 1 ]
    set v:t:59 [ turbine::retrieve_string ${t:59} CACHED 1 ]
    set v:rgheader:2 [ eval format [ list "@RG\tID:%s\tLB:%s\tPL:%s\tPU:%s\tSM:%s\tCN:%s" ${v:alias:sampleName} ${v:t:55} ${v:t:57} ${v:alias:sampleName} ${v:alias:sampleName} ${v:t:59} ] ]
    turbine::store_string ${u:rgheader} ${v:rgheader:2}
}


proc __entry-async_op-strcat-1 { t:13 t:78 v:alias:sampleName u:alignedsam } {
    # Var: $string v:t:13 VALUE_OF [string:__t:13]
    # Var: $string v:t:78 VALUE_OF [string:__t:78]
    set v:t:13 [ turbine::retrieve_string ${t:13} CACHED 1 ]
    set v:t:78 "${v:t:13}/align/${v:alias:sampleName}.noDedups.sam"
    turbine::store_string ${t:78} ${v:t:78}
    turbine::set_filename_val ${u:alignedsam} ${v:t:78}
}


proc __entry-optmerged-3 { t:10 t:13 t:23 t:31 t:5:2 t:78 t:83 t:85 t:88 t:90 v:alias:sampleName u:alignedLog u:alignedbam u:alignedsam u:failLog u:outList u:vars } {
    # Var: $string v:t:10:4 VALUE_OF [string:__t:10]
    # Var: $string v:AlignDir VALUE_OF [string:AlignDir]
    # Var: $string v:RealignDir VALUE_OF [string:RealignDir]
    # Var: $string v:VarcallDir VALUE_OF [string:VarcallDir]
    # Var: $string v:t:5:2 VALUE_OF [string:__t:5:2]
    # Var: $string v:t:76 VALUE_OF [string:__t:76]
    set v:t:10:4 [ turbine::retrieve_string ${t:10} CACHED 1 ]
    set v:AlignDir "${v:t:10:4}/${v:alias:sampleName}/align/"
    set v:RealignDir "${v:t:10:4}/${v:alias:sampleName}/realign/"
    set v:VarcallDir "${v:t:10:4}/${v:alias:sampleName}/variant/"
    set v:t:5:2 "${v:AlignDir}${v:alias:sampleName}_Alignment.log"
    turbine::store_string ${t:5:2} ${v:t:5:2}
    turbine::set_filename_val ${u:alignedLog} ${v:t:5:2}
    set v:t:76 "${v:AlignDir}${v:alias:sampleName}.noDedups.bam"
    turbine::set_filename_val ${u:alignedbam} ${v:t:76}
    turbine::rule [ list [ turbine::get_file_td ${u:alignedbam} ] ] "f:checkBam ${t:90} ${u:vars} {${u:alignedbam}}"
    set tcltmp:prio [ turbine::get_priority ]
    turbine::set_priority ${tcltmp:prio}
    adlb::spawn 0 [ list mkdir-app-leaf1-3 ${v:AlignDir} ]
    turbine::reset_priority
    set tcltmp:prio [ turbine::get_priority ]
    turbine::set_priority ${tcltmp:prio}
    adlb::spawn 0 [ list mkdir-app-leaf1-4 ${v:RealignDir} ]
    turbine::reset_priority
    set tcltmp:prio [ turbine::get_priority ]
    turbine::set_priority ${tcltmp:prio}
    adlb::spawn 0 [ list mkdir-app-leaf1-5 ${v:VarcallDir} ]
    turbine::reset_priority
    turbine::rule [ list ${t:90} ] [ list __entry-if1 ${t:13} ${t:23} ${t:31} ${t:78} ${t:83} ${t:85} ${t:88} ${t:90} ${v:AlignDir} ${v:alias:sampleName} ${v:t:76} ${u:alignedbam} ${u:alignedsam} ${u:failLog} ${u:outList} ${u:vars} ]
}


proc mkdir-app-leaf1-3 { v:AlignDir } {
    # Var: $void v:v:2 RENAMED [$void:__v:v] /usr/local/apps/bioapps/swift-t-1.1/turbine/export/unix.swift:mkdir():65:15
    turbine::c::log [ list exec: "mkdir" "-p" ${v:AlignDir} [ dict create ] ]
    turbine::exec_external "mkdir" [ dict create ] "-p" ${v:AlignDir}
}


proc mkdir-app-leaf1-4 { v:RealignDir } {
    # Var: $void v:v:3 RENAMED [$void:__v:v] /usr/local/apps/bioapps/swift-t-1.1/turbine/export/unix.swift:mkdir():65:15
    turbine::c::log [ list exec: "mkdir" "-p" ${v:RealignDir} [ dict create ] ]
    turbine::exec_external "mkdir" [ dict create ] "-p" ${v:RealignDir}
}


proc mkdir-app-leaf1-5 { v:VarcallDir } {
    # Var: $void v:v:4 RENAMED [$void:__v:v] /usr/local/apps/bioapps/swift-t-1.1/turbine/export/unix.swift:mkdir():65:15
    turbine::c::log [ list exec: "mkdir" "-p" ${v:VarcallDir} [ dict create ] ]
    turbine::exec_external "mkdir" [ dict create ] "-p" ${v:VarcallDir}
}


proc __entry-if1 { t:13 t:23 t:31 t:78 t:83 t:85 t:88 t:90 v:AlignDir v:alias:sampleName v:t:76 u:alignedbam u:alignedsam u:failLog u:outList u:vars } {
    # Var: $boolean v:__t:90 VALUE_OF [boolean:__t:90] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:__entry():239:21
    set v:__t:90 [ turbine::retrieve_integer ${t:90} CACHED 1 ]
    if { ${v:__t:90} } {
        # Var: file u:dedupsortedbam /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:__entry():245:53
        # Var: boolean t:93 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:__entry():249:7
        # Var: string t:6:1 RENAMED [string:__t:6] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:markDuplicates():87:5
        # Var: $string v:t:91 VALUE_OF [string:__t:91]
        lassign [ adlb::multicreate [ list integer 1 1 39 ] [ list string 1 1 40 ] ] t:93 t:6:1
        turbine::c::log "allocated t:93=<${t:93}> t:6:1=<${t:6:1}>"
        lassign [ turbine::make_file_tds [ adlb::multicreate [ list file 3 1 38 ] ] [ list 1 ] ] u:dedupsortedbam
        turbine::file_read_refcount_incr ${u:outList} 1
        turbine::read_refcount_incr ${t:13} 2
        turbine::file_read_refcount_incr ${u:alignedsam} 2
        turbine::read_refcount_incr ${u:vars} 6
        turbine::read_refcount_incr ${t:78} 2
        turbine::read_refcount_incr ${t:83} 2
        turbine::read_refcount_incr ${t:85} 1
        turbine::read_refcount_incr ${t:88} 1
        turbine::file_read_refcount_incr ${u:alignedbam} 1
        turbine::read_refcount_incr ${t:23} 1
        turbine::file_read_refcount_incr ${u:failLog} 1
        turbine::read_refcount_incr ${t:31} 1
        turbine::container_reference ${u:vars} "MARKDUPLICATESTOOL" ${t:6:1} string
        set v:t:91 "${v:AlignDir}${v:alias:sampleName}.wDedups.sorted.bam"
        turbine::set_filename_val ${u:dedupsortedbam} ${v:t:91}
        turbine::rule [ list [ turbine::get_file_td ${u:dedupsortedbam} ] ] "f:checkBam ${t:93} ${u:vars} {${u:dedupsortedbam}}"
        turbine::rule [ list ${t:6:1} ] [ list __entry-async_op-eq_string-1 ${t:13} ${t:6:1} ${t:78} ${t:83} ${t:85} ${t:88} ${v:AlignDir} ${v:alias:sampleName} ${v:t:91} ${u:alignedbam} ${u:alignedsam} ${u:dedupsortedbam} ${u:vars} ]
        turbine::rule [ list ${t:93} ] [ list __entry-if2 ${t:23} ${t:31} ${t:78} ${t:83} ${t:93} ${v:AlignDir} ${v:alias:sampleName} ${v:t:91} ${u:alignedsam} ${u:dedupsortedbam} ${u:failLog} ${u:outList} ${u:vars} ]
    } else {
        # Var: file u:newFile:3 RENAMED [file:newFile] ./generalfunctions/general.swift:append():11:17
        # Var: $string v:message VALUE_OF [string:message]
        lassign [ turbine::make_file_tds [ adlb::multicreate [ list file 1 1 75 ] ] [ list 1 ] ] u:newFile:3
        set wfilename:newFile:3 [ turbine::get_file_path ${u:newFile:3} ]
        set v:message "FAILURE: ${v:t:76} contains no alignments. Check ${v:AlignDir}${v:alias:sampleName}_Alignment.log for details.\n"
        turbine::rule [ list [ turbine::get_file_td ${u:failLog} ] ] [ list __entry-call_foreign-read-3 ${v:message} ${wfilename:newFile:3} ${u:failLog} ${u:newFile:3} ]
        turbine::rule [ list ${t:23} ] "__entry-copy_in_filename-3 ${t:23} {${u:newFile:3}}"
    }
    turbine::read_refcount_decr ${t:31} 1
    turbine::file_read_refcount_decr ${u:failLog} 1
    turbine::read_refcount_decr ${t:23} 1
    turbine::file_read_refcount_decr ${u:alignedbam} 1
    turbine::read_refcount_decr ${t:88} 1
    turbine::read_refcount_decr ${t:85} 1
    turbine::read_refcount_decr ${t:78} 1
    turbine::read_refcount_decr ${t:83} 1
    turbine::read_refcount_decr ${u:vars} 1
    turbine::file_read_refcount_decr ${u:alignedsam} 1
    turbine::read_refcount_decr ${t:13} 1
    turbine::file_read_refcount_decr ${u:outList} 1
}


proc __entry-async_op-eq_string-1 { t:13 t:6:1 t:78 t:83 t:85 t:88 v:AlignDir v:alias:sampleName v:t:91 u:alignedbam u:alignedsam u:dedupsortedbam u:vars } {
    # Var: $string v:t:6:1 VALUE_OF [string:__t:6:1]
    # Var: $boolean v:t:5:1 VALUE_OF [boolean:__t:5:1]
    set v:t:6:1 [ turbine::retrieve_string ${t:6:1} CACHED 1 ]
    set v:t:5:1 [ string equal ${v:t:6:1} "SAMBLASTER" ]
    if { ${v:t:5:1} } {
        # Var: file u:dedupsam RENAMED [file:dedupsam] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:markDuplicates():88:64
        # Var: file u:dedupbam RENAMED [file:dedupbam] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:markDuplicates():89:47
        # Var: file u:samLog RENAMED [file:samLog] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:markDuplicates():90:45
        # Var: file u:sortLog RENAMED [file:sortLog] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:markDuplicates():91:46
        # Var: string t:20:1 RENAMED [string:__t:20] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:markDuplicates():94:32
        # Var: string t:30:1 RENAMED [string:__t:30] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:markDuplicates():100:37
        # Var: string[int] t:37:1 RENAMED [string[int]:__t:37] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:markDuplicates():101:38
        # Var: $string v:t:14:1 VALUE_OF [string:__t:14:1]
        # Var: $string v:t:16:1 VALUE_OF [string:__t:16:1]
        # Var: $string v:t:18:1 VALUE_OF [string:__t:18:1]
        lassign [ adlb::multicreate [ list string 1 1 45 ] [ list string 1 1 46 ] [ list container integer string 1 1 47 ] ] t:20:1 t:30:1 t:37:1
        turbine::c::log "allocated t:20:1=<${t:20:1}> t:30:1=<${t:30:1}> t:37:1=<${t:37:1}>"
        lassign [ turbine::make_file_tds [ adlb::multicreate [ list file 1 1 41 ] [ list file 1 1 42 ] [ list file 0 1 43 ] [ list file 1 1 44 ] ] [ list 1 1 1 1 ] ] u:dedupsam u:dedupbam u:samLog u:sortLog
        turbine::read_refcount_incr ${t:78} 1
        turbine::file_read_refcount_incr ${u:alignedsam} 1
        turbine::array_kv_build ${t:37:1} [ ::adlb::dict_create 0 "--compression" 1 "1" ] 1 integer string
        turbine::container_reference ${u:vars} "SAMBLASTERDIR" ${t:20:1} string
        f:samtools_view ${u:dedupbam} ${t:83} ${u:dedupsam} ${t:85} ${t:88} -100 "HARD" "RANK"
        turbine::container_reference ${u:vars} "NOVOSORTDIR" ${t:30:1} string
        f:novosort ${u:dedupsortedbam} ${u:sortLog} ${t:30:1} ${u:dedupbam} ${t:13} ${t:85} ${t:37:1} -100 "HARD" "RANK"
        set v:t:14:1 "${v:AlignDir}${v:alias:sampleName}.wDedups.bam"
        turbine::set_filename_val ${u:dedupbam} ${v:t:14:1}
        set v:t:16:1 "${v:AlignDir}${v:alias:sampleName}_SamblasterDedup.log"
        turbine::set_filename_val ${u:samLog} ${v:t:16:1}
        set v:t:18:1 "${v:AlignDir}${v:alias:sampleName}_Sort.log"
        turbine::set_filename_val ${u:sortLog} ${v:t:18:1}
        turbine::rule [ list ${t:13} ] [ list __entry-async_op-strcat-2 ${t:13} ${t:20:1} ${t:78} ${v:alias:sampleName} ${v:t:16:1} ${u:alignedsam} ${u:dedupsam} ${u:samLog} ]
        turbine::read_refcount_decr ${t:30:1} 1
        turbine::file_read_refcount_decr ${u:dedupbam} 1
        turbine::read_refcount_decr ${t:37:1} 1
        turbine::file_read_refcount_decr ${u:sortLog} 1
    } else {
        # Var: $boolean v:t:40:1 VALUE_OF [boolean:__t:40:1]
        turbine::file_read_refcount_incr ${u:dedupsortedbam} 1
        turbine::read_refcount_incr ${t:85} 1
        turbine::file_read_refcount_incr ${u:alignedbam} 1
        set v:t:40:1 [ string equal ${v:t:6:1} "PICARD" ]
        turbine::rule [ list ] [ list markDuplicates-if2 ${t:13} ${t:85} ${v:AlignDir} ${v:alias:sampleName} ${v:t:40:1} ${v:t:91} ${u:alignedbam} ${u:dedupsortedbam} ${u:vars} ]
    }
    turbine::read_refcount_decr ${u:vars} 1
    turbine::file_read_refcount_decr ${u:alignedsam} 1
    turbine::file_read_refcount_decr ${u:alignedbam} 1
    turbine::read_refcount_decr ${t:13} 1
    turbine::read_refcount_decr ${t:88} 1
    turbine::read_refcount_decr ${t:85} 1
    turbine::file_read_refcount_decr ${u:dedupsortedbam} 1
    turbine::read_refcount_decr ${t:78} 1
    turbine::read_refcount_decr ${t:83} 1
}


proc __entry-async_op-strcat-2 { t:13 t:20:1 t:78 v:alias:sampleName v:t:16:1 u:alignedsam u:dedupsam u:samLog } {
    # Var: $string v:t:13:1 VALUE_OF [string:__t:13]
    # Var: $string v:t:9:1 VALUE_OF [string:__t:9:1]
    set v:t:13:1 [ turbine::retrieve_string ${t:13} CACHED 1 ]
    set v:t:9:1 "${v:t:13:1}/align/${v:alias:sampleName}.wDedups.sam"
    turbine::set_filename_val ${u:dedupsam} ${v:t:9:1}
    turbine::rule [ list ${t:20:1} ${t:78} [ turbine::get_file_td ${u:alignedsam} ] ] [ list samblaster-app-leaf1 ${t:20:1} ${t:78} ${v:t:16:1} ${v:t:9:1} ${u:alignedsam} ${u:dedupsam} ${u:samLog} ]
}


proc samblaster-app-leaf1 { t:20:1 t:78 v:t:16:1 v:t:9:1 u:alignedsam u:dedupsam u:samLog } {
    # Var: $string v:samblasterdir RENAMED [$string:__v:samblasterdir] ./bioapps/align_dedup.swift:samblaster():27:58
    # Var: $string v:__filename:inputFile:1 RENAMED [$string:__v:__filename:inputFile] ./bioapps/align_dedup.swift:samblaster():27:58
    # Var: $file v:inputFile:1 RENAMED [$file:__v:inputFile] ./bioapps/align_dedup.swift:samblaster():27:58
    # Var: $file v:output:1 RENAMED [$file:__v:output] ./bioapps/align_dedup.swift:samblaster():27:58
    # Var: $file v:outLog RENAMED [$file:__v:outLog] ./bioapps/align_dedup.swift:samblaster():27:58
    set v:samblasterdir [ turbine::retrieve_string ${t:20:1} CACHED 1 ]
    set v:__filename:inputFile:1 [ turbine::retrieve_string ${t:78} CACHED 1 ]
    set v:inputFile:1 [ turbine::retrieve_file ${u:alignedsam} CACHED 1 ]
    set tcltmp:init_rc 2
    set v:output:1 [ turbine::create_local_file_ref ${v:t:9:1} ${tcltmp:init_rc} 1 ]
    set tcltmp:init_rc 2
    set v:outLog [ turbine::create_local_file_ref ${v:t:16:1} ${tcltmp:init_rc} 1 ]
    turbine::c::log [ list exec: __v:samblasterdir "-M" "-i" ${v:__filename:inputFile:1} [ dict create "stdout" ${v:t:9:1} "stderr" ${v:t:16:1} ] ]
    turbine::exec_external ${v:samblasterdir} [ dict create "stdout" ${v:t:9:1} "stderr" ${v:t:16:1} ] "-M" "-i" ${v:__filename:inputFile:1}
    turbine::store_file ${u:dedupsam} v:output:1 0
    turbine::store_file ${u:samLog} v:outLog 0
    set tcltmp:prio [ turbine::get_priority ]
    turbine::set_priority ${tcltmp:prio}
    adlb::spawn 0 [ list rm-app-leaf1 ${v:t:9:1} ${u:dedupsam} ]
    turbine::reset_priority
    turbine::decr_local_file_refcount v:output:1
    turbine::decr_local_file_refcount v:outLog
}


proc rm-app-leaf1 { v:t:9:1 u:dedupsam } {
    # Var: $file v:f:3 RENAMED [$file:__v:f] ./generalfunctions/general.swift:rm():32:6
    # Var: $void v:v:1 RENAMED [$void:__v:v] ./generalfunctions/general.swift:rm():32:6
    set v:f:3 [ turbine::retrieve_file ${u:dedupsam} CACHED 1 ]
    turbine::c::log [ list exec: "rm" ${v:t:9:1} [ dict create ] ]
    turbine::exec_external "rm" [ dict create ] ${v:t:9:1}
}


proc markDuplicates-if2 { t:13 t:85 v:AlignDir v:alias:sampleName v:t:40:1 v:t:91 u:alignedbam u:dedupsortedbam u:vars } {
    if { ${v:t:40:1} } {
        # Var: file u:metricsfile RENAMED [file:metricsfile] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:markDuplicates():106:50
        # Var: file u:alignedsortedbam RENAMED [file:alignedsortedbam] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:markDuplicates():107:55
        # Var: file u:picardLog RENAMED [file:picardLog] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:markDuplicates():108:48
        # Var: file u:sortLog:1 RENAMED [file:sortLog] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:markDuplicates():109:46
        # Var: string t:52:1 RENAMED [string:__t:52] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:markDuplicates():112:39
        # Var: string[int] t:59:1 RENAMED [string[int]:__t:59] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:markDuplicates():113:27
        # Var: string t:60:1 RENAMED [string:__t:60] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:markDuplicates():116:50
        # Var: string t:62:1 RENAMED [string:__t:62] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:markDuplicates():116:67
        # Var: $string v:t:44:1 VALUE_OF [string:__t:44:1]
        # Var: $string v:t:46:1 VALUE_OF [string:__t:46:1]
        # Var: $string v:t:48:1 VALUE_OF [string:__t:48:1]
        # Var: $string v:t:50:1 VALUE_OF [string:__t:50:1]
        lassign [ adlb::multicreate [ list string 1 1 52 ] [ list container integer string 1 1 53 ] [ list string 1 1 54 ] [ list string 1 1 55 ] ] t:52:1 t:59:1 t:60:1 t:62:1
        turbine::c::log "allocated t:52:1=<${t:52:1}> t:59:1=<${t:59:1}> t:60:1=<${t:60:1}> t:62:1=<${t:62:1}>"
        lassign [ turbine::make_file_tds [ adlb::multicreate [ list file 0 1 48 ] [ list file 1 1 49 ] [ list file 0 1 50 ] [ list file 1 1 51 ] ] [ list 1 1 1 1 ] ] u:metricsfile u:alignedsortedbam u:picardLog u:sortLog:1
        turbine::read_refcount_incr ${t:13} 1
        turbine::read_refcount_incr ${u:vars} 2
        turbine::array_kv_build ${t:59:1} [ ::adlb::dict_create ] 1 integer string
        turbine::container_reference ${u:vars} "NOVOSORTDIR" ${t:52:1} string
        f:novosort ${u:alignedsortedbam} ${u:sortLog:1} ${t:52:1} ${u:alignedbam} ${t:13} ${t:85} ${t:59:1} -100 "HARD" "RANK"
        turbine::container_reference ${u:vars} "JAVADIR" ${t:60:1} string
        turbine::container_reference ${u:vars} "PICARDDIR" ${t:62:1} string
        set v:t:44:1 "${v:AlignDir}${v:alias:sampleName}.picard.metrics"
        turbine::set_filename_val ${u:metricsfile} ${v:t:44:1}
        set v:t:46:1 "${v:AlignDir}${v:alias:sampleName}.noDedups.sorted.bam"
        turbine::set_filename_val ${u:alignedsortedbam} ${v:t:46:1}
        set v:t:48:1 "${v:AlignDir}${v:alias:sampleName}_PicardDedup.log"
        turbine::set_filename_val ${u:picardLog} ${v:t:48:1}
        set v:t:50:1 "${v:AlignDir}${v:alias:sampleName}_Sort.log"
        turbine::set_filename_val ${u:sortLog:1} ${v:t:50:1}
        turbine::rule [ list ${t:13} ${t:60:1} ${t:62:1} [ turbine::get_file_td ${u:alignedsortedbam} ] ] [ list picard-app-leaf1 ${t:13} ${t:60:1} ${t:62:1} ${v:t:44:1} ${v:t:46:1} ${v:t:48:1} ${v:t:91} ${u:alignedsortedbam} ${u:dedupsortedbam} ${u:metricsfile} ${u:picardLog} ]
        turbine::read_refcount_decr ${t:59:1} 1
        turbine::file_read_refcount_decr ${u:sortLog:1} 1
        turbine::read_refcount_decr ${t:52:1} 1
    } else {
        # Var: file u:novoLog RENAMED [file:novoLog] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:markDuplicates():121:46
        # Var: string t:68:1 RENAMED [string:__t:68] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:markDuplicates():124:37
        # Var: string[int] t:75:1 RENAMED [string[int]:__t:75] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:markDuplicates():125:38
        # Var: $string v:t:66:1 VALUE_OF [string:__t:66:1]
        lassign [ adlb::multicreate [ list string 1 1 57 ] [ list container integer string 1 1 58 ] ] t:68:1 t:75:1
        turbine::c::log "allocated t:68:1=<${t:68:1}> t:75:1=<${t:75:1}>"
        lassign [ turbine::make_file_tds [ adlb::multicreate [ list file 1 1 56 ] ] [ list 1 ] ] u:novoLog
        turbine::array_kv_build ${t:75:1} [ ::adlb::dict_create 0 "--markDuplicates" ] 1 integer string
        turbine::container_reference ${u:vars} "NOVOSORTDIR" ${t:68:1} string
        f:novosort ${u:dedupsortedbam} ${u:novoLog} ${t:68:1} ${u:alignedbam} ${t:13} ${t:85} ${t:75:1} -100 "HARD" "RANK"
        set v:t:66:1 "${v:AlignDir}${v:alias:sampleName}_NovosortDedup.log"
        turbine::set_filename_val ${u:novoLog} ${v:t:66:1}
        turbine::file_read_refcount_decr ${u:novoLog} 1
        turbine::read_refcount_decr ${t:75:1} 1
        turbine::read_refcount_decr ${t:68:1} 1
    }
    turbine::read_refcount_decr ${u:vars} 1
    turbine::file_read_refcount_decr ${u:alignedbam} 1
    turbine::read_refcount_decr ${t:13} 1
    turbine::read_refcount_decr ${t:85} 1
    turbine::file_read_refcount_decr ${u:dedupsortedbam} 1
}


proc picard-app-leaf1 { t:13 t:60:1 t:62:1 v:t:44:1 v:t:46:1 v:t:48:1 v:t:91 u:alignedsortedbam u:dedupsortedbam u:metricsfile u:picardLog } {
    # Var: $string v:javadir RENAMED [$string:__v:javadir] ./bioapps/align_dedup.swift:picard():45:250
    # Var: $string v:picarddir RENAMED [$string:__v:picarddir] ./bioapps/align_dedup.swift:picard():45:250
    # Var: $string v:tmpdir RENAMED [$string:__v:tmpdir] ./bioapps/align_dedup.swift:picard():45:250
    # Var: $file v:inputFile:2 RENAMED [$file:__v:inputFile] ./bioapps/align_dedup.swift:picard():45:250
    # Var: $file v:outputfile RENAMED [$file:__v:outputfile] ./bioapps/align_dedup.swift:picard():45:250
    # Var: $file v:outLog:1 RENAMED [$file:__v:outLog] ./bioapps/align_dedup.swift:picard():45:250
    # Var: $file v:metricsfile RENAMED [$file:__v:metricsfile] ./bioapps/align_dedup.swift:picard():45:250
    set v:javadir [ turbine::retrieve_string ${t:60:1} CACHED 1 ]
    set v:picarddir [ turbine::retrieve_string ${t:62:1} CACHED 1 ]
    set v:tmpdir [ turbine::retrieve_string ${t:13} CACHED 1 ]
    set v:inputFile:2 [ turbine::retrieve_file ${u:alignedsortedbam} CACHED 1 ]
    set tcltmp:init_rc 2
    set v:outputfile [ turbine::create_local_file_ref ${v:t:91} ${tcltmp:init_rc} 1 ]
    set tcltmp:init_rc 2
    set v:outLog:1 [ turbine::create_local_file_ref ${v:t:48:1} ${tcltmp:init_rc} 1 ]
    set tcltmp:init_rc 2
    set v:metricsfile [ turbine::create_local_file_ref ${v:t:44:1} ${tcltmp:init_rc} 1 ]
    turbine::c::log [ list exec: __v:javadir "-Xmx8g" "-jar" ${v:picarddir} "MarkDuplicates" "INPUT=" ${v:t:46:1} "OUTPUT=" ${v:t:91} "METRICS_FILE=" ${v:t:44:1} "TMP_DIR=" ${v:tmpdir} "ASSUME_SORTED=true" "MAX_RECORDS_IN_RAM=null" "CREATE_INDEX=true" "VALIDATION_STRINGENCY=SILENT" [ dict create "stderr" ${v:t:48:1} ] ]
    turbine::exec_external ${v:javadir} [ dict create "stderr" ${v:t:48:1} ] "-Xmx8g" "-jar" ${v:picarddir} "MarkDuplicates" "INPUT=" ${v:t:46:1} "OUTPUT=" ${v:t:91} "METRICS_FILE=" ${v:t:44:1} "TMP_DIR=" ${v:tmpdir} "ASSUME_SORTED=true" "MAX_RECORDS_IN_RAM=null" "CREATE_INDEX=true" "VALIDATION_STRINGENCY=SILENT"
    turbine::store_file ${u:dedupsortedbam} v:outputfile 0
    turbine::store_file ${u:picardLog} v:outLog:1 0
    turbine::store_file ${u:metricsfile} v:metricsfile 0
    turbine::decr_local_file_refcount v:outputfile
    turbine::decr_local_file_refcount v:outLog:1
    turbine::decr_local_file_refcount v:metricsfile
}


proc __entry-if2 { t:23 t:31 t:78 t:83 t:93 v:AlignDir v:alias:sampleName v:t:91 u:alignedsam u:dedupsortedbam u:failLog u:outList u:vars } {
    # Var: $boolean v:__t:93 VALUE_OF [boolean:__t:93] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:__entry():249:22
    set v:__t:93 [ turbine::retrieve_integer ${t:93} CACHED 1 ]
    if { ${v:__t:93} } {
        # Var: file u:flagstats /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:__entry():259:72
        # Var: string[int] u:stat /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:__entry():263:3
        # Var: string[int] t:100 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:__entry():264:16
        # Var: string[int] t:103 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:__entry():265:15
        # Var: string[int] t:106 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:__entry():266:14
        # Var: float u:perc_mapped /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:__entry():269:14
        # Var: float t:113 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:__entry():269:41
        # Var: string u:cutoff_info /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:__entry():272:3
        # Var: string t:119 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:__entry():273:33
        # Var: string t:123 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:__entry():275:29
        # Var: float t:127 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:__entry():278:19
        # Var: boolean t:130 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:__entry():279:20
        # Var: float t:131 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/AlignAndDedup.swift:__entry():279:22
        # Var: $string v:t:95 VALUE_OF [string:__t:95]
        lassign [ adlb::multicreate [ list container integer string 3 1 60 ] [ list container integer string 1 1 61 ] [ list container integer string 1 1 62 ] [ list container integer string 1 1 63 ] [ list float 1 1 64 ] [ list float 1 1 65 ] [ list string 2 1 66 ] [ list string 2 1 67 ] [ list string 2 1 68 ] [ list float 1 1 69 ] [ list integer 1 1 70 ] [ list float 1 1 71 ] ] u:stat t:100 t:103 t:106 u:perc_mapped t:113 u:cutoff_info t:119 t:123 t:127 t:130 t:131
        turbine::c::log "allocated u:stat=<${u:stat}> t:100=<${t:100}> t:103=<${t:103}> t:106=<${t:106}> u:perc_mapped=<${u:perc_mapped}>"
        turbine::c::log "allocated t:113=<${t:113}> u:cutoff_info=<${u:cutoff_info}> t:119=<${t:119}> t:123=<${t:123}> t:127=<${t:127}>"
        turbine::c::log "allocated t:130=<${t:130}> t:131=<${t:131}>"
        lassign [ turbine::make_file_tds [ adlb::multicreate [ list file 1 1 59 ] ] [ list 1 ] ] u:flagstats
        turbine::file_read_refcount_incr ${u:dedupsortedbam} 1
        turbine::file_read_refcount_incr ${u:outList} 1
        turbine::file_read_refcount_incr ${u:alignedsam} 1
        turbine::read_refcount_incr ${u:vars} 2
        turbine::read_refcount_incr ${t:83} 1
        turbine::read_refcount_incr ${t:78} 1
        turbine::read_refcount_incr ${t:31} 1
        set a:t:101 [ adlb::subscript_container ${u:stat} 4 ]
        set a:tot_mapped [ adlb::subscript_container ${t:100} 0 ]
        set a:t:104 [ adlb::subscript_container ${u:stat} 0 ]
        set a:tot_reads [ adlb::subscript_container ${t:103} 0 ]
        set a:t:107 [ adlb::subscript_container ${u:stat} 3 ]
        set a:tot_dups [ adlb::subscript_container ${t:106} 0 ]
        turbine::container_reference ${u:vars} "DUP_CUTOFF" ${t:119} string
        turbine::container_reference ${u:vars} "MAP_CUTOFF" ${t:123} string
        set v:t:95 "${v:AlignDir}${v:alias:sampleName}.wDedups.sorted.bam.flagstats"
        turbine::set_filename_val ${u:flagstats} ${v:t:95}
        turbine::rule [ list ${t:78} [ turbine::get_file_td ${u:alignedsam} ] ] "rm-app-leaf1-1 ${t:78} {${u:alignedsam}}"
        turbine::rule [ list ${a:t:101} ] "__entry-call_foreign-split {${a:t:101}} ${t:100}"
        turbine::rule [ list ${a:t:104} ] "__entry-call_foreign-split-1 {${a:t:104}} ${t:103}"
        turbine::rule [ list ${a:t:107} ] "__entry-call_foreign-split-2 {${a:t:107}} ${t:106}"
        turbine::rule [ list ${a:tot_reads} ] [ list __entry-async_op-parse_float ${a:tot_dups} ${a:tot_reads} ${t:113} ${t:119} ${t:123} ${t:127} ${t:130} ${t:131} ${t:23} ${t:31} ${v:alias:sampleName} ${v:t:91} ${u:cutoff_info} ${u:failLog} ${u:outList} ${u:perc_mapped} ]
        turbine::rule [ list ${a:tot_mapped} ] "__entry-async_op-parse_float-2 {${a:tot_mapped}} ${t:113}"
        turbine::rule [ list ${t:119} ] "__entry-async_op-parse_float-3 ${t:119} ${t:127}"
        turbine::rule [ list ${t:123} ] "__entry-async_op-parse_float-4 ${t:123} ${t:131}"
        turbine::rule [ list ${t:83} ] [ list samtools_flagstat-app-leaf1 ${t:83} ${v:t:91} ${v:t:95} ${u:dedupsortedbam} ${u:flagstats} ${u:stat} ]
    } else {
        # Var: file u:newFile:2 RENAMED [file:newFile] ./generalfunctions/general.swift:append():11:17
        # Var: $string v:mssg VALUE_OF [string:mssg]
        lassign [ turbine::make_file_tds [ adlb::multicreate [ list file 1 1 74 ] ] [ list 1 ] ] u:newFile:2
        set wfilename:newFile:2 [ turbine::get_file_path ${u:newFile:2} ]
        set v:mssg "FAILURE: ${v:t:91} contains no alignments. Check the log files within ${v:AlignDir}${v:alias:sampleName} for details.\n"
        turbine::rule [ list [ turbine::get_file_td ${u:failLog} ] ] [ list __entry-call_foreign-read-2 ${v:mssg} ${wfilename:newFile:2} ${u:failLog} ${u:newFile:2} ]
        turbine::rule [ list ${t:23} ] "__entry-copy_in_filename-2 ${t:23} {${u:newFile:2}}"
    }
    turbine::read_refcount_decr ${u:vars} 1
    turbine::read_refcount_decr ${t:31} 1
    turbine::file_read_refcount_decr ${u:failLog} 1
    turbine::read_refcount_decr ${t:23} 1
    turbine::file_read_refcount_decr ${u:alignedsam} 1
    turbine::file_read_refcount_decr ${u:outList} 1
    turbine::file_read_refcount_decr ${u:dedupsortedbam} 1
    turbine::read_refcount_decr ${t:78} 1
    turbine::read_refcount_decr ${t:83} 1
}


proc rm-app-leaf1-1 { t:78 u:alignedsam } {
    # Var: $string v:__filename:f RENAMED [$string:__v:__filename:f] ./generalfunctions/general.swift:rm():32:6
    # Var: $file v:f:2 RENAMED [$file:__v:f] ./generalfunctions/general.swift:rm():32:6
    # Var: $void v:v RENAMED [$void:__v:v] ./generalfunctions/general.swift:rm():32:6
    set v:__filename:f [ turbine::retrieve_string ${t:78} CACHED 1 ]
    set v:f:2 [ turbine::retrieve_file ${u:alignedsam} CACHED 1 ]
    turbine::c::log [ list exec: "rm" ${v:__filename:f} [ dict create ] ]
    turbine::exec_external "rm" [ dict create ] ${v:__filename:f}
}


proc __entry-call_foreign-split { a:t:101 t:100 } {
    # Var: $string v:alias:t:101 VALUE_OF [string:__alias:t:101]
    # Var: $string$[int] v:t:100 VALUE_OF [string[int]:__t:100]
    set v:alias:t:101 [ turbine::retrieve_string ${a:t:101} CACHED 1 ]
    set v:t:100 [ turbine::split_impl ${v:alias:t:101} " " ]
    turbine::build_rec ${t:100} ${v:t:100} [ list container integer string ] 0 1
}


proc __entry-call_foreign-split-1 { a:t:104 t:103 } {
    # Var: $string v:alias:t:104 VALUE_OF [string:__alias:t:104]
    # Var: $string$[int] v:t:103 VALUE_OF [string[int]:__t:103]
    set v:alias:t:104 [ turbine::retrieve_string ${a:t:104} CACHED 1 ]
    set v:t:103 [ turbine::split_impl ${v:alias:t:104} " " ]
    turbine::build_rec ${t:103} ${v:t:103} [ list container integer string ] 0 1
}


proc __entry-call_foreign-split-2 { a:t:107 t:106 } {
    # Var: $string v:alias:t:107 VALUE_OF [string:__alias:t:107]
    # Var: $string$[int] v:t:106 VALUE_OF [string[int]:__t:106]
    set v:alias:t:107 [ turbine::retrieve_string ${a:t:107} CACHED 1 ]
    set v:t:106 [ turbine::split_impl ${v:alias:t:107} " " ]
    turbine::build_rec ${t:106} ${v:t:106} [ list container integer string ] 0 1
}


proc __entry-async_op-parse_float { a:tot_dups a:tot_reads t:113 t:119 t:123 t:127 t:130 t:131 t:23 t:31 v:alias:sampleName v:t:91 u:cutoff_info u:failLog u:outList u:perc_mapped } {
    # Var: $string v:alias:tot_reads VALUE_OF [string:__alias:tot_reads]
    # Var: $float v:t:112 VALUE_OF [float:__t:112]
    set v:alias:tot_reads [ turbine::retrieve_string ${a:tot_reads} CACHED 1 ]
    set v:t:112 [ turbine::string2float_impl ${v:alias:tot_reads} ]
    turbine::rule [ list ${t:113} ] "__entry-async_op-div_float ${t:113} ${t:130} ${t:131} ${v:t:112} ${u:perc_mapped}"
    turbine::rule [ list ${a:tot_dups} ] [ list __entry-async_op-parse_float-1 ${a:tot_dups} ${t:119} ${t:123} ${t:127} ${t:130} ${t:23} ${t:31} ${v:alias:sampleName} ${v:t:112} ${v:t:91} ${u:cutoff_info} ${u:failLog} ${u:outList} ${u:perc_mapped} ]
}


proc __entry-async_op-div_float { t:113 t:130 t:131 v:t:112 u:perc_mapped } {
    # Var: $float v:t:113:1 VALUE_OF [float:__t:113]
    # Var: $float v:perc_mapped VALUE_OF [float:perc_mapped]
    set v:t:113:1 [ turbine::retrieve_float ${t:113} CACHED 1 ]
    set v:perc_mapped [ expr { ${v:t:113:1} / ${v:t:112} } ]
    turbine::store_float ${u:perc_mapped} ${v:perc_mapped}
    turbine::rule [ list ${t:131} ] "__entry-async_op-gt_float ${t:130} ${t:131} ${v:perc_mapped}"
}


proc __entry-async_op-gt_float { t:130 t:131 v:perc_mapped } {
    # Var: $float v:t:131:1 VALUE_OF [float:__t:131]
    # Var: $boolean v:t:130 VALUE_OF [boolean:__t:130]
    set v:t:131:1 [ turbine::retrieve_float ${t:131} CACHED 1 ]
    set v:t:130 [ expr { ${v:perc_mapped} > ${v:t:131:1} } ]
    turbine::store_integer ${t:130} ${v:t:130}
}


proc __entry-async_op-parse_float-1 { a:tot_dups t:119 t:123 t:127 t:130 t:23 t:31 v:alias:sampleName v:t:112 v:t:91 u:cutoff_info u:failLog u:outList u:perc_mapped } {
    # Var: $string v:alias:tot_dups VALUE_OF [string:__alias:tot_dups]
    # Var: $float v:t:110 VALUE_OF [float:__t:110]
    # Var: $float v:t:109 VALUE_OF [float:__t:109]
    # Var: $float v:perc_dup VALUE_OF [float:perc_dup]
    set v:alias:tot_dups [ turbine::retrieve_string ${a:tot_dups} CACHED 1 ]
    set v:t:110 [ turbine::string2float_impl ${v:alias:tot_dups} ]
    set v:t:109 [ expr { ${v:t:110} * 100.0 } ]
    set v:perc_dup [ expr { ${v:t:109} / ${v:t:112} } ]
    turbine::rule [ list ${t:127} ${t:130} ] [ list __entry-async_op-lt_float ${t:127} ${t:130} ${t:23} ${t:31} ${v:perc_dup} ${v:t:91} ${u:cutoff_info} ${u:failLog} ${u:outList} ]
    turbine::rule [ list ${t:119} ${t:123} ${u:perc_mapped} ] [ list __entry-async_op-strcat-6 ${t:119} ${t:123} ${v:alias:sampleName} ${v:perc_dup} ${u:cutoff_info} ${u:perc_mapped} ]
}


proc __entry-async_op-lt_float { t:127 t:130 t:23 t:31 v:perc_dup v:t:91 u:cutoff_info u:failLog u:outList } {
    # Var: $float v:t:127:1 VALUE_OF [float:__t:127]
    # Var: $boolean v:t:126 VALUE_OF [boolean:__t:126]
    # Var: $boolean v:t:130:1 VALUE_OF [boolean:__t:130]
    # Var: $boolean v:t:125 VALUE_OF [boolean:__t:125]
    set v:t:127:1 [ turbine::retrieve_float ${t:127} CACHED 1 ]
    set v:t:126 [ expr { ${v:perc_dup} < ${v:t:127:1} } ]
    set v:t:130:1 [ turbine::retrieve_integer ${t:130} CACHED 1 ]
    set v:t:125 [ expr { ${v:t:126} && ${v:t:130:1} } ]
    if { ${v:t:125} } {
        # Var: file u:newFile RENAMED [file:newFile] ./generalfunctions/general.swift:append():11:17
        # Var: $string v:t:137 VALUE_OF [string:__t:137]
        lassign [ turbine::make_file_tds [ adlb::multicreate [ list file 1 1 72 ] ] [ list 1 ] ] u:newFile
        turbine::file_read_refcount_incr ${u:outList} 1
        turbine::read_refcount_incr ${t:31} 1
        set wfilename:newFile [ turbine::get_file_path ${u:newFile} ]
        set v:t:137 "${v:t:91}\n"
        turbine::rule [ list ${u:cutoff_info} ] "__entry-async_op-strcat-3 ${u:cutoff_info}"
        turbine::rule [ list [ turbine::get_file_td ${u:outList} ] ] [ list __entry-call_foreign-read ${v:t:137} ${wfilename:newFile} ${u:newFile} ${u:outList} ]
        turbine::rule [ list ${t:31} ] "__entry-copy_in_filename ${t:31} {${u:newFile}}"
    } else {
        # Var: file u:newFile:1 RENAMED [file:newFile] ./generalfunctions/general.swift:append():11:17
        lassign [ turbine::make_file_tds [ adlb::multicreate [ list file 1 1 73 ] ] [ list 1 ] ] u:newFile:1
        turbine::read_refcount_incr ${t:23} 1
        turbine::file_read_refcount_incr ${u:failLog} 1
        set wfilename:newFile:1 [ turbine::get_file_path ${u:newFile:1} ]
        turbine::rule [ list [ turbine::get_file_td ${u:failLog} ] ] [ list __entry-call_foreign-read-1 ${v:t:91} ${wfilename:newFile:1} ${u:cutoff_info} ${u:failLog} ${u:newFile:1} ]
        turbine::rule [ list ${t:23} ] "__entry-copy_in_filename-1 ${t:23} {${u:newFile:1}}"
    }
    turbine::read_refcount_decr ${t:31} 1
    turbine::file_read_refcount_decr ${u:failLog} 1
    turbine::read_refcount_decr ${t:23} 1
    turbine::read_refcount_decr ${u:cutoff_info} 1
    turbine::file_read_refcount_decr ${u:outList} 1
}


proc __entry-async_op-strcat-3 { u:cutoff_info } {
    # Var: $string v:cutoff_info:1 VALUE_OF [string:cutoff_info]
    # Var: $string v:t:135 VALUE_OF [string:__t:135]
    # Var: $void v:t:134 VALUE_OF [void:__t:134]
    set v:cutoff_info:1 [ turbine::retrieve_string ${u:cutoff_info} CACHED 1 ]
    set v:t:135 "QC-Test SUCCESS: ${v:cutoff_info:1}"
    set v:t:134 [ turbine::printf_local ${v:t:135} ]
}


proc __entry-call_foreign-read { v:t:137 wfilename:newFile u:newFile u:outList } {
    # Var: $file v:outList:1 VALUE_OF [file:outList]
    # Var: $string v:original VALUE_OF [string:original]
    set v:outList:1 [ turbine::retrieve_file ${u:outList} CACHED 1 ]
    set v:original [ turbine::file_read_local ${v:outList:1} ]
    turbine::rule [ list ${wfilename:newFile} ] [ list __entry-async_op-strcat-4 ${v:original} ${v:t:137} ${wfilename:newFile} ${u:newFile} ]
}


proc __entry-async_op-strcat-4 { v:original v:t:137 wfilename:newFile u:newFile } {
    # Var: $string v:appended VALUE_OF [string:appended]
    # Var: $file v:newFile VALUE_OF [file:newFile]
    # Var: $string v:__wfilename:newFile VALUE_OF [string:__wfilename:newFile]
    set v:appended "${v:original}${v:t:137}"
    set v:__wfilename:newFile [ turbine::retrieve_string ${wfilename:newFile} CACHED 1 ]
    set tcltmp:init_rc 2
    set v:newFile [ turbine::create_local_file_ref ${v:__wfilename:newFile} ${tcltmp:init_rc} 1 ]
    turbine::file_write_local v:newFile ${v:appended}
    turbine::store_file ${u:newFile} v:newFile 0
}


proc __entry-copy_in_filename { t:31 u:newFile } {
    # Var: $string v:t:31:2 VALUE_OF [string:__t:31]
    set v:t:31:2 [ turbine::retrieve_string ${t:31} CACHED 1 ]
    turbine::set_filename_val ${u:newFile} ${v:t:31:2}
}


proc __entry-call_foreign-read-1 { v:t:91 wfilename:newFile:1 u:cutoff_info u:failLog u:newFile:1 } {
    # Var: $file v:failLog:1 VALUE_OF [file:failLog]
    # Var: $string v:original:1:1 VALUE_OF [string:original:1]
    set v:failLog:1 [ turbine::retrieve_file ${u:failLog} CACHED 1 ]
    set v:original:1:1 [ turbine::file_read_local ${v:failLog:1} ]
    turbine::rule [ list ${wfilename:newFile:1} ${u:cutoff_info} ] [ list __entry-async_op-strcat-5 ${v:original:1:1} ${v:t:91} ${wfilename:newFile:1} ${u:cutoff_info} ${u:newFile:1} ]
}


proc __entry-async_op-strcat-5 { v:original:1:1 v:t:91 wfilename:newFile:1 u:cutoff_info u:newFile:1 } {
    # Var: $string v:cutoff_info:2 VALUE_OF [string:cutoff_info]
    # Var: $string v:m VALUE_OF [string:m]
    # Var: $string v:appended:1:1 VALUE_OF [string:appended:1]
    # Var: $file v:newFile:1 VALUE_OF [file:newFile:1]
    # Var: $string v:__wfilename:newFile:1 VALUE_OF [string:__wfilename:newFile:1]
    set v:cutoff_info:2 [ turbine::retrieve_string ${u:cutoff_info} CACHED 1 ]
    set v:m "FAILURE: ${v:t:91} failed the QC test: ${v:cutoff_info:2}"
    set v:appended:1:1 "${v:original:1:1}${v:m}"
    set v:__wfilename:newFile:1 [ turbine::retrieve_string ${wfilename:newFile:1} CACHED 1 ]
    set tcltmp:init_rc 2
    set v:newFile:1 [ turbine::create_local_file_ref ${v:__wfilename:newFile:1} ${tcltmp:init_rc} 1 ]
    turbine::file_write_local v:newFile:1 ${v:appended:1:1}
    turbine::store_file ${u:newFile:1} v:newFile:1 0
}


proc __entry-copy_in_filename-1 { t:23 u:newFile:1 } {
    # Var: $string v:t:23:2 VALUE_OF [string:__t:23]
    set v:t:23:2 [ turbine::retrieve_string ${t:23} CACHED 1 ]
    turbine::set_filename_val ${u:newFile:1} ${v:t:23:2}
}


proc __entry-async_op-strcat-6 { t:119 t:123 v:alias:sampleName v:perc_dup u:cutoff_info u:perc_mapped } {
    # Var: $string v:t:119 VALUE_OF [string:__t:119]
    # Var: $float v:perc_mapped:1 VALUE_OF [float:perc_mapped]
    # Var: $string v:t:123 VALUE_OF [string:__t:123]
    # Var: $string v:cutoff_info VALUE_OF [string:cutoff_info]
    set v:t:119 [ turbine::retrieve_string ${t:119} CACHED 1 ]
    set v:perc_mapped:1 [ turbine::retrieve_float ${u:perc_mapped} CACHED 1 ]
    set v:t:123 [ turbine::retrieve_string ${t:123} CACHED 1 ]
    set v:cutoff_info "${v:alias:sampleName}\tPercentDuplication=${v:perc_dup};DuplicationCutoff=${v:t:119}\tPercentMapped=${v:perc_mapped:1};MappingCutoff=${v:t:123}"
    turbine::store_string ${u:cutoff_info} ${v:cutoff_info}
}


proc __entry-async_op-parse_float-2 { a:tot_mapped t:113 } {
    # Var: $string v:alias:tot_mapped VALUE_OF [string:__alias:tot_mapped]
    # Var: $float v:t:114 VALUE_OF [float:__t:114]
    # Var: $float v:t:113 VALUE_OF [float:__t:113]
    set v:alias:tot_mapped [ turbine::retrieve_string ${a:tot_mapped} CACHED 1 ]
    set v:t:114 [ turbine::string2float_impl ${v:alias:tot_mapped} ]
    set v:t:113 [ expr { ${v:t:114} * 100.0 } ]
    turbine::store_float ${t:113} ${v:t:113}
}


proc __entry-async_op-parse_float-3 { t:119 t:127 } {
    # Var: $string v:t:119:1 VALUE_OF [string:__t:119]
    # Var: $float v:t:127 VALUE_OF [float:__t:127]
    set v:t:119:1 [ turbine::retrieve_string ${t:119} CACHED 1 ]
    set v:t:127 [ turbine::string2float_impl ${v:t:119:1} ]
    turbine::store_float ${t:127} ${v:t:127}
}


proc __entry-async_op-parse_float-4 { t:123 t:131 } {
    # Var: $string v:t:123:1 VALUE_OF [string:__t:123]
    # Var: $float v:t:131 VALUE_OF [float:__t:131]
    set v:t:123:1 [ turbine::retrieve_string ${t:123} CACHED 1 ]
    set v:t:131 [ turbine::string2float_impl ${v:t:123:1} ]
    turbine::store_float ${t:131} ${v:t:131}
}


proc samtools_flagstat-app-leaf1 { t:83 v:t:91 v:t:95 u:dedupsortedbam u:flagstats u:stat } {
    # Var: $string v:samtoolsdir RENAMED [$string:__v:samtoolsdir] ./bioapps/align_dedup.swift:samtools_flagstat():51:42
    # Var: $file v:inputFile RENAMED [$file:__v:inputFile] ./bioapps/align_dedup.swift:samtools_flagstat():51:42
    # Var: $file v:output RENAMED [$file:__v:output] ./bioapps/align_dedup.swift:samtools_flagstat():51:42
    # Var: $file v:flagstats VALUE_OF [file:flagstats]
    # Var: $string$[int] v:stat VALUE_OF [string[int]:stat]
    set v:samtoolsdir [ turbine::retrieve_string ${t:83} CACHED 1 ]
    set v:inputFile [ turbine::retrieve_file ${u:dedupsortedbam} CACHED 1 ]
    set tcltmp:init_rc 2
    set v:output [ turbine::create_local_file_ref ${v:t:95} ${tcltmp:init_rc} 1 ]
    turbine::c::log [ list exec: __v:samtoolsdir "flagstat" ${v:t:91} [ dict create "stdout" ${v:t:95} ] ]
    turbine::exec_external ${v:samtoolsdir} [ dict create "stdout" ${v:t:95} ] "flagstat" ${v:t:91}
    turbine::store_file ${u:flagstats} v:output 0
    set v:flagstats [ turbine::retrieve_file ${u:flagstats} CACHED 1 ]
    set v:stat [ turbine::file_lines_impl ${v:flagstats} ]
    turbine::build_rec ${u:stat} ${v:stat} [ list container integer string ] 0 1
    turbine::decr_local_file_refcount v:output
}


proc __entry-call_foreign-read-2 { v:mssg wfilename:newFile:2 u:failLog u:newFile:2 } {
    # Var: $file v:failLog:2 VALUE_OF [file:failLog]
    # Var: $string v:original:2 VALUE_OF [string:original:2]
    set v:failLog:2 [ turbine::retrieve_file ${u:failLog} CACHED 1 ]
    set v:original:2 [ turbine::file_read_local ${v:failLog:2} ]
    turbine::rule [ list ${wfilename:newFile:2} ] [ list __entry-async_op-strcat-7 ${v:mssg} ${v:original:2} ${wfilename:newFile:2} ${u:newFile:2} ]
}


proc __entry-async_op-strcat-7 { v:mssg v:original:2 wfilename:newFile:2 u:newFile:2 } {
    # Var: $string v:appended:2 VALUE_OF [string:appended:2]
    # Var: $file v:newFile:2 VALUE_OF [file:newFile:2]
    # Var: $string v:__wfilename:newFile:2 VALUE_OF [string:__wfilename:newFile:2]
    set v:appended:2 "${v:original:2}${v:mssg}"
    set v:__wfilename:newFile:2 [ turbine::retrieve_string ${wfilename:newFile:2} CACHED 1 ]
    set tcltmp:init_rc 2
    set v:newFile:2 [ turbine::create_local_file_ref ${v:__wfilename:newFile:2} ${tcltmp:init_rc} 1 ]
    turbine::file_write_local v:newFile:2 ${v:appended:2}
    turbine::store_file ${u:newFile:2} v:newFile:2 0
}


proc __entry-copy_in_filename-2 { t:23 u:newFile:2 } {
    # Var: $string v:t:23:3 VALUE_OF [string:__t:23]
    set v:t:23:3 [ turbine::retrieve_string ${t:23} CACHED 1 ]
    turbine::set_filename_val ${u:newFile:2} ${v:t:23:3}
}


proc __entry-call_foreign-read-3 { v:message wfilename:newFile:3 u:failLog u:newFile:3 } {
    # Var: $file v:failLog:3 VALUE_OF [file:failLog]
    # Var: $string v:original:3 VALUE_OF [string:original:3]
    set v:failLog:3 [ turbine::retrieve_file ${u:failLog} CACHED 1 ]
    set v:original:3 [ turbine::file_read_local ${v:failLog:3} ]
    turbine::rule [ list ${wfilename:newFile:3} ] [ list __entry-async_op-strcat-8 ${v:message} ${v:original:3} ${wfilename:newFile:3} ${u:newFile:3} ]
}


proc __entry-async_op-strcat-8 { v:message v:original:3 wfilename:newFile:3 u:newFile:3 } {
    # Var: $string v:appended:3 VALUE_OF [string:appended:3]
    # Var: $file v:newFile:3 VALUE_OF [file:newFile:3]
    # Var: $string v:__wfilename:newFile:3 VALUE_OF [string:__wfilename:newFile:3]
    set v:appended:3 "${v:original:3}${v:message}"
    set v:__wfilename:newFile:3 [ turbine::retrieve_string ${wfilename:newFile:3} CACHED 1 ]
    set tcltmp:init_rc 2
    set v:newFile:3 [ turbine::create_local_file_ref ${v:__wfilename:newFile:3} ${tcltmp:init_rc} 1 ]
    turbine::file_write_local v:newFile:3 ${v:appended:3}
    turbine::store_file ${u:newFile:3} v:newFile:3 0
}


proc __entry-copy_in_filename-3 { t:23 u:newFile:3 } {
    # Var: $string v:t:23:4 VALUE_OF [string:__t:23]
    set v:t:23:4 [ turbine::retrieve_string ${t:23} CACHED 1 ]
    turbine::set_filename_val ${u:newFile:3} ${v:t:23:4}
}


proc f:samtools_view { u:output u:samtoolsdir u:inputFile u:thr u:args v:loc_rank v:loc_strictness v:loc_accuracy } {
    turbine::c::log "function: samtools_view"
    # Var: $boolean v:mapped_output OPT_TEMPORARY
    turbine::file_read_refcount_incr ${u:output} 1
    turbine::file_read_refcount_incr ${u:inputFile} 2
    turbine::read_refcount_incr ${u:thr} 1
    turbine::read_refcount_incr ${u:args} 1
    turbine::read_refcount_incr ${u:samtoolsdir} 1
    set filename:inputFile [ turbine::get_file_path ${u:inputFile} ]
    set v:mapped_output [ turbine::is_file_mapped ${u:output} ]
    set filename:output [ turbine::get_file_path ${u:output} ]
    if { ${v:mapped_output} } {
    } else {
        # Var: $string optf:output FILENAME_OF [file:output]
        set optf:output [ turbine::mktemp ]
        turbine::set_filename_val ${u:output} ${optf:output}
    }
    turbine::rule [ list ${filename:inputFile} ${filename:output} ${u:args} [ turbine::get_file_td ${u:inputFile} ] ${u:samtoolsdir} ${u:thr} ] "samtools_view-app-leaf1 {${filename:inputFile}} {${filename:output}} ${v:mapped_output} {${u:args}} {${u:inputFile}} {${u:output}} {${u:samtoolsdir}} {${u:thr}}" target ${v:loc_rank} strictness ${v:loc_strictness} accuracy ${v:loc_accuracy}
}


proc samtools_view-app-leaf1 { filename:inputFile filename:output v:mapped_output u:args u:inputFile u:output u:samtoolsdir u:thr } {
    # Var: $string v:samtoolsdir VALUE_OF [string:samtoolsdir] ./bioapps/align_dedup.swift:samtools_view():15:58
    # Var: $int v:thr VALUE_OF [int:thr] ./bioapps/align_dedup.swift:samtools_view():15:58
    # Var: $string v:__filename:inputFile VALUE_OF [string:__filename:inputFile] ./bioapps/align_dedup.swift:samtools_view():15:58
    # Var: $string$[int] v:args VALUE_OF [string[int]:args] ./bioapps/align_dedup.swift:samtools_view():15:58
    # Var: $string v:__filename:output VALUE_OF [string:__filename:output] ./bioapps/align_dedup.swift:samtools_view():15:58
    # Var: $file v:inputFile VALUE_OF [file:inputFile] ./bioapps/align_dedup.swift:samtools_view():15:58
    # Var: $file v:output VALUE_OF [file:output] ./bioapps/align_dedup.swift:samtools_view():15:58
    # Var: $boolean v:3 EXPR_TEMPORARY ./bioapps/align_dedup.swift:samtools_view():15:58
    set v:samtoolsdir [ turbine::retrieve_string ${u:samtoolsdir} CACHED 1 ]
    set v:thr [ turbine::retrieve_integer ${u:thr} CACHED 1 ]
    set v:__filename:inputFile [ turbine::retrieve_string ${filename:inputFile} ]
    set v:args [ turbine::unpack_args ${u:args} 1 string ]
    set v:__filename:output [ turbine::retrieve_string ${filename:output} CACHED 1 ]
    set v:inputFile [ turbine::retrieve_file ${u:inputFile} CACHED 2 ]
    if { ${v:mapped_output} } {
        set tcltmp:init_rc 2
    } else {
        set tcltmp:init_rc 1
    }
    set v:output [ turbine::create_local_file_ref ${v:__filename:output} ${tcltmp:init_rc} ${v:mapped_output} ]
    turbine::c::log [ list exec: __v:samtoolsdir "view" "-@" ${v:thr} "-bS" ${v:__filename:inputFile} {*}${v:args} [ dict create "stdout" ${v:__filename:output} ] ]
    turbine::exec_external ${v:samtoolsdir} [ dict create "stdout" ${v:__filename:output} ] "view" "-@" ${v:thr} "-bS" ${v:__filename:inputFile} {*}${v:args}
    set v:3 [ expr { ! ${v:mapped_output} } ]
    turbine::store_file ${u:output} v:output ${v:3}
    turbine::decr_local_file_refcount v:output
    turbine::read_refcount_decr ${u:args} 1
}


proc f:novosort { u:output u:outLog u:novosortdir u:inputFile u:tmpdir u:thr u:sortoptions v:loc_rank v:loc_strictness v:loc_accuracy } {
    turbine::c::log "function: novosort"
    # Var: $boolean v:mapped_output OPT_TEMPORARY
    # Var: $boolean v:mapped_outLog OPT_TEMPORARY
    turbine::file_read_refcount_incr ${u:output} 1
    turbine::read_refcount_incr ${u:sortoptions} 1
    turbine::file_read_refcount_incr ${u:inputFile} 2
    turbine::read_refcount_incr ${u:tmpdir} 1
    turbine::read_refcount_incr ${u:novosortdir} 1
    turbine::read_refcount_incr ${u:thr} 1
    turbine::file_read_refcount_incr ${u:outLog} 1
    set filename:inputFile [ turbine::get_file_path ${u:inputFile} ]
    set v:mapped_output [ turbine::is_file_mapped ${u:output} ]
    set filename:output [ turbine::get_file_path ${u:output} ]
    if { ${v:mapped_output} } {
    } else {
        # Var: $string optf:output FILENAME_OF [file:output]
        set optf:output [ turbine::mktemp ]
        turbine::set_filename_val ${u:output} ${optf:output}
    }
    set v:mapped_outLog [ turbine::is_file_mapped ${u:outLog} ]
    set filename:outLog [ turbine::get_file_path ${u:outLog} ]
    if { ${v:mapped_outLog} } {
    } else {
        # Var: $string optf:outLog FILENAME_OF [file:outLog]
        set optf:outLog [ turbine::mktemp ]
        turbine::set_filename_val ${u:outLog} ${optf:outLog}
    }
    turbine::rule [ list ${filename:inputFile} ${filename:outLog} ${filename:output} [ turbine::get_file_td ${u:inputFile} ] ${u:novosortdir} ${u:sortoptions} ${u:thr} ${u:tmpdir} ] "novosort-app-leaf1 {${filename:inputFile}} {${filename:outLog}} {${filename:output}} ${v:mapped_outLog} ${v:mapped_output} {${u:inputFile}} {${u:novosortdir}} {${u:outLog}} {${u:output}} {${u:sortoptions}} {${u:thr}} {${u:tmpdir}}" target ${v:loc_rank} strictness ${v:loc_strictness} accuracy ${v:loc_accuracy}
}


proc novosort-app-leaf1 { filename:inputFile filename:outLog filename:output v:mapped_outLog v:mapped_output u:inputFile u:novosortdir u:outLog u:output u:sortoptions u:thr u:tmpdir } {
    # Var: $string v:novosortdir VALUE_OF [string:novosortdir] ./bioapps/align_dedup.swift:novosort():33:99
    # Var: $string v:tmpdir VALUE_OF [string:tmpdir] ./bioapps/align_dedup.swift:novosort():33:99
    # Var: $int v:thr VALUE_OF [int:thr] ./bioapps/align_dedup.swift:novosort():33:99
    # Var: $string v:__filename:inputFile VALUE_OF [string:__filename:inputFile] ./bioapps/align_dedup.swift:novosort():33:99
    # Var: $string v:__filename:output VALUE_OF [string:__filename:output] ./bioapps/align_dedup.swift:novosort():33:99
    # Var: $string$[int] v:sortoptions VALUE_OF [string[int]:sortoptions] ./bioapps/align_dedup.swift:novosort():33:99
    # Var: $string v:__filename:outLog VALUE_OF [string:__filename:outLog] ./bioapps/align_dedup.swift:novosort():33:99
    # Var: $file v:inputFile VALUE_OF [file:inputFile] ./bioapps/align_dedup.swift:novosort():33:99
    # Var: $file v:output VALUE_OF [file:output] ./bioapps/align_dedup.swift:novosort():33:99
    # Var: $file v:outLog VALUE_OF [file:outLog] ./bioapps/align_dedup.swift:novosort():33:99
    # Var: $boolean v:4 EXPR_TEMPORARY ./bioapps/align_dedup.swift:novosort():33:99
    # Var: $boolean v:6 EXPR_TEMPORARY ./bioapps/align_dedup.swift:novosort():33:99
    set v:novosortdir [ turbine::retrieve_string ${u:novosortdir} CACHED 1 ]
    set v:tmpdir [ turbine::retrieve_string ${u:tmpdir} CACHED 1 ]
    set v:thr [ turbine::retrieve_integer ${u:thr} CACHED 1 ]
    set v:__filename:inputFile [ turbine::retrieve_string ${filename:inputFile} ]
    set v:__filename:output [ turbine::retrieve_string ${filename:output} CACHED 1 ]
    set v:sortoptions [ turbine::unpack_args ${u:sortoptions} 1 string ]
    set v:__filename:outLog [ turbine::retrieve_string ${filename:outLog} CACHED 1 ]
    set v:inputFile [ turbine::retrieve_file ${u:inputFile} CACHED 2 ]
    if { ${v:mapped_output} } {
        set tcltmp:init_rc 2
    } else {
        set tcltmp:init_rc 1
    }
    set v:output [ turbine::create_local_file_ref ${v:__filename:output} ${tcltmp:init_rc} ${v:mapped_output} ]
    if { ${v:mapped_outLog} } {
        set tcltmp:init_rc 2
    } else {
        set tcltmp:init_rc 1
    }
    set v:outLog [ turbine::create_local_file_ref ${v:__filename:outLog} ${tcltmp:init_rc} ${v:mapped_outLog} ]
    turbine::c::log [ list exec: __v:novosortdir "--index" "--tmpdir" ${v:tmpdir} "--threads" ${v:thr} ${v:__filename:inputFile} "-o" ${v:__filename:output} {*}${v:sortoptions} [ dict create "stderr" ${v:__filename:outLog} ] ]
    turbine::exec_external ${v:novosortdir} [ dict create "stderr" ${v:__filename:outLog} ] "--index" "--tmpdir" ${v:tmpdir} "--threads" ${v:thr} ${v:__filename:inputFile} "-o" ${v:__filename:output} {*}${v:sortoptions}
    set v:4 [ expr { ! ${v:mapped_output} } ]
    turbine::store_file ${u:output} v:output ${v:4}
    set v:6 [ expr { ! ${v:mapped_outLog} } ]
    turbine::store_file ${u:outLog} v:outLog ${v:6}
    turbine::decr_local_file_refcount v:output
    turbine::decr_local_file_refcount v:outLog
    turbine::read_refcount_decr ${u:sortoptions} 1
}


proc f:checkBam { u:success u:variables u:bamFile } {
    turbine::c::log "function: checkBam"
    # Var: string t:1 EXPR_TEMPORARY ./generalfunctions/general.swift:checkBam():46:32
    # Var: $string v:of:bamFile VALUE_OF [string:__of:bamFile]
    lassign [ adlb::multicreate [ list string 1 1 76 ] ] t:1
    turbine::c::log "allocated t:1=<${t:1}>"
    turbine::container_reference ${u:variables} "SAMTOOLSDIR" ${t:1} string
    set v:of:bamFile [ turbine::get_filename_val ${u:bamFile} ]
    turbine::rule [ list ${t:1} ] [ list samtools_view2-argwait ${t:1} ${v:of:bamFile} ${u:success} ]
    turbine::file_read_refcount_decr ${u:bamFile} 1
}


proc samtools_view2-argwait { t:1 v:of:bamFile u:success } {
    # Var: $string v:samtoolsdir RENAMED [$string:__v:samtoolsdir]
    # Var: $int v:numAlignments RENAMED [$int:__v:numAlignments]
    # Var: $boolean v:success VALUE_OF [boolean:success]
    set v:samtoolsdir [ turbine::retrieve_string ${t:1} CACHED 1 ]
    set v:numAlignments [ alignment::samtools_view ${v:samtoolsdir} ${v:of:bamFile} ]
    set v:success [ expr { ${v:numAlignments} > 0 } ]
    turbine::store_integer ${u:success} ${v:success}
}

turbine::defaults
turbine::declare_custom_work_types COASTER
turbine::init $servers "Swift"
turbine::enable_read_refcount
adlb::declare_struct_type 16 s:location [ list "rank" integer "strictness" string "accuracy" string ]
turbine::check_constants "WORKER\[WORKER\]" ${turbine::WORK_TASK} 0 "CONTROL" ${turbine::WORK_TASK} 0 "ADLB_RANK_ANY" ${adlb::RANK_ANY} -100
adlb::add_debug_symbol 1 "__t:7" "AlignAndDedup:153:33"
adlb::add_debug_symbol 2 "__t:10" "AlignAndDedup:160:6"
adlb::add_debug_symbol 3 "__t:13" "AlignAndDedup:161:6"
adlb::add_debug_symbol 4 "__t:20" "AlignAndDedup:162:37"
adlb::add_debug_symbol 5 "__t:23" "AlignAndDedup:169:15"
adlb::add_debug_symbol 6 "__t:31" "AlignAndDedup:176:15"
adlb::add_debug_symbol 7 "sampleInfoFile" "AlignAndDedup:153:0"
adlb::add_debug_symbol 8 "failLog" "AlignAndDedup:169:70"
adlb::add_debug_symbol 9 "docSampleInfo" "AlignAndDedup:187:32"
adlb::add_debug_symbol 10 "docRunfile" "AlignAndDedup:183:99"
adlb::add_debug_symbol 11 "vars" "AlignAndDedup:146:0"
adlb::add_debug_symbol 12 "configFile" "AlignAndDedup:142:0"
adlb::add_debug_symbol 13 "outList" "AlignAndDedup:176:41"
adlb::add_debug_symbol 14 "__t:55" "AlignAndDedup:__entry():205:6"
adlb::add_debug_symbol 15 "__t:57" "AlignAndDedup:__entry():205:24"
adlb::add_debug_symbol 16 "__t:59" "AlignAndDedup:__entry():205:66"
adlb::add_debug_symbol 17 "__t:83" "AlignAndDedup:__entry():236:28"
adlb::add_debug_symbol 18 "__t:86" "AlignAndDedup:__entry():236:72"
adlb::add_debug_symbol 19 "__t:8:2" "AlignAndDedup:alignReads():61:5"
adlb::add_debug_symbol 20 "__t:88" "AlignAndDedup:__entry():236:92"
adlb::add_debug_symbol 21 "__t:85" "AlignAndDedup:__entry():236:61"
adlb::add_debug_symbol 22 "__t:7:2" "AlignAndDedup:alignReads():61:25"
adlb::add_debug_symbol 23 "keyValuePair" "generalfunctions.general:getConfigVariables():20:2"
adlb::add_debug_symbol 24 "sampleInfo" "AlignAndDedup:__entry():199:1"
adlb::add_debug_symbol 25 "rgheader" "AlignAndDedup:__entry():204:1"
adlb::add_debug_symbol 26 "alignedbam" "AlignAndDedup:__entry():227:48"
adlb::add_debug_symbol 27 "__t:78" "AlignAndDedup:__entry():230:19"
adlb::add_debug_symbol 28 "alignedsam" "AlignAndDedup:__entry():230:65"
adlb::add_debug_symbol 29 "__t:90" "AlignAndDedup:__entry():239:6"
adlb::add_debug_symbol 30 "__t:5:2" "AlignAndDedup:alignReads():58:19"
adlb::add_debug_symbol 31 "alignedLog" "AlignAndDedup:alignReads():58:48"
adlb::add_debug_symbol 32 "__t:11:2" "AlignAndDedup:alignReads():63:34"
adlb::add_debug_symbol 33 "__t:13:2" "AlignAndDedup:alignReads():63:64"
adlb::add_debug_symbol 34 "__t:15:2" "AlignAndDedup:alignReads():64:9"
adlb::add_debug_symbol 35 "__t:16:2" "AlignAndDedup:alignReads():64:9"
adlb::add_debug_symbol 36 "__t:21:2" "AlignAndDedup:alignReads():69:36"
adlb::add_debug_symbol 37 "__t:23:2" "AlignAndDedup:alignReads():69:72"
adlb::add_debug_symbol 38 "dedupsortedbam" "AlignAndDedup:__entry():245:53"
adlb::add_debug_symbol 39 "__t:93" "AlignAndDedup:__entry():249:7"
adlb::add_debug_symbol 40 "__t:6:1" "AlignAndDedup:markDuplicates():87:5"
adlb::add_debug_symbol 41 "dedupsam" "AlignAndDedup:markDuplicates():88:64"
adlb::add_debug_symbol 42 "dedupbam" "AlignAndDedup:markDuplicates():89:47"
adlb::add_debug_symbol 43 "samLog" "AlignAndDedup:markDuplicates():90:45"
adlb::add_debug_symbol 44 "sortLog" "AlignAndDedup:markDuplicates():91:46"
adlb::add_debug_symbol 45 "__t:20:1" "AlignAndDedup:markDuplicates():94:32"
adlb::add_debug_symbol 46 "__t:30:1" "AlignAndDedup:markDuplicates():100:37"
adlb::add_debug_symbol 47 "__t:37:1" "AlignAndDedup:markDuplicates():101:38"
adlb::add_debug_symbol 48 "metricsfile" "AlignAndDedup:markDuplicates():106:50"
adlb::add_debug_symbol 49 "alignedsortedbam" "AlignAndDedup:markDuplicates():107:55"
adlb::add_debug_symbol 50 "picardLog" "AlignAndDedup:markDuplicates():108:48"
adlb::add_debug_symbol 51 "sortLog:1" "AlignAndDedup:markDuplicates():109:46"
adlb::add_debug_symbol 52 "__t:52:1" "AlignAndDedup:markDuplicates():112:39"
adlb::add_debug_symbol 53 "__t:59:1" "AlignAndDedup:markDuplicates():113:27"
adlb::add_debug_symbol 54 "__t:60:1" "AlignAndDedup:markDuplicates():116:50"
adlb::add_debug_symbol 55 "__t:62:1" "AlignAndDedup:markDuplicates():116:67"
adlb::add_debug_symbol 56 "novoLog" "AlignAndDedup:markDuplicates():121:46"
adlb::add_debug_symbol 57 "__t:68:1" "AlignAndDedup:markDuplicates():124:37"
adlb::add_debug_symbol 58 "__t:75:1" "AlignAndDedup:markDuplicates():125:38"
adlb::add_debug_symbol 59 "flagstats" "AlignAndDedup:__entry():259:72"
adlb::add_debug_symbol 60 "stat" "AlignAndDedup:__entry():263:3"
adlb::add_debug_symbol 61 "__t:100" "AlignAndDedup:__entry():264:16"
adlb::add_debug_symbol 62 "__t:103" "AlignAndDedup:__entry():265:15"
adlb::add_debug_symbol 63 "__t:106" "AlignAndDedup:__entry():266:14"
adlb::add_debug_symbol 64 "perc_mapped" "AlignAndDedup:__entry():269:14"
adlb::add_debug_symbol 65 "__t:113" "AlignAndDedup:__entry():269:41"
adlb::add_debug_symbol 66 "cutoff_info" "AlignAndDedup:__entry():272:3"
adlb::add_debug_symbol 67 "__t:119" "AlignAndDedup:__entry():273:33"
adlb::add_debug_symbol 68 "__t:123" "AlignAndDedup:__entry():275:29"
adlb::add_debug_symbol 69 "__t:127" "AlignAndDedup:__entry():278:19"
adlb::add_debug_symbol 70 "__t:130" "AlignAndDedup:__entry():279:20"
adlb::add_debug_symbol 71 "__t:131" "AlignAndDedup:__entry():279:22"
adlb::add_debug_symbol 72 "newFile" "generalfunctions.general:append():11:17"
adlb::add_debug_symbol 73 "newFile:1" "generalfunctions.general:append():11:17"
adlb::add_debug_symbol 74 "newFile:2" "generalfunctions.general:append():11:17"
adlb::add_debug_symbol 75 "newFile:3" "generalfunctions.general:append():11:17"
adlb::add_debug_symbol 76 "__t:1" "generalfunctions.general:checkBam():46:32"
turbine::start swift:main swift:constants
turbine::finalize
