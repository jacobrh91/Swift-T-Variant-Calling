
# Generated by stc version 0.7.2
# date                    : 2017/02/17 14:04:52
# Turbine version         : 0.9.1
# Input filename          : /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift
# Output filename         : /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/swift-t-RealignRecalAndVC.tfC.tic
# STC home                : /usr/local/apps/bioapps/swift-t/swift-t-1.1/stc
# Turbine home            : /usr/local/apps/bioapps/swift-t/swift-t-1.1/turbine
# Compiler settings:
# stc.auto-declare              : true
# stc.c_preprocess              : true
# stc.checkpointing             : true
# stc.compiler-debug            : true
# stc.debugging                 : COMMENTS
# stc.ic.output-file            : 
# stc.input_filename            : /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift
# stc.log.file                  : 
# stc.log.trace                 : false
# stc.must_pass_wait_vars       : true
# stc.opt.algebra               : true
# stc.opt.array-build           : true
# stc.opt.batch-refcounts       : true
# stc.opt.cancel-refcounts      : true
# stc.opt.constant-fold         : true
# stc.opt.controlflow-fusion    : true
# stc.opt.dataflow-op-inline    : true
# stc.opt.dead-code-elim        : true
# stc.opt.demote-globals        : true
# stc.opt.disable-asserts       : false
# stc.opt.expand-loop-threshold-insts: 256
# stc.opt.expand-loop-threshold-iters: 16
# stc.opt.expand-loops          : false
# stc.opt.finalized-var         : true
# stc.opt.flatten-nested        : true
# stc.opt.full-function-inline  : false
# stc.opt.full-unroll           : false
# stc.opt.function-always-inline-threshold: 5
# stc.opt.function-inline       : true
# stc.opt.function-inline-threshold: 50
# stc.opt.function-signature    : true
# stc.opt.hoist                 : true
# stc.opt.hoist-refcounts       : true
# stc.opt.loop-simplify         : true
# stc.opt.max-iterations        : 10
# stc.opt.merge-refcounts       : true
# stc.opt.piggyback-refcounts   : true
# stc.opt.pipeline              : false
# stc.opt.propagate-aliases     : true
# stc.opt.reorder-insts         : false
# stc.opt.shared-constants      : true
# stc.opt.unroll-loop-threshold-insts: 192
# stc.opt.unroll-loop-threshold-iters: 8
# stc.opt.unroll-loops          : true
# stc.opt.value-number          : true
# stc.opt.wait-coalesce         : true
# stc.output_filename           : /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/swift-t-RealignRecalAndVC.tfC.tic
# stc.preproc.force-cpp         : false
# stc.preproc.force-gcc         : false
# stc.preprocess_only           : false
# stc.profile                   : false
# stc.refcounting               : true
# stc.rpath                     : ./
# stc.stc_home                  : /usr/local/apps/bioapps/swift-t/swift-t-1.1/stc
# stc.turbine.version           : 0.9.1
# stc.turbine_home              : /usr/local/apps/bioapps/swift-t/swift-t-1.1/turbine
# stc.version                   : 0.7.2

# Metadata:

# rpath entries
lappend auto_path "./"
package require turbine 0.9.1
namespace import turbine::*


proc swift:constants {  } {
    turbine::c::log "function:swift:constants"
    global c:s__vcf-1
    turbine::allocate_custom c:s__vcf-1 string 1 1 1 1
    turbine::store_string ${c:s__vcf-1} "*.vcf"
    global c:s_bam_list_t
    turbine::allocate_custom c:s_bam_list_t string 1 1 2 1
    turbine::store_string ${c:s_bam_list_t} "*bam_list.txt"
    global c:s_sknownSite
    turbine::allocate_custom c:s_sknownSite string 1 1 3 1
    turbine::store_string ${c:s_sknownSite} "s/^/--knownSites /g"
    global c:s_sknown_g
    turbine::allocate_custom c:s_sknown_g string 1 1 4 1
    turbine::store_string ${c:s_sknown_g} "s/^/-known /g"
}

package require align 0.2


proc swift:main {  } {
    turbine::c::log "function: __entry"
    # Var: string c:s_bam_list_t OPT_TEMPORARY
    global c:s_bam_list_t
    # Var: string[string] u:vars /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:148:0
    global u:vars
    # Var: file t:9 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:138:34
    # Var: $string v:directory VALUE_OF [string:directory]
    # Var: $string v:configFilename VALUE_OF [string:configFilename]
    # Var: file u:configFile /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:144:0
    # Var: string u:directory /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:129:0
    # Var: string t:16 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():178:5
    # Var: string t:119 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():231:6
    # Var: string t:134 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():263:29
    # Var: $file v:configFile VALUE_OF [file:configFile]
    # Var: $file v:configFile:1 VALUE_OF [file:configFile]
    # Var: $string$[int] v:configFileData VALUE_OF [string[int]:configFileData]
    # Var: boolean t:31 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():182:19
    # Var: boolean t:118 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():231:23
    # Var: boolean t:12 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():180:25
    lassign [ adlb::multicreate [ list string 1 1 7 ] [ list string 1 1 8 ] [ list string 1 1 9 ] [ list string 1 1 10 ] [ list integer 1 1 11 ] [ list integer 1 1 12 ] [ list integer 1 1 13 ] ] u:directory t:16 t:119 t:134 t:31 t:118 t:12
    turbine::c::log "allocated u:directory=<${u:directory}> t:16=<${t:16}> t:119=<${t:119}> t:134=<${t:134}> t:31=<${t:31}>"
    turbine::c::log "allocated t:118=<${t:118}> t:12=<${t:12}>"
    lassign [ turbine::make_file_tds [ adlb::multicreate [ list file 1 1 5 ] [ list file 1 1 6 ] ] [ list 0 0 ] ] t:9 u:configFile
    turbine::argv_accept_impl [ list "runfile" "input" ]
    set v:directory [ turbine::argv_get_impl "input" ]
    turbine::store_string ${u:directory} ${v:directory}
    set v:configFilename [ turbine::argv_get_impl "runfile" ]
    f:find_files ${t:9} ${u:directory} ${c:s_bam_list_t} -100 "HARD" "RANK"
    set tcltmp:init_rc 1
    set v:configFile [ turbine::create_local_file_ref "" ${tcltmp:init_rc} 0 ]
    turbine::input_file_local v:configFile ${v:configFilename}
    turbine::store_file ${u:configFile} v:configFile 1
    set v:configFile:1 [ turbine::retrieve_file ${u:configFile} CACHED 1 ]
    set v:configFileData [ turbine::file_lines_impl ${v:configFile:1} ]
    turbine::container_reference ${u:vars} "SPLIT" ${t:16} string
    turbine::container_reference ${u:vars} "ANALYSIS" ${t:119} string
    turbine::container_reference ${u:vars} "OUTPUTDIR" ${t:134} string
    dict for {tcltmp:ignore v:line} ${v:configFileData} {
        # Var: string[int] u:keyValuePair RENAMED [string[int]:keyValuePair] ./generalfunctions/general.swift:getConfigVariables():21:2
        # Var: $string$[int] v:keyValuePair VALUE_OF [string[int]:keyValuePair]
        # Var: $string v:alias:name VALUE_OF [string:__alias:name]
        # Var: $string v:alias:value VALUE_OF [string:__alias:value]
        lassign [ adlb::multicreate [ list container integer string 1 2 14 ] ] u:keyValuePair
        turbine::c::log "allocated u:keyValuePair=<${u:keyValuePair}>"
        set v:keyValuePair [ turbine::split_impl ${v:line} "=" ]
        turbine::build_rec ${u:keyValuePair} ${v:keyValuePair} [ list container integer string ] 0 1
        set a:name [ adlb::subscript_container ${u:keyValuePair} 0 ]
        set v:alias:name [ turbine::retrieve_string ${a:name} ]
        set a:value [ adlb::subscript_container ${u:keyValuePair} 1 ]
        set v:alias:value [ turbine::retrieve_string ${a:value} CACHED 1 ]
        turbine::container_insert ${u:vars} ${v:alias:name} ${v:alias:value} string 0
        adlb::write_refcount_decr ${u:keyValuePair} 1
    }
    turbine::rule [ list [ turbine::get_file_td ${t:9} ] ] [ list __entry-call_foreign-file_lines ${t:118} ${t:12} ${t:134} ${t:31} ${t:9} ${v:directory} ]
    turbine::rule [ list ${t:119} ] "__entry-async_op-eq_string ${t:118} ${t:119}"
    turbine::rule [ list ${t:16} ] "__entry-optmerged-4 ${t:12} ${t:16} ${t:31}"
    turbine::decr_local_file_refcount v:configFile
    turbine::read_refcount_decr ${u:directory} 1
    adlb::write_refcount_decr ${u:vars} 1
}


proc __entry-call_foreign-file_lines { t:118 t:12 t:134 t:31 t:9 v:directory } {
    # Var: $file v:t:9 VALUE_OF [file:__t:9]
    # Var: $string$[int] v:chrFileList VALUE_OF [string[int]:chrFileList]
    set v:t:9 [ turbine::retrieve_file ${t:9} CACHED 1 ]
    set v:chrFileList [ turbine::file_lines_impl ${v:t:9} ]
    set tcltmp:iters [ dict size ${v:chrFileList} ]
    turbine::read_refcount_incr ${t:31} [ expr { ${tcltmp:iters} } ]
    turbine::read_refcount_incr ${t:12} [ expr { ${tcltmp:iters} } ]
    dict for {tcltmp:ignore v:chrFile} ${v:chrFileList} {
        # Var: file t:10 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():161:35
        # Var: string[int] u:recalparmsindels /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():163:1
        # Var: string[int] u:realparms /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():164:1
        # Var: string u:vcfFileName /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():176:1
        # Var: boolean t:11 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():181:27
        # Var: $file v:t:10 VALUE_OF [file:__t:10]
        # Var: $file v:t:10:1 VALUE_OF [file:__t:10]
        # Var: $string$[int] v:bamFileList VALUE_OF [string[int]:bamFileList]
        lassign [ adlb::multicreate [ list container integer string 1 1 16 ] [ list container integer string 1 1 17 ] [ list string 1 1 18 ] [ list integer 1 1 19 ] ] u:recalparmsindels u:realparms u:vcfFileName t:11
        turbine::c::log "allocated u:recalparmsindels=<${u:recalparmsindels}> u:realparms=<${u:realparms}> u:vcfFileName=<${u:vcfFileName}> t:11=<${t:11}>"
        lassign [ turbine::make_file_tds [ adlb::multicreate [ list file 1 1 15 ] ] [ list 0 ] ] t:10
        set tcltmp:init_rc 1
        set v:t:10 [ turbine::create_local_file_ref "" ${tcltmp:init_rc} 0 ]
        turbine::input_file_local v:t:10 ${v:chrFile}
        turbine::store_file ${t:10} v:t:10 1
        set v:t:10:1 [ turbine::retrieve_file ${t:10} CACHED 1 ]
        set v:bamFileList [ turbine::file_lines_impl ${v:t:10:1} ]
        set tcltmp:iters [ dict size ${v:bamFileList} ]
        turbine::read_refcount_incr ${u:vcfFileName} [ expr { 3 * ${tcltmp:iters} } ]
        turbine::read_refcount_incr ${t:134} [ expr { ${tcltmp:iters} } ]
        turbine::read_refcount_incr ${u:recalparmsindels} [ expr { 2 * ${tcltmp:iters} } ]
        turbine::read_refcount_incr ${t:11} [ expr { ${tcltmp:iters} } ]
        turbine::read_refcount_incr ${u:realparms} [ expr { ${tcltmp:iters} } ]
        turbine::read_refcount_incr ${t:118} [ expr { ${tcltmp:iters} } ]
        dict for {tcltmp:ignore v:bamLocation} ${v:bamFileList} {
            # Var: file u:bamFile /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():219:2
            # Var: string u:prefix /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():226:9
            # Var: file u:recalibratedbam /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():229:40
            # Var: string[int] u:slashSplit /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():259:2
            # Var: string u:VarcallDir /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():263:2
            # Var: file u:vcfLocationFile /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():266:25
            # Var: $file v:bamFile VALUE_OF [file:bamFile]
            # Var: $int v:n RENAMED [$int:__v:n]
            # Var: $int v:t:113 VALUE_OF [int:__t:113]
            # Var: $string v:prefix VALUE_OF [string:prefix]
            # Var: $string v:t:116 VALUE_OF [string:__t:116]
            # Var: $string$[int] v:slashSplit VALUE_OF [string[int]:slashSplit]
            # Var: $int v:t:132 VALUE_OF [int:__t:132]
            # Var: $int v:t:131 VALUE_OF [int:__t:131]
            # Var: $string v:alias:sampleName VALUE_OF [string:__alias:sampleName]
            lassign [ adlb::multicreate [ list string 2 1 21 ] [ list container integer string 1 2 23 ] [ list string 2 1 24 ] ] u:prefix u:slashSplit u:VarcallDir
            turbine::c::log "allocated u:prefix=<${u:prefix}> u:slashSplit=<${u:slashSplit}> u:VarcallDir=<${u:VarcallDir}>"
            lassign [ turbine::make_file_tds [ adlb::multicreate [ list file 2 1 20 ] [ list file 4 1 22 ] [ list file 3 1 25 ] ] [ list 0 1 1 ] ] u:bamFile u:recalibratedbam u:vcfLocationFile
            set tcltmp:init_rc 1
            set v:bamFile [ turbine::create_local_file_ref "" ${tcltmp:init_rc} 0 ]
            turbine::input_file_local v:bamFile ${v:bamLocation}
            turbine::store_file ${u:bamFile} v:bamFile 1
            set wfilename:vcfLocationFile [ turbine::get_file_path ${u:vcfLocationFile} ]
            set v:n [ string length ${v:bamLocation} ]
            set v:t:113 [ expr { ${v:n} - 4 } ]
            set v:prefix [ turbine::substring_impl ${v:bamLocation} 0 ${v:t:113} ]
            turbine::store_string ${u:prefix} ${v:prefix}
            set v:t:116 "${v:prefix}.recalibrated.bam"
            turbine::set_filename_val ${u:recalibratedbam} ${v:t:116}
            set v:slashSplit [ turbine::split_impl ${v:prefix} "/" ]
            turbine::build_rec ${u:slashSplit} ${v:slashSplit} [ list container integer string ] 0 1
            set v:t:132 [ dict size ${v:slashSplit} ]
            set v:t:131 [ expr { ${v:t:132} - 3 } ]
            set a:sampleName [ adlb::subscript_container ${u:slashSplit} ${v:t:131} ]
            set v:alias:sampleName [ turbine::retrieve_string ${a:sampleName} CACHED 1 ]
            turbine::rule [ list ${t:118} ] [ list __entry-if2 ${t:118} ${v:bamLocation} ${v:prefix} ${u:bamFile} ${u:prefix} ${u:realparms} ${u:recalibratedbam} ${u:recalparmsindels} ]
            turbine::rule [ list ${t:11} ] [ list __entry-if3 ${u:VarcallDir} ${t:11} ${v:alias:sampleName} ${v:prefix} ${v:t:116} ${u:recalibratedbam} ${u:vcfFileName} ${u:vcfLocationFile} ]
            turbine::rule [ list ${u:vcfFileName} ] "__entry-copy_in_filename-2 ${u:vcfFileName} {${u:vcfLocationFile}}"
            turbine::rule [ list ${wfilename:vcfLocationFile} ] "__entry-call_foreign-write-2 {${wfilename:vcfLocationFile}} {${u:vcfLocationFile}}"
            turbine::rule [ list ${t:134} ] [ list __entry-async_op-strcat-4 ${u:VarcallDir} ${t:134} ${v:alias:sampleName} ]
            turbine::decr_local_file_refcount v:bamFile
            adlb::write_refcount_decr ${u:slashSplit} 1
        }
        turbine::rule [ list ${t:12} ${t:31} ] [ list __entry-async_op-or ${t:11} ${t:12} ${t:31} ${v:chrFile} ${v:directory} ${u:realparms} ${u:recalparmsindels} ${u:vcfFileName} ]
        turbine::decr_local_file_refcount v:t:10
        turbine::read_refcount_decr ${u:recalparmsindels} 1
        turbine::read_refcount_decr ${u:realparms} 1
        turbine::read_refcount_decr ${t:11} 1
        turbine::read_refcount_decr ${u:vcfFileName} 1
    }
    turbine::read_refcount_decr ${t:31} 1
    turbine::read_refcount_decr ${t:12} 1
    turbine::read_refcount_decr ${t:118} 1
    turbine::read_refcount_decr ${t:134} 1
}


proc __entry-if2 { t:118 v:bamLocation v:prefix u:bamFile u:prefix u:realparms u:recalibratedbam u:recalparmsindels } {
    # Var: $boolean v:__t:118 VALUE_OF [boolean:__t:118] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():231:26
    set v:__t:118 [ turbine::retrieve_integer ${t:118} CACHED 1 ]
    if { ${v:__t:118} } {
        # Var: string[string] u:vars /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:148:0
        global u:vars
        # Var: file u:realignedbam /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():237:38
        # Var: void t:124 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():240:3
        # Var: string t:125 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():240:18
        # Var: $string v:t:122 VALUE_OF [string:__t:122]
        lassign [ adlb::multicreate [ list integer 1 1 27 ] [ list string 1 1 28 ] ] t:124 t:125
        turbine::c::log "allocated t:124=<${t:124}> t:125=<${t:125}>"
        lassign [ turbine::make_file_tds [ adlb::multicreate [ list file 2 1 26 ] ] [ list 1 ] ] u:realignedbam
        turbine::read_refcount_incr ${u:realparms} 1
        set v:t:122 "${v:prefix}.realigned.bam"
        turbine::set_filename_val ${u:realignedbam} ${v:t:122}
        turbine::container_reference ${u:vars} "SAMTOOLSDIR" ${t:125} string
        f:samtools_index ${t:124} ${t:125} ${u:bamFile} -100 "HARD" "RANK"
        set tcltmp:prio [ turbine::get_priority ]
        turbine::set_priority ${tcltmp:prio}
        adlb::spawn 0 "f:recalibrateBam {${u:recalibratedbam}} ${u:prefix} ${u:vars} {${u:realignedbam}} ${u:recalparmsindels}"
        turbine::reset_priority
        turbine::rule [ list ${t:124} ] [ list __entry-chain3 ${t:124} ${v:bamLocation} ${v:prefix} ${v:t:122} ${u:bamFile} ${u:realignedbam} ${u:realparms} ]
        turbine::read_refcount_decr ${t:125} 1
    } else {
        # Var: string[string] u:vars /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:148:0
        global u:vars
        # Var: void t:127 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():250:3
        # Var: string t:128 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():250:18
        lassign [ adlb::multicreate [ list integer 1 1 38 ] [ list string 1 1 39 ] ] t:127 t:128
        turbine::c::log "allocated t:127=<${t:127}> t:128=<${t:128}>"
        turbine::container_reference ${u:vars} "SAMTOOLSDIR" ${t:128} string
        f:samtools_index ${t:127} ${t:128} ${u:bamFile} -100 "HARD" "RANK"
        turbine::rule [ list ${t:127} ] "__entry-chain4 ${t:127} {${u:bamFile}} ${u:prefix} {${u:recalibratedbam}} ${u:recalparmsindels}"
        turbine::read_refcount_decr ${t:128} 1
    }
    turbine::file_read_refcount_decr ${u:bamFile} 1
    turbine::file_read_refcount_decr ${u:recalibratedbam} 1
    turbine::read_refcount_decr ${u:prefix} 1
    turbine::read_refcount_decr ${u:recalparmsindels} 1
    turbine::read_refcount_decr ${u:realparms} 1
}


proc __entry-chain3 { t:124 v:bamLocation v:prefix v:t:122 u:bamFile u:realignedbam u:realparms } {
    # Var: string[string] u:vars /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:148:0
    global u:vars
    # Var: file u:targetLog RENAMED [file:targetLog] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:realignBam():40:33
    # Var: file u:realignLog RENAMED [file:realignLog] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:realignBam():41:34
    # Var: file u:intervals RENAMED [file:intervals] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:realignBam():42:33
    # Var: string t:7:1 RENAMED [string:__t:7] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:realignBam():45:47
    # Var: string t:9:1 RENAMED [string:__t:9] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:realignBam():45:64
    # Var: string t:12:1 RENAMED [string:__t:12] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:realignBam():46:15
    # Var: string t:15:1 RENAMED [string:__t:15] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:realignBam():46:42
    # Var: string t:18:1 RENAMED [string:__t:18] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:realignBam():47:29
    # Var: boolean t:30:1 RENAMED [boolean:__t:30] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:realignBam():53:1
    # Var: $string v:t:1:5 VALUE_OF [string:__t:1:5]
    # Var: $string v:t:3:1 VALUE_OF [string:__t:3:1]
    # Var: $string v:t:5:1 VALUE_OF [string:__t:5:1]
    lassign [ adlb::multicreate [ list string 1 1 32 ] [ list string 1 1 33 ] [ list string 1 1 34 ] [ list string 1 1 35 ] [ list string 1 1 36 ] [ list integer 0 1 37 ] ] t:7:1 t:9:1 t:12:1 t:15:1 t:18:1 t:30:1
    turbine::c::log "allocated t:7:1=<${t:7:1}> t:9:1=<${t:9:1}> t:12:1=<${t:12:1}> t:15:1=<${t:15:1}> t:18:1=<${t:18:1}>"
    turbine::c::log "allocated t:30:1=<${t:30:1}>"
    lassign [ turbine::make_file_tds [ adlb::multicreate [ list file 0 1 29 ] [ list file 0 1 30 ] [ list file 1 1 31 ] ] [ list 1 1 1 ] ] u:targetLog u:realignLog u:intervals
    set v:t:1:5 "${v:prefix}_RealignTargetCreator.log"
    turbine::set_filename_val ${u:targetLog} ${v:t:1:5}
    set v:t:3:1 "${v:prefix}_IndelRealigner.log"
    turbine::set_filename_val ${u:realignLog} ${v:t:3:1}
    set v:t:5:1 "${v:prefix}.realignTargetCreator.intervals"
    turbine::set_filename_val ${u:intervals} ${v:t:5:1}
    turbine::container_reference ${u:vars} "JAVADIR" ${t:7:1} string
    turbine::container_reference ${u:vars} "GATKDIR" ${t:9:1} string
    turbine::container_reference ${u:vars} "REFGENOMEDIR" ${t:12:1} string
    turbine::container_reference ${u:vars} "REFGENOME" ${t:15:1} string
    turbine::container_reference ${u:vars} "PBSCORES" ${t:18:1} string
    turbine::rule [ list ${t:12:1} ${t:15:1} ${t:18:1} ${t:7:1} ${t:9:1} ${u:realparms} ] [ list __entry-async_op-parse_int ${t:12:1} ${t:15:1} ${t:18:1} ${t:30:1} ${t:7:1} ${t:9:1} ${v:bamLocation} ${v:t:122} ${v:t:1:5} ${v:t:3:1} ${v:t:5:1} ${u:bamFile} ${u:intervals} ${u:realignLog} ${u:realignedbam} ${u:realparms} ${u:targetLog} ]
    turbine::read_refcount_decr ${t:124} 1
}


proc __entry-async_op-parse_int { t:12:1 t:15:1 t:18:1 t:30:1 t:7:1 t:9:1 v:bamLocation v:t:122 v:t:1:5 v:t:3:1 v:t:5:1 u:bamFile u:intervals u:realignLog u:realignedbam u:realparms u:targetLog } {
    # Var: $string v:t:18:1 VALUE_OF [string:__t:18:1]
    # Var: $int v:t:17:1 VALUE_OF [int:__t:17:1]
    # Var: $string v:t:12:1:1 VALUE_OF [string:__t:12:1]
    # Var: $string v:t:15:1:1 VALUE_OF [string:__t:15:1]
    # Var: $string v:t:11:1 VALUE_OF [string:__t:11:1]
    # Var: $string v:javadir RENAMED [$string:__v:javadir] ./bioapps/realign_varcal.swift:RealignerTargetCreator():20:9
    # Var: $string v:gatkdir RENAMED [$string:__v:gatkdir] ./bioapps/realign_varcal.swift:RealignerTargetCreator():20:9
    # Var: $string$[int] v:known RENAMED [$string$[int]:__v:known] ./bioapps/realign_varcal.swift:RealignerTargetCreator():20:9
    # Var: $file v:inputFile RENAMED [$file:__v:inputFile] ./bioapps/realign_varcal.swift:RealignerTargetCreator():20:9
    # Var: $file v:outputfile RENAMED [$file:__v:outputfile] ./bioapps/realign_varcal.swift:RealignerTargetCreator():20:9
    # Var: $file v:outLog RENAMED [$file:__v:outLog] ./bioapps/realign_varcal.swift:RealignerTargetCreator():20:9
    set v:t:18:1 [ turbine::retrieve_string ${t:18:1} CACHED 1 ]
    set v:t:17:1 [ turbine::parse_int_impl ${v:t:18:1} 10 ]
    set v:t:12:1:1 [ turbine::retrieve_string ${t:12:1} CACHED 1 ]
    set v:t:15:1:1 [ turbine::retrieve_string ${t:15:1} CACHED 1 ]
    set v:t:11:1 "${v:t:12:1:1}/${v:t:15:1:1}"
    set v:javadir [ turbine::retrieve_string ${t:7:1} CACHED 1 ]
    set v:gatkdir [ turbine::retrieve_string ${t:9:1} CACHED 1 ]
    set v:known [ turbine::unpack_args ${u:realparms} 1 string ]
    set v:inputFile [ turbine::retrieve_file ${u:bamFile} ]
    set tcltmp:init_rc 2
    set v:outputfile [ turbine::create_local_file_ref ${v:t:5:1} ${tcltmp:init_rc} 1 ]
    set tcltmp:init_rc 2
    set v:outLog [ turbine::create_local_file_ref ${v:t:1:5} ${tcltmp:init_rc} 1 ]
    turbine::c::log [ list exec: __v:javadir "-Xmx8g" "-jar" ${v:gatkdir} "-T" "RealignerTargetCreator" "-R" ${v:t:11:1} "-I" ${v:bamLocation} {*}${v:known} "-nt" ${v:t:17:1} "-o" ${v:t:5:1} [ dict create "stderr" ${v:t:1:5} ] ]
    turbine::exec_external ${v:javadir} [ dict create "stderr" ${v:t:1:5} ] "-Xmx8g" "-jar" ${v:gatkdir} "-T" "RealignerTargetCreator" "-R" ${v:t:11:1} "-I" ${v:bamLocation} {*}${v:known} "-nt" ${v:t:17:1} "-o" ${v:t:5:1}
    turbine::store_file ${u:intervals} v:outputfile 0
    turbine::store_file ${u:targetLog} v:outLog 0
    set tcltmp:prio [ turbine::get_priority ]
    turbine::set_priority ${tcltmp:prio}
    adlb::spawn 0 [ list IndelRealigner-app-leaf1 ${t:30:1} ${v:bamLocation} ${v:gatkdir} ${v:javadir} ${v:known} ${v:t:11:1} ${v:t:122} ${v:t:3:1} ${v:t:5:1} ${u:bamFile} ${u:intervals} ${u:realignLog} ${u:realignedbam} ]
    turbine::reset_priority
    turbine::decr_local_file_refcount v:outputfile
    turbine::decr_local_file_refcount v:outLog
    turbine::read_refcount_decr ${u:realparms} 1
}


proc IndelRealigner-app-leaf1 { t:30:1 v:bamLocation v:gatkdir v:javadir v:known v:t:11:1 v:t:122 v:t:3:1 v:t:5:1 u:bamFile u:intervals u:realignLog u:realignedbam } {
    # Var: string[string] u:vars /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:148:0
    global u:vars
    # Var: $file v:inputFile:1 RENAMED [$file:__v:inputFile] ./bioapps/realign_varcal.swift:IndelRealigner():33:9
    # Var: $file v:intervals RENAMED [$file:__v:intervals] ./bioapps/realign_varcal.swift:IndelRealigner():33:9
    # Var: $file v:outputfile:1 RENAMED [$file:__v:outputfile] ./bioapps/realign_varcal.swift:IndelRealigner():33:9
    # Var: $file v:outLog:1 RENAMED [$file:__v:outLog] ./bioapps/realign_varcal.swift:IndelRealigner():33:9
    set v:inputFile:1 [ turbine::retrieve_file ${u:bamFile} CACHED 1 ]
    set v:intervals [ turbine::retrieve_file ${u:intervals} CACHED 1 ]
    set tcltmp:init_rc 2
    set v:outputfile:1 [ turbine::create_local_file_ref ${v:t:122} ${tcltmp:init_rc} 1 ]
    set tcltmp:init_rc 2
    set v:outLog:1 [ turbine::create_local_file_ref ${v:t:3:1} ${tcltmp:init_rc} 1 ]
    turbine::c::log [ list exec: __v:javadir "-Xmx8g" "-jar" ${v:gatkdir} "-T" "IndelRealigner" "-R" ${v:t:11:1} "-I" ${v:bamLocation} {*}${v:known} "--targetIntervals" ${v:t:5:1} "-o" ${v:t:122} [ dict create "stderr" ${v:t:3:1} ] ]
    turbine::exec_external ${v:javadir} [ dict create "stderr" ${v:t:3:1} ] "-Xmx8g" "-jar" ${v:gatkdir} "-T" "IndelRealigner" "-R" ${v:t:11:1} "-I" ${v:bamLocation} {*}${v:known} "--targetIntervals" ${v:t:5:1} "-o" ${v:t:122}
    turbine::store_file ${u:realignedbam} v:outputfile:1 0
    turbine::rule [ list [ turbine::get_file_td ${u:realignedbam} ] ] "f:checkBam ${t:30:1} ${u:vars} {${u:realignedbam}}"
    turbine::store_file ${u:realignLog} v:outLog:1 0
    turbine::decr_local_file_refcount v:outputfile:1
    turbine::decr_local_file_refcount v:outLog:1
}


proc __entry-chain4 { t:127 u:bamFile u:prefix u:recalibratedbam u:recalparmsindels } {
    # Var: string[string] u:vars /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:148:0
    global u:vars
    set tcltmp:prio [ turbine::get_priority ]
    turbine::set_priority ${tcltmp:prio}
    adlb::spawn 0 "f:recalibrateBam {${u:recalibratedbam}} ${u:prefix} ${u:vars} {${u:bamFile}} ${u:recalparmsindels}"
    turbine::reset_priority
    turbine::read_refcount_decr ${t:127} 1
}


proc __entry-if3 { u:VarcallDir t:11 v:alias:sampleName v:prefix v:t:116 u:recalibratedbam u:vcfFileName u:vcfLocationFile } {
    # Var: $boolean v:__t:139 VALUE_OF [boolean:__t:139] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():273:23
    set v:__t:139 [ turbine::retrieve_integer ${t:11} CACHED 1 ]
    if { ${v:__t:139} } {
        # Var: string[string] u:vars /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:148:0
        global u:vars
        # Var: string[int] u:splitPrefix /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():277:3
        # Var: file u:gvcfSample /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():282:62
        # Var: int u:ploidy RENAMED [int:ploidy] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:callChrVariants():84:1
        # Var: file u:haploLog RENAMED [file:haploLog] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:callChrVariants():95:58
        # Var: string t:13:2 RENAMED [string:__t:13] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:callChrVariants():97:36
        # Var: string t:15:2 RENAMED [string:__t:15] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:callChrVariants():97:53
        # Var: string t:17:2 RENAMED [string:__t:17] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:callChrVariants():98:8
        # Var: string t:18:2 RENAMED [string:__t:18] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:callChrVariants():98:15
        # Var: string t:21:2 RENAMED [string:__t:21] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:callChrVariants():98:42
        # Var: string t:23:2 RENAMED [string:__t:23] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:callChrVariants():100:8
        # Var: string t:27:2 RENAMED [string:__t:27] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:callChrVariants():100:42
        # Var: int t:29:2 RENAMED [int:__t:29] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:callChrVariants():101:8
        # Var: string t:30:2 RENAMED [string:__t:30] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:callChrVariants():101:19
        # Var: $string$[int] v:splitPrefix VALUE_OF [string[int]:splitPrefix]
        # Var: $int v:t:165 VALUE_OF [int:__t:165]
        # Var: $int v:t:164 VALUE_OF [int:__t:164]
        # Var: $string v:chr:1 VALUE_OF [string:chr:1]
        # Var: $boolean v:t:2:2 VALUE_OF [boolean:__t:2:2]
        # Var: $boolean v:t:4:2 VALUE_OF [boolean:__t:4:2]
        # Var: $boolean v:t:1:6 VALUE_OF [boolean:__t:1:6]
        lassign [ adlb::multicreate [ list container integer string 1 1 40 ] [ list integer 1 1 42 ] [ list string 1 1 44 ] [ list string 1 1 45 ] [ list string 1 1 46 ] [ list string 1 1 47 ] [ list string 1 1 48 ] [ list string 1 1 49 ] [ list string 1 1 50 ] [ list integer 1 1 51 ] [ list string 1 1 52 ] ] u:splitPrefix u:ploidy t:13:2 t:15:2 t:17:2 t:18:2 t:21:2 t:23:2 t:27:2 t:29:2 t:30:2
        turbine::c::log "allocated u:splitPrefix=<${u:splitPrefix}> u:ploidy=<${u:ploidy}> t:13:2=<${t:13:2}> t:15:2=<${t:15:2}> t:17:2=<${t:17:2}>"
        turbine::c::log "allocated t:18:2=<${t:18:2}> t:21:2=<${t:21:2}> t:23:2=<${t:23:2}> t:27:2=<${t:27:2}> t:29:2=<${t:29:2}>"
        turbine::c::log "allocated t:30:2=<${t:30:2}>"
        lassign [ turbine::make_file_tds [ adlb::multicreate [ list file 0 1 41 ] [ list file 0 1 43 ] ] [ list 1 1 ] ] u:gvcfSample u:haploLog
        set v:splitPrefix [ turbine::split_impl ${v:prefix} "." ]
        turbine::build_rec ${u:splitPrefix} ${v:splitPrefix} [ list container integer string ] 0 1
        set v:t:165 [ dict size ${v:splitPrefix} ]
        set v:t:164 [ expr { ${v:t:165} - 1 } ]
        set v:chr:1 [ turbine::container_lookup ${u:splitPrefix} ${v:t:164} 1 0 ]
        set v:t:2:2 [ string equal ${v:chr:1} "M" ]
        set v:t:4:2 [ string equal ${v:chr:1} "chrM" ]
        set v:t:1:6 [ expr { ${v:t:2:2} || ${v:t:4:2} } ]
        turbine::container_reference ${u:vars} "JAVADIR" ${t:13:2} string
        turbine::container_reference ${u:vars} "GATKDIR" ${t:15:2} string
        turbine::container_reference ${u:vars} "REFGENOMEDIR" ${t:18:2} string
        turbine::container_reference ${u:vars} "REFGENOME" ${t:21:2} string
        turbine::container_reference ${u:vars} "DBSNP" ${t:27:2} string
        turbine::container_reference ${u:vars} "PBSCORES" ${t:30:2} string
        if { ${v:t:1:6} } {
            turbine::store_integer ${u:ploidy} 1
        } else {
            turbine::store_integer ${u:ploidy} 2
        }
        turbine::rule [ list ${t:30:2} ] "__entry-async_op-parse_int-1 ${t:29:2} ${t:30:2}"
        turbine::rule [ list ${t:18:2} ] "__entry-optmerged ${t:17:2} ${t:18:2} ${t:21:2} ${t:23:2} ${t:27:2}"
        turbine::rule [ list ${u:VarcallDir} ] [ list __entry-optmerged-1 ${u:VarcallDir} ${t:13:2} ${t:15:2} ${t:17:2} ${t:23:2} ${t:29:2} ${v:alias:sampleName} ${v:chr:1} ${v:t:116} ${u:gvcfSample} ${u:haploLog} ${u:ploidy} ${u:recalibratedbam} ${u:vcfFileName} ${u:vcfLocationFile} ]
    } else {
        # Var: string[string] u:vars /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:148:0
        global u:vars
        # Var: file u:gvcfSample:1 RENAMED [file:gvcfSample] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():289:52
        # Var: file u:haploLog:1 RENAMED [file:haploLog] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:callVariants():113:48
        # Var: string t:7:3 RENAMED [string:__t:7] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:callVariants():115:36
        # Var: string t:9:3 RENAMED [string:__t:9] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:callVariants():116:8
        # Var: string t:11:3 RENAMED [string:__t:11] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:callVariants():117:8
        # Var: string t:12:3 RENAMED [string:__t:12] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:callVariants():117:15
        # Var: string t:15:3 RENAMED [string:__t:15] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:callVariants():117:42
        # Var: string t:17:3 RENAMED [string:__t:17] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:callVariants():119:8
        # Var: string t:21:3 RENAMED [string:__t:21] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:callVariants():119:42
        # Var: int t:23:3 RENAMED [int:__t:23] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:callVariants():120:8
        # Var: string t:24:3 RENAMED [string:__t:24] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:callVariants():120:19
        lassign [ adlb::multicreate [ list string 1 1 56 ] [ list string 1 1 57 ] [ list string 1 1 58 ] [ list string 1 1 59 ] [ list string 1 1 60 ] [ list string 1 1 61 ] [ list string 1 1 62 ] [ list integer 1 1 63 ] [ list string 1 1 64 ] ] t:7:3 t:9:3 t:11:3 t:12:3 t:15:3 t:17:3 t:21:3 t:23:3 t:24:3
        turbine::c::log "allocated t:7:3=<${t:7:3}> t:9:3=<${t:9:3}> t:11:3=<${t:11:3}> t:12:3=<${t:12:3}> t:15:3=<${t:15:3}>"
        turbine::c::log "allocated t:17:3=<${t:17:3}> t:21:3=<${t:21:3}> t:23:3=<${t:23:3}> t:24:3=<${t:24:3}>"
        lassign [ turbine::make_file_tds [ adlb::multicreate [ list file 0 1 54 ] [ list file 0 1 55 ] ] [ list 1 1 ] ] u:gvcfSample:1 u:haploLog:1
        turbine::container_reference ${u:vars} "JAVADIR" ${t:7:3} string
        turbine::container_reference ${u:vars} "GATKDIR" ${t:9:3} string
        turbine::container_reference ${u:vars} "REFGENOMEDIR" ${t:12:3} string
        turbine::container_reference ${u:vars} "REFGENOME" ${t:15:3} string
        turbine::container_reference ${u:vars} "DBSNP" ${t:21:3} string
        turbine::container_reference ${u:vars} "PBSCORES" ${t:24:3} string
        turbine::rule [ list ${t:24:3} ] "__entry-async_op-parse_int-2 ${t:23:3} ${t:24:3}"
        turbine::rule [ list ${t:12:3} ] "__entry-optmerged-2 ${t:11:3} ${t:12:3} ${t:15:3} ${t:17:3} ${t:21:3}"
        turbine::rule [ list ${u:VarcallDir} ] [ list __entry-optmerged-3 ${u:VarcallDir} ${t:11:3} ${t:17:3} ${t:23:3} ${t:7:3} ${t:9:3} ${v:alias:sampleName} ${v:t:116} ${u:gvcfSample:1} ${u:haploLog:1} ${u:recalibratedbam} ${u:vcfFileName} ${u:vcfLocationFile} ]
    }
    turbine::read_refcount_decr ${u:VarcallDir} 1
    turbine::file_read_refcount_decr ${u:recalibratedbam} 1
    turbine::file_read_refcount_decr ${u:vcfLocationFile} 1
    turbine::read_refcount_decr ${u:vcfFileName} 1
}


proc __entry-async_op-parse_int-1 { t:29:2 t:30:2 } {
    # Var: $string v:t:30:2 VALUE_OF [string:__t:30:2]
    # Var: $int v:t:29:2 VALUE_OF [int:__t:29:2]
    set v:t:30:2 [ turbine::retrieve_string ${t:30:2} CACHED 1 ]
    set v:t:29:2 [ turbine::parse_int_impl ${v:t:30:2} 10 ]
    turbine::store_integer ${t:29:2} ${v:t:29:2}
}


proc __entry-optmerged { t:17:2 t:18:2 t:21:2 t:23:2 t:27:2 } {
    # Var: $string v:t:18:2 VALUE_OF [string:__t:18:2]
    set v:t:18:2 [ turbine::retrieve_string ${t:18:2} CACHED 1 ]
    turbine::rule [ list ${t:21:2} ] [ list __entry-async_op-strcat ${t:17:2} ${t:21:2} ${v:t:18:2} ]
    turbine::rule [ list ${t:27:2} ] [ list __entry-async_op-strcat-1 ${t:23:2} ${t:27:2} ${v:t:18:2} ]
}


proc __entry-async_op-strcat { t:17:2 t:21:2 v:t:18:2 } {
    # Var: $string v:t:21:2 VALUE_OF [string:__t:21:2]
    # Var: $string v:t:17:2 VALUE_OF [string:__t:17:2]
    set v:t:21:2 [ turbine::retrieve_string ${t:21:2} CACHED 1 ]
    set v:t:17:2 "${v:t:18:2}/${v:t:21:2}"
    turbine::store_string ${t:17:2} ${v:t:17:2}
}


proc __entry-async_op-strcat-1 { t:23:2 t:27:2 v:t:18:2 } {
    # Var: $string v:t:27:2 VALUE_OF [string:__t:27:2]
    # Var: $string v:t:23:2 VALUE_OF [string:__t:23:2]
    set v:t:27:2 [ turbine::retrieve_string ${t:27:2} CACHED 1 ]
    set v:t:23:2 "${v:t:18:2}/${v:t:27:2}"
    turbine::store_string ${t:23:2} ${v:t:23:2}
}


proc __entry-optmerged-1 { u:VarcallDir t:13:2 t:15:2 t:17:2 t:23:2 t:29:2 v:alias:sampleName v:chr:1 v:t:116 u:gvcfSample u:haploLog u:ploidy u:recalibratedbam u:vcfFileName u:vcfLocationFile } {
    # Var: $string v:VarcallDir:1 VALUE_OF [string:VarcallDir]
    # Var: $string v:t:167 VALUE_OF [string:__t:167]
    # Var: $string v:t:10:2 VALUE_OF [string:__t:10:2]
    set v:VarcallDir:1 [ turbine::retrieve_string ${u:VarcallDir} CACHED 1 ]
    set v:t:167 "${v:VarcallDir:1}${v:alias:sampleName}.${v:chr:1}.raw.g.vcf"
    set v:t:10:2 "${v:VarcallDir:1}${v:alias:sampleName}.${v:chr:1}_HaplotypeCaller.log"
    turbine::set_filename_val ${u:gvcfSample} ${v:t:167}
    turbine::set_filename_val ${u:haploLog} ${v:t:10:2}
    turbine::rule [ list ${t:13:2} ${t:15:2} ${t:17:2} ${t:23:2} ${t:29:2} [ turbine::get_file_td ${u:recalibratedbam} ] ] [ list HaplotypeCaller-app-leaf1 ${t:13:2} ${t:15:2} ${t:17:2} ${t:23:2} ${t:29:2} ${v:chr:1} ${v:t:10:2} ${v:t:116} ${v:t:167} ${u:gvcfSample} ${u:haploLog} ${u:ploidy} ${u:recalibratedbam} ${u:vcfFileName} ${u:vcfLocationFile} ]
}


proc HaplotypeCaller-app-leaf1 { t:13:2 t:15:2 t:17:2 t:23:2 t:29:2 v:chr:1 v:t:10:2 v:t:116 v:t:167 u:gvcfSample u:haploLog u:ploidy u:recalibratedbam u:vcfFileName u:vcfLocationFile } {
    # Var: $string v:javadir:2 RENAMED [$string:__v:javadir] ./bioapps/realign_varcal.swift:HaplotypeCaller():92:9
    # Var: $string v:gatkdir:2 RENAMED [$string:__v:gatkdir] ./bioapps/realign_varcal.swift:HaplotypeCaller():92:9
    # Var: $string v:reference:2 RENAMED [$string:__v:reference] ./bioapps/realign_varcal.swift:HaplotypeCaller():92:9
    # Var: $string v:dbsnp RENAMED [$string:__v:dbsnp] ./bioapps/realign_varcal.swift:HaplotypeCaller():92:9
    # Var: $int v:ploidy RENAMED [$int:__v:ploidy] ./bioapps/realign_varcal.swift:HaplotypeCaller():92:9
    # Var: $int v:thr:1 RENAMED [$int:__v:thr] ./bioapps/realign_varcal.swift:HaplotypeCaller():92:9
    # Var: $file v:inputFile:2 RENAMED [$file:__v:inputFile] ./bioapps/realign_varcal.swift:HaplotypeCaller():92:9
    # Var: $file v:outputfile:2 RENAMED [$file:__v:outputfile] ./bioapps/realign_varcal.swift:HaplotypeCaller():92:9
    # Var: $file v:outLog:2 RENAMED [$file:__v:outLog] ./bioapps/realign_varcal.swift:HaplotypeCaller():92:9
    # Var: $string v:t:170 VALUE_OF [string:__t:170]
    # Var: file u:newFile RENAMED [file:newFile] ./generalfunctions/general.swift:append():12:17
    lassign [ turbine::make_file_tds [ adlb::multicreate [ list file 1 1 53 ] ] [ list 1 ] ] u:newFile
    set v:javadir:2 [ turbine::retrieve_string ${t:13:2} CACHED 1 ]
    set v:gatkdir:2 [ turbine::retrieve_string ${t:15:2} CACHED 1 ]
    set v:reference:2 [ turbine::retrieve_string ${t:17:2} CACHED 1 ]
    set v:dbsnp [ turbine::retrieve_string ${t:23:2} CACHED 1 ]
    set v:ploidy [ turbine::retrieve_integer ${u:ploidy} CACHED 1 ]
    set v:thr:1 [ turbine::retrieve_integer ${t:29:2} CACHED 1 ]
    set v:inputFile:2 [ turbine::retrieve_file ${u:recalibratedbam} CACHED 1 ]
    set tcltmp:init_rc 2
    set v:outputfile:2 [ turbine::create_local_file_ref ${v:t:167} ${tcltmp:init_rc} 1 ]
    set tcltmp:init_rc 2
    set v:outLog:2 [ turbine::create_local_file_ref ${v:t:10:2} ${tcltmp:init_rc} 1 ]
    turbine::c::log [ list exec: __v:javadir:2 "-Xmx8g" "-jar" ${v:gatkdir:2} "-T" "HaplotypeCaller" "-R" ${v:reference:2} "-I" ${v:t:116} "--dbsnp" ${v:dbsnp} "-o" ${v:t:167} "--emitRefConfidence" "GVCF" "-gt_mode" "DISCOVERY" "-A" "Coverage" "-A" "FisherStrand" "-A" "StrandOddsRatio" "-A" "HaplotypeScore" "-A" "MappingQualityRankSumTest" "-A" "QualByDepth" "-A" "RMSMappingQuality" "-A" "ReadPosRankSumTest" "-stand_call_conf" 30 "-stand_emit_conf" 30 "--sample_ploidy" ${v:ploidy} "-nt" 1 "-nct" ${v:thr:1} "-L" ${v:chr:1} [ dict create "stderr" ${v:t:10:2} ] ]
    turbine::exec_external ${v:javadir:2} [ dict create "stderr" ${v:t:10:2} ] "-Xmx8g" "-jar" ${v:gatkdir:2} "-T" "HaplotypeCaller" "-R" ${v:reference:2} "-I" ${v:t:116} "--dbsnp" ${v:dbsnp} "-o" ${v:t:167} "--emitRefConfidence" "GVCF" "-gt_mode" "DISCOVERY" "-A" "Coverage" "-A" "FisherStrand" "-A" "StrandOddsRatio" "-A" "HaplotypeScore" "-A" "MappingQualityRankSumTest" "-A" "QualByDepth" "-A" "RMSMappingQuality" "-A" "ReadPosRankSumTest" "-stand_call_conf" 30 "-stand_emit_conf" 30 "--sample_ploidy" ${v:ploidy} "-nt" 1 "-nct" ${v:thr:1} "-L" ${v:chr:1}
    turbine::store_file ${u:gvcfSample} v:outputfile:2 0
    turbine::store_file ${u:haploLog} v:outLog:2 0
    set v:t:170 "${v:t:167}\n"
    set wfilename:newFile [ turbine::get_file_path ${u:newFile} ]
    turbine::rule [ list [ turbine::get_file_td ${u:vcfLocationFile} ] ] [ list __entry-call_foreign-read ${v:t:170} ${wfilename:newFile} ${u:newFile} ${u:vcfLocationFile} ]
    turbine::rule [ list ${u:vcfFileName} ] "__entry-copy_in_filename {${u:newFile}} ${u:vcfFileName}"
    turbine::decr_local_file_refcount v:outputfile:2
    turbine::decr_local_file_refcount v:outLog:2
}


proc __entry-call_foreign-read { v:t:170 wfilename:newFile u:newFile u:vcfLocationFile } {
    # Var: $file v:vcfLocationFile:1 VALUE_OF [file:vcfLocationFile]
    # Var: $string v:original VALUE_OF [string:original]
    # Var: $string v:appended VALUE_OF [string:appended]
    set v:vcfLocationFile:1 [ turbine::retrieve_file ${u:vcfLocationFile} CACHED 1 ]
    set v:original [ turbine::file_read_local ${v:vcfLocationFile:1} ]
    set v:appended "${v:original}${v:t:170}"
    turbine::rule [ list ${wfilename:newFile} ] [ list __entry-call_foreign-write ${v:appended} ${wfilename:newFile} ${u:newFile} ]
}


proc __entry-call_foreign-write { v:appended wfilename:newFile u:newFile } {
    # Var: $file v:newFile VALUE_OF [file:newFile]
    # Var: $string v:__wfilename:newFile VALUE_OF [string:__wfilename:newFile]
    set v:__wfilename:newFile [ turbine::retrieve_string ${wfilename:newFile} CACHED 1 ]
    set tcltmp:init_rc 2
    set v:newFile [ turbine::create_local_file_ref ${v:__wfilename:newFile} ${tcltmp:init_rc} 1 ]
    turbine::file_write_local v:newFile ${v:appended}
    turbine::store_file ${u:newFile} v:newFile 0
}


proc __entry-copy_in_filename { u:newFile u:vcfFileName } {
    # Var: $string v:vcfFileName:3 VALUE_OF [string:vcfFileName]
    set v:vcfFileName:3 [ turbine::retrieve_string ${u:vcfFileName} CACHED 1 ]
    turbine::set_filename_val ${u:newFile} ${v:vcfFileName:3}
}


proc __entry-async_op-parse_int-2 { t:23:3 t:24:3 } {
    # Var: $string v:t:24:3 VALUE_OF [string:__t:24:3]
    # Var: $int v:t:23:3 VALUE_OF [int:__t:23:3]
    set v:t:24:3 [ turbine::retrieve_string ${t:24:3} CACHED 1 ]
    set v:t:23:3 [ turbine::parse_int_impl ${v:t:24:3} 10 ]
    turbine::store_integer ${t:23:3} ${v:t:23:3}
}


proc __entry-optmerged-2 { t:11:3 t:12:3 t:15:3 t:17:3 t:21:3 } {
    # Var: $string v:t:12:3 VALUE_OF [string:__t:12:3]
    set v:t:12:3 [ turbine::retrieve_string ${t:12:3} CACHED 1 ]
    turbine::rule [ list ${t:15:3} ] [ list __entry-async_op-strcat-2 ${t:11:3} ${t:15:3} ${v:t:12:3} ]
    turbine::rule [ list ${t:21:3} ] [ list __entry-async_op-strcat-3 ${t:17:3} ${t:21:3} ${v:t:12:3} ]
}


proc __entry-async_op-strcat-2 { t:11:3 t:15:3 v:t:12:3 } {
    # Var: $string v:t:15:3 VALUE_OF [string:__t:15:3]
    # Var: $string v:t:11:3 VALUE_OF [string:__t:11:3]
    set v:t:15:3 [ turbine::retrieve_string ${t:15:3} CACHED 1 ]
    set v:t:11:3 "${v:t:12:3}/${v:t:15:3}"
    turbine::store_string ${t:11:3} ${v:t:11:3}
}


proc __entry-async_op-strcat-3 { t:17:3 t:21:3 v:t:12:3 } {
    # Var: $string v:t:21:3 VALUE_OF [string:__t:21:3]
    # Var: $string v:t:17:3 VALUE_OF [string:__t:17:3]
    set v:t:21:3 [ turbine::retrieve_string ${t:21:3} CACHED 1 ]
    set v:t:17:3 "${v:t:12:3}/${v:t:21:3}"
    turbine::store_string ${t:17:3} ${v:t:17:3}
}


proc __entry-optmerged-3 { u:VarcallDir t:11:3 t:17:3 t:23:3 t:7:3 t:9:3 v:alias:sampleName v:t:116 u:gvcfSample:1 u:haploLog:1 u:recalibratedbam u:vcfFileName u:vcfLocationFile } {
    # Var: $string v:VarcallDir:3 VALUE_OF [string:VarcallDir]
    # Var: $string v:t:173 VALUE_OF [string:__t:173]
    # Var: $string v:t:5:3 VALUE_OF [string:__t:5:3]
    set v:VarcallDir:3 [ turbine::retrieve_string ${u:VarcallDir} CACHED 1 ]
    set v:t:173 "${v:VarcallDir:3}${v:alias:sampleName}.raw.g.vcf"
    set v:t:5:3 "${v:VarcallDir:3}${v:alias:sampleName}_HaplotypeCaller.log"
    turbine::set_filename_val ${u:gvcfSample:1} ${v:t:173}
    turbine::set_filename_val ${u:haploLog:1} ${v:t:5:3}
    turbine::rule [ list ${t:11:3} ${t:17:3} ${t:23:3} ${t:7:3} ${t:9:3} [ turbine::get_file_td ${u:recalibratedbam} ] ] [ list HaplotypeCaller-app-leaf1-1 ${t:11:3} ${t:17:3} ${t:23:3} ${t:7:3} ${t:9:3} ${v:t:116} ${v:t:173} ${v:t:5:3} ${u:gvcfSample:1} ${u:haploLog:1} ${u:recalibratedbam} ${u:vcfFileName} ${u:vcfLocationFile} ]
}


proc HaplotypeCaller-app-leaf1-1 { t:11:3 t:17:3 t:23:3 t:7:3 t:9:3 v:t:116 v:t:173 v:t:5:3 u:gvcfSample:1 u:haploLog:1 u:recalibratedbam u:vcfFileName u:vcfLocationFile } {
    # Var: $string v:javadir:3 RENAMED [$string:__v:javadir] ./bioapps/realign_varcal.swift:HaplotypeCaller():120:9
    # Var: $string v:gatkdir:3 RENAMED [$string:__v:gatkdir] ./bioapps/realign_varcal.swift:HaplotypeCaller():120:9
    # Var: $string v:reference:3 RENAMED [$string:__v:reference] ./bioapps/realign_varcal.swift:HaplotypeCaller():120:9
    # Var: $string v:dbsnp:1 RENAMED [$string:__v:dbsnp] ./bioapps/realign_varcal.swift:HaplotypeCaller():120:9
    # Var: $int v:thr:2 RENAMED [$int:__v:thr] ./bioapps/realign_varcal.swift:HaplotypeCaller():120:9
    # Var: $file v:inputFile:3 RENAMED [$file:__v:inputFile] ./bioapps/realign_varcal.swift:HaplotypeCaller():120:9
    # Var: $file v:outputfile:3 RENAMED [$file:__v:outputfile] ./bioapps/realign_varcal.swift:HaplotypeCaller():120:9
    # Var: $file v:outLog:3 RENAMED [$file:__v:outLog] ./bioapps/realign_varcal.swift:HaplotypeCaller():120:9
    # Var: $string v:t:175 VALUE_OF [string:__t:175]
    # Var: file u:newFile:1 RENAMED [file:newFile] ./generalfunctions/general.swift:append():12:17
    lassign [ turbine::make_file_tds [ adlb::multicreate [ list file 1 1 65 ] ] [ list 1 ] ] u:newFile:1
    set v:javadir:3 [ turbine::retrieve_string ${t:7:3} CACHED 1 ]
    set v:gatkdir:3 [ turbine::retrieve_string ${t:9:3} CACHED 1 ]
    set v:reference:3 [ turbine::retrieve_string ${t:11:3} CACHED 1 ]
    set v:dbsnp:1 [ turbine::retrieve_string ${t:17:3} CACHED 1 ]
    set v:thr:2 [ turbine::retrieve_integer ${t:23:3} CACHED 1 ]
    set v:inputFile:3 [ turbine::retrieve_file ${u:recalibratedbam} CACHED 1 ]
    set tcltmp:init_rc 2
    set v:outputfile:3 [ turbine::create_local_file_ref ${v:t:173} ${tcltmp:init_rc} 1 ]
    set tcltmp:init_rc 2
    set v:outLog:3 [ turbine::create_local_file_ref ${v:t:5:3} ${tcltmp:init_rc} 1 ]
    turbine::c::log [ list exec: __v:javadir:3 "-Xmx8g" "-jar" ${v:gatkdir:3} "-T" "HaplotypeCaller" "-R" ${v:reference:3} "-I" ${v:t:116} "--dbsnp" ${v:dbsnp:1} "-o" ${v:t:173} "--emitRefConfidence" "GVCF" "-gt_mode" "DISCOVERY" "-A" "Coverage" "-A" "FisherStrand" "-A" "StrandOddsRatio" "-A" "HaplotypeScore" "-A" "MappingQualityRankSumTest" "-A" "QualByDepth" "-A" "RMSMappingQuality" "-A" "ReadPosRankSumTest" "-stand_call_conf" 30 "-stand_emit_conf" 30 "-nt" 1 "-nct" ${v:thr:2} [ dict create "stderr" ${v:t:5:3} ] ]
    turbine::exec_external ${v:javadir:3} [ dict create "stderr" ${v:t:5:3} ] "-Xmx8g" "-jar" ${v:gatkdir:3} "-T" "HaplotypeCaller" "-R" ${v:reference:3} "-I" ${v:t:116} "--dbsnp" ${v:dbsnp:1} "-o" ${v:t:173} "--emitRefConfidence" "GVCF" "-gt_mode" "DISCOVERY" "-A" "Coverage" "-A" "FisherStrand" "-A" "StrandOddsRatio" "-A" "HaplotypeScore" "-A" "MappingQualityRankSumTest" "-A" "QualByDepth" "-A" "RMSMappingQuality" "-A" "ReadPosRankSumTest" "-stand_call_conf" 30 "-stand_emit_conf" 30 "-nt" 1 "-nct" ${v:thr:2}
    turbine::store_file ${u:gvcfSample:1} v:outputfile:3 0
    turbine::store_file ${u:haploLog:1} v:outLog:3 0
    set v:t:175 "${v:t:173}\n"
    set wfilename:newFile:1 [ turbine::get_file_path ${u:newFile:1} ]
    turbine::rule [ list [ turbine::get_file_td ${u:vcfLocationFile} ] ] [ list __entry-call_foreign-read-1 ${v:t:175} ${wfilename:newFile:1} ${u:newFile:1} ${u:vcfLocationFile} ]
    turbine::rule [ list ${u:vcfFileName} ] "__entry-copy_in_filename-1 {${u:newFile:1}} ${u:vcfFileName}"
    turbine::decr_local_file_refcount v:outputfile:3
    turbine::decr_local_file_refcount v:outLog:3
}


proc __entry-call_foreign-read-1 { v:t:175 wfilename:newFile:1 u:newFile:1 u:vcfLocationFile } {
    # Var: $file v:vcfLocationFile:2 VALUE_OF [file:vcfLocationFile]
    # Var: $string v:original:1:1 VALUE_OF [string:original:1]
    # Var: $string v:appended:1:1 VALUE_OF [string:appended:1]
    set v:vcfLocationFile:2 [ turbine::retrieve_file ${u:vcfLocationFile} CACHED 1 ]
    set v:original:1:1 [ turbine::file_read_local ${v:vcfLocationFile:2} ]
    set v:appended:1:1 "${v:original:1:1}${v:t:175}"
    turbine::rule [ list ${wfilename:newFile:1} ] [ list __entry-call_foreign-write-1 ${v:appended:1:1} ${wfilename:newFile:1} ${u:newFile:1} ]
}


proc __entry-call_foreign-write-1 { v:appended:1:1 wfilename:newFile:1 u:newFile:1 } {
    # Var: $file v:newFile:1 VALUE_OF [file:newFile:1]
    # Var: $string v:__wfilename:newFile:1 VALUE_OF [string:__wfilename:newFile:1]
    set v:__wfilename:newFile:1 [ turbine::retrieve_string ${wfilename:newFile:1} CACHED 1 ]
    set tcltmp:init_rc 2
    set v:newFile:1 [ turbine::create_local_file_ref ${v:__wfilename:newFile:1} ${tcltmp:init_rc} 1 ]
    turbine::file_write_local v:newFile:1 ${v:appended:1:1}
    turbine::store_file ${u:newFile:1} v:newFile:1 0
}


proc __entry-copy_in_filename-1 { u:newFile:1 u:vcfFileName } {
    # Var: $string v:vcfFileName:4 VALUE_OF [string:vcfFileName]
    set v:vcfFileName:4 [ turbine::retrieve_string ${u:vcfFileName} CACHED 1 ]
    turbine::set_filename_val ${u:newFile:1} ${v:vcfFileName:4}
}


proc __entry-copy_in_filename-2 { u:vcfFileName u:vcfLocationFile } {
    # Var: $string v:vcfFileName:2 VALUE_OF [string:vcfFileName]
    set v:vcfFileName:2 [ turbine::retrieve_string ${u:vcfFileName} CACHED 1 ]
    turbine::set_filename_val ${u:vcfLocationFile} ${v:vcfFileName:2}
}


proc __entry-call_foreign-write-2 { wfilename:vcfLocationFile u:vcfLocationFile } {
    # Var: $file v:vcfLocationFile VALUE_OF [file:vcfLocationFile]
    # Var: $string v:__wfilename:vcfLocationFile VALUE_OF [string:__wfilename:vcfLocationFile]
    set v:__wfilename:vcfLocationFile [ turbine::retrieve_string ${wfilename:vcfLocationFile} CACHED 1 ]
    set tcltmp:init_rc 2
    set v:vcfLocationFile [ turbine::create_local_file_ref ${v:__wfilename:vcfLocationFile} ${tcltmp:init_rc} 1 ]
    turbine::file_write_local v:vcfLocationFile ""
    turbine::store_file ${u:vcfLocationFile} v:vcfLocationFile 0
}


proc __entry-async_op-strcat-4 { u:VarcallDir t:134 v:alias:sampleName } {
    # Var: $string v:t:134 VALUE_OF [string:__t:134]
    # Var: $string v:VarcallDir VALUE_OF [string:VarcallDir]
    set v:t:134 [ turbine::retrieve_string ${t:134} CACHED 1 ]
    set v:VarcallDir "${v:t:134}/${v:alias:sampleName}/variant/"
    turbine::store_string ${u:VarcallDir} ${v:VarcallDir}
}


proc __entry-async_op-or { t:11 t:12 t:31 v:chrFile v:directory u:realparms u:recalparmsindels u:vcfFileName } {
    # Var: $boolean v:t:12:1 VALUE_OF [boolean:__t:12]
    # Var: $boolean v:t:31:1 VALUE_OF [boolean:__t:31]
    # Var: $boolean v:t:11 VALUE_OF [boolean:__t:11]
    set v:t:12:1 [ turbine::retrieve_integer ${t:12} CACHED 1 ]
    set v:t:31:1 [ turbine::retrieve_integer ${t:31} CACHED 1 ]
    set v:t:11 [ expr { ${v:t:12:1} || ${v:t:31:1} } ]
    turbine::store_integer ${t:11} ${v:t:11}
    turbine::rule [ list ] [ list __entry-if1 ${v:chrFile} ${v:directory} ${v:t:11} ${u:realparms} ${u:recalparmsindels} ${u:vcfFileName} ]
}


proc __entry-if1 { v:chrFile v:directory v:t:11 u:realparms u:recalparmsindels u:vcfFileName } {
    if { ${v:t:11} } {
        # Var: string c:s_sknown_g OPT_TEMPORARY
        global c:s_sknown_g
        # Var: string[string] u:vars /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:148:0
        global u:vars
        # Var: string c:s_sknownSite OPT_TEMPORARY
        global c:s_sknownSite
        # Var: string[int] u:splitPath /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():185:2
        # Var: string[int] t:36 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():186:15
        # Var: string t:44 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():191:20
        # Var: string t:45 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():191:27
        # Var: file u:recalfiles /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():191:53
        # Var: string t:49 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():192:26
        # Var: string t:50 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():192:33
        # Var: string t:53 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():192:60
        # Var: string t:56 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():193:5
        # Var: file t:62 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():198:25
        # Var: file t:71 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():200:49
        # Var: $string$[int] v:splitPath VALUE_OF [string[int]:splitPath]
        # Var: $int v:t:39 VALUE_OF [int:__t:39]
        # Var: $int v:t:38 VALUE_OF [int:__t:38]
        # Var: $string v:t:37 VALUE_OF [string:__t:37]
        # Var: $string$[int] v:t:36 VALUE_OF [string[int]:__t:36]
        # Var: $string v:alias:chr VALUE_OF [string:__alias:chr]
        # Var: $string v:vcfFileName VALUE_OF [string:vcfFileName]
        # Var: $string v:t:56 VALUE_OF [string:__t:56]
        lassign [ adlb::multicreate [ list container integer string 1 1 66 ] [ list container integer string 1 2 67 ] [ list string 1 1 68 ] [ list string 1 1 69 ] [ list string 1 1 71 ] [ list string 1 1 72 ] [ list string 1 1 73 ] [ list string 1 1 74 ] ] u:splitPath t:36 t:44 t:45 t:49 t:50 t:53 t:56
        turbine::c::log "allocated u:splitPath=<${u:splitPath}> t:36=<${t:36}> t:44=<${t:44}> t:45=<${t:45}> t:49=<${t:49}>"
        turbine::c::log "allocated t:50=<${t:50}> t:53=<${t:53}> t:56=<${t:56}>"
        lassign [ turbine::make_file_tds [ adlb::multicreate [ list file 1 1 70 ] [ list file 1 1 75 ] [ list file 1 1 76 ] ] [ list 1 0 0 ] ] u:recalfiles t:62 t:71
        set v:splitPath [ turbine::split_impl ${v:chrFile} "/" ]
        turbine::build_rec ${u:splitPath} ${v:splitPath} [ list container integer string ] 0 1
        set v:t:39 [ dict size ${v:splitPath} ]
        set v:t:38 [ expr { ${v:t:39} - 1 } ]
        set v:t:37 [ turbine::container_lookup ${u:splitPath} ${v:t:38} 1 0 ]
        set v:t:36 [ turbine::split_impl ${v:t:37} "_" ]
        turbine::build_rec ${t:36} ${v:t:36} [ list container integer string ] 0 1
        set a:chr [ adlb::subscript_container ${t:36} 0 ]
        set v:alias:chr [ turbine::retrieve_string ${a:chr} CACHED 1 ]
        set v:vcfFileName "${v:directory}/${v:alias:chr}_vcf_list.txt"
        turbine::store_string ${u:vcfFileName} ${v:vcfFileName}
        turbine::container_reference ${u:vars} "TMPDIR" ${t:45} string
        turbine::container_reference ${u:vars} "REFGENOMEDIR" ${t:50} string
        turbine::container_reference ${u:vars} "INDELDIR" ${t:53} string
        set v:t:56 "*${v:alias:chr}.vcf"
        turbine::store_string ${t:56} ${v:t:56}
        f:find_files ${u:recalfiles} ${t:49} ${t:56} -100 "HARD" "RANK"
        f:sed ${t:62} ${u:recalfiles} ${c:s_sknownSite} -100 "HARD" "RANK"
        f:sed ${t:71} ${u:recalfiles} ${c:s_sknown_g} -100 "HARD" "RANK"
        turbine::rule [ list ${t:45} ] [ list __entry-async_op-strcat-5 ${t:44} ${t:45} ${v:alias:chr} ${u:recalfiles} ]
        turbine::rule [ list ${t:50} ${t:53} ] "__entry-async_op-strcat-6 ${t:49} ${t:50} ${t:53}"
        turbine::rule [ list [ turbine::get_file_td ${t:62} ] ] "__entry-call_foreign-read-2 {${t:62}} ${u:recalparmsindels}"
        turbine::rule [ list [ turbine::get_file_td ${t:71} ] ] "__entry-call_foreign-read-3 ${t:44} {${t:71}} ${u:realparms} {${u:recalfiles}}"
        turbine::read_refcount_decr ${t:56} 1
        turbine::read_refcount_decr ${t:49} 1
        adlb::write_refcount_decr ${t:36} 1
    } else {
        # Var: string c:s_sknown_g OPT_TEMPORARY
        global c:s_sknown_g
        # Var: string c:s__vcf-1 OPT_TEMPORARY
        global c:s__vcf-1
        # Var: string[string] u:vars /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:148:0
        global u:vars
        # Var: string c:s_sknownSite OPT_TEMPORARY
        global c:s_sknownSite
        # Var: string t:79 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():207:20
        # Var: string t:80 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():207:27
        # Var: file u:recalfiles:1 RENAMED [file:recalfiles] /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():207:43
        # Var: string t:83 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():208:26
        # Var: string t:84 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():208:33
        # Var: string t:87 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():208:60
        # Var: file t:96 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():212:25
        # Var: file t:105 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:__entry():214:42
        # Var: $string v:vcfFileName:1 VALUE_OF [string:vcfFileName]
        lassign [ adlb::multicreate [ list string 1 1 77 ] [ list string 1 1 78 ] [ list string 1 1 80 ] [ list string 1 1 81 ] [ list string 1 1 82 ] ] t:79 t:80 t:83 t:84 t:87
        turbine::c::log "allocated t:79=<${t:79}> t:80=<${t:80}> t:83=<${t:83}> t:84=<${t:84}> t:87=<${t:87}>"
        lassign [ turbine::make_file_tds [ adlb::multicreate [ list file 1 1 79 ] [ list file 1 1 83 ] [ list file 1 1 84 ] ] [ list 1 0 0 ] ] u:recalfiles:1 t:96 t:105
        set v:vcfFileName:1 "${v:directory}/vcf_list.txt"
        turbine::store_string ${u:vcfFileName} ${v:vcfFileName:1}
        turbine::container_reference ${u:vars} "TMPDIR" ${t:80} string
        turbine::container_reference ${u:vars} "REFGENOMEDIR" ${t:84} string
        turbine::container_reference ${u:vars} "INDELDIR" ${t:87} string
        f:find_files ${u:recalfiles:1} ${t:83} ${c:s__vcf-1} -100 "HARD" "RANK"
        f:sed ${t:96} ${u:recalfiles:1} ${c:s_sknownSite} -100 "HARD" "RANK"
        f:sed ${t:105} ${u:recalfiles:1} ${c:s_sknown_g} -100 "HARD" "RANK"
        turbine::rule [ list ${t:80} ] "__entry-async_op-strcat-7 ${t:79} ${t:80} {${u:recalfiles:1}}"
        turbine::rule [ list ${t:84} ${t:87} ] "__entry-async_op-strcat-8 ${t:83} ${t:84} ${t:87}"
        turbine::rule [ list [ turbine::get_file_td ${t:96} ] ] "__entry-call_foreign-read-4 {${t:96}} ${u:recalparmsindels}"
        turbine::rule [ list [ turbine::get_file_td ${t:105} ] ] "__entry-call_foreign-read-5 {${t:105}} ${t:79} ${u:realparms} {${u:recalfiles:1}}"
        turbine::read_refcount_decr ${t:83} 1
    }
}


proc __entry-async_op-strcat-5 { t:44 t:45 v:alias:chr u:recalfiles } {
    # Var: $string v:t:45 VALUE_OF [string:__t:45]
    # Var: $string v:t:44 VALUE_OF [string:__t:44]
    set v:t:45 [ turbine::retrieve_string ${t:45} CACHED 1 ]
    set v:t:44 "${v:t:45}/${v:alias:chr}.recal_foundfiles.txt"
    turbine::store_string ${t:44} ${v:t:44}
    turbine::set_filename_val ${u:recalfiles} ${v:t:44}
}


proc __entry-async_op-strcat-6 { t:49 t:50 t:53 } {
    # Var: $string v:t:50 VALUE_OF [string:__t:50]
    # Var: $string v:t:53 VALUE_OF [string:__t:53]
    # Var: $string v:t:49 VALUE_OF [string:__t:49]
    set v:t:50 [ turbine::retrieve_string ${t:50} CACHED 1 ]
    set v:t:53 [ turbine::retrieve_string ${t:53} CACHED 1 ]
    set v:t:49 "${v:t:50}/${v:t:53}/"
    turbine::store_string ${t:49} ${v:t:49}
}


proc __entry-call_foreign-read-2 { t:62 u:recalparmsindels } {
    # Var: $file v:t:62 VALUE_OF [file:__t:62]
    # Var: $string v:t:61 VALUE_OF [string:__t:61]
    # Var: $int v:n:1 RENAMED [$int:__v:n]
    # Var: $string v:t:60 VALUE_OF [string:__t:60]
    # Var: $string v:o RENAMED [$string:__v:o]
    # Var: $string$[int] v:recalparmsindels VALUE_OF [string[int]:recalparmsindels]
    set v:t:62 [ turbine::retrieve_file ${t:62} CACHED 1 ]
    set v:t:61 [ turbine::file_read_local ${v:t:62} ]
    set v:n:1 [ string length ${v:t:61} ]
    set v:t:60 [ turbine::replace_all_impl ${v:t:61} "\n" " " 0 ${v:n:1} ]
    set v:o [ string trim ${v:t:60} ]
    set v:recalparmsindels [ turbine::split_impl ${v:o} " " ]
    turbine::build_rec ${u:recalparmsindels} ${v:recalparmsindels} [ list container integer string ] 0 1
}


proc __entry-call_foreign-read-3 { t:44 t:71 u:realparms u:recalfiles } {
    # Var: $file v:t:71 VALUE_OF [file:__t:71]
    # Var: $string v:t:70 VALUE_OF [string:__t:70]
    # Var: $int v:n:2 RENAMED [$int:__v:n]
    # Var: $string v:t:69 VALUE_OF [string:__t:69]
    # Var: $string v:o:1 RENAMED [$string:__v:o]
    # Var: $string$[int] v:realparms VALUE_OF [string[int]:realparms]
    set v:t:71 [ turbine::retrieve_file ${t:71} CACHED 1 ]
    set v:t:70 [ turbine::file_read_local ${v:t:71} ]
    set v:n:2 [ string length ${v:t:70} ]
    set v:t:69 [ turbine::replace_all_impl ${v:t:70} "\n" " " 0 ${v:n:2} ]
    set v:o:1 [ string trim ${v:t:69} ]
    set v:realparms [ turbine::split_impl ${v:o:1} " " ]
    turbine::build_rec ${u:realparms} ${v:realparms} [ list container integer string ] 0 1
    turbine::rule [ list ${t:44} [ turbine::get_file_td ${u:recalfiles} ] ] "__entry-chain1 ${t:44} {${u:recalfiles}}"
}


proc __entry-chain1 { t:44 u:recalfiles } {
    # Var: $string v:__filename:f RENAMED [$string:__v:__filename:f] ./generalfunctions/general.swift:rm():33:6
    # Var: $file v:f RENAMED [$file:__v:f] ./generalfunctions/general.swift:rm():33:6
    # Var: $void v:v RENAMED [$void:__v:v] ./generalfunctions/general.swift:rm():33:6
    set v:__filename:f [ turbine::retrieve_string ${t:44} CACHED 1 ]
    set v:f [ turbine::retrieve_file ${u:recalfiles} CACHED 1 ]
    turbine::c::log [ list exec: "rm" ${v:__filename:f} [ dict create ] ]
    turbine::exec_external "rm" [ dict create ] ${v:__filename:f}
}


proc __entry-async_op-strcat-7 { t:79 t:80 u:recalfiles:1 } {
    # Var: $string v:t:80 VALUE_OF [string:__t:80]
    # Var: $string v:t:79 VALUE_OF [string:__t:79]
    set v:t:80 [ turbine::retrieve_string ${t:80} CACHED 1 ]
    set v:t:79 "${v:t:80}/.recal_foundfiles.txt"
    turbine::store_string ${t:79} ${v:t:79}
    turbine::set_filename_val ${u:recalfiles:1} ${v:t:79}
}


proc __entry-async_op-strcat-8 { t:83 t:84 t:87 } {
    # Var: $string v:t:84 VALUE_OF [string:__t:84]
    # Var: $string v:t:87 VALUE_OF [string:__t:87]
    # Var: $string v:t:83 VALUE_OF [string:__t:83]
    set v:t:84 [ turbine::retrieve_string ${t:84} CACHED 1 ]
    set v:t:87 [ turbine::retrieve_string ${t:87} CACHED 1 ]
    set v:t:83 "${v:t:84}/${v:t:87}/"
    turbine::store_string ${t:83} ${v:t:83}
}


proc __entry-call_foreign-read-4 { t:96 u:recalparmsindels } {
    # Var: $file v:t:96 VALUE_OF [file:__t:96]
    # Var: $string v:t:95 VALUE_OF [string:__t:95]
    # Var: $int v:n:3 RENAMED [$int:__v:n]
    # Var: $string v:t:94 VALUE_OF [string:__t:94]
    # Var: $string v:o:2 RENAMED [$string:__v:o]
    # Var: $string$[int] v:recalparmsindels:1 VALUE_OF [string[int]:recalparmsindels]
    set v:t:96 [ turbine::retrieve_file ${t:96} CACHED 1 ]
    set v:t:95 [ turbine::file_read_local ${v:t:96} ]
    set v:n:3 [ string length ${v:t:95} ]
    set v:t:94 [ turbine::replace_all_impl ${v:t:95} "\n" " " 0 ${v:n:3} ]
    set v:o:2 [ string trim ${v:t:94} ]
    set v:recalparmsindels:1 [ turbine::split_impl ${v:o:2} " " ]
    turbine::build_rec ${u:recalparmsindels} ${v:recalparmsindels:1} [ list container integer string ] 0 1
}


proc __entry-call_foreign-read-5 { t:105 t:79 u:realparms u:recalfiles:1 } {
    # Var: $file v:t:105 VALUE_OF [file:__t:105]
    # Var: $string v:t:104 VALUE_OF [string:__t:104]
    # Var: $int v:n:4 RENAMED [$int:__v:n]
    # Var: $string v:t:103 VALUE_OF [string:__t:103]
    # Var: $string v:o:3 RENAMED [$string:__v:o]
    # Var: $string$[int] v:realparms:1 VALUE_OF [string[int]:realparms]
    set v:t:105 [ turbine::retrieve_file ${t:105} CACHED 1 ]
    set v:t:104 [ turbine::file_read_local ${v:t:105} ]
    set v:n:4 [ string length ${v:t:104} ]
    set v:t:103 [ turbine::replace_all_impl ${v:t:104} "\n" " " 0 ${v:n:4} ]
    set v:o:3 [ string trim ${v:t:103} ]
    set v:realparms:1 [ turbine::split_impl ${v:o:3} " " ]
    turbine::build_rec ${u:realparms} ${v:realparms:1} [ list container integer string ] 0 1
    turbine::rule [ list ${t:79} [ turbine::get_file_td ${u:recalfiles:1} ] ] "__entry-chain2 ${t:79} {${u:recalfiles:1}}"
}


proc __entry-chain2 { t:79 u:recalfiles:1 } {
    # Var: $string v:__filename:f:1 RENAMED [$string:__v:__filename:f] ./generalfunctions/general.swift:rm():33:6
    # Var: $file v:f:1 RENAMED [$file:__v:f] ./generalfunctions/general.swift:rm():33:6
    # Var: $void v:v:1 RENAMED [$void:__v:v] ./generalfunctions/general.swift:rm():33:6
    set v:__filename:f:1 [ turbine::retrieve_string ${t:79} CACHED 1 ]
    set v:f:1 [ turbine::retrieve_file ${u:recalfiles:1} CACHED 1 ]
    turbine::c::log [ list exec: "rm" ${v:__filename:f:1} [ dict create ] ]
    turbine::exec_external "rm" [ dict create ] ${v:__filename:f:1}
}


proc __entry-async_op-eq_string { t:118 t:119 } {
    # Var: $string v:t:119 VALUE_OF [string:__t:119]
    # Var: $boolean v:t:118 VALUE_OF [boolean:__t:118]
    set v:t:119 [ turbine::retrieve_string ${t:119} CACHED 1 ]
    set v:t:118 [ string equal ${v:t:119} "VC_REALIGN" ]
    turbine::store_integer ${t:118} ${v:t:118}
}


proc __entry-optmerged-4 { t:12 t:16 t:31 } {
    # Var: $string v:t:16 VALUE_OF [string:__t:16]
    # Var: $boolean v:t:15 VALUE_OF [boolean:__t:15]
    # Var: $boolean v:t:19 VALUE_OF [boolean:__t:19]
    # Var: $boolean v:t:23 VALUE_OF [boolean:__t:23]
    # Var: $boolean v:t:27 VALUE_OF [boolean:__t:27]
    # Var: $boolean v:t:31 VALUE_OF [boolean:__t:31]
    # Var: $boolean v:t:14 VALUE_OF [boolean:__t:14]
    # Var: $boolean v:t:13 VALUE_OF [boolean:__t:13]
    # Var: $boolean v:t:12 VALUE_OF [boolean:__t:12]
    set v:t:16 [ turbine::retrieve_string ${t:16} CACHED 1 ]
    set v:t:15 [ string equal ${v:t:16} "Yes" ]
    set v:t:19 [ string equal ${v:t:16} "Y" ]
    set v:t:23 [ string equal ${v:t:16} "y" ]
    set v:t:27 [ string equal ${v:t:16} "yes" ]
    set v:t:31 [ string equal ${v:t:16} "YES" ]
    turbine::store_integer ${t:31} ${v:t:31}
    set v:t:14 [ expr { ${v:t:15} || ${v:t:19} } ]
    set v:t:13 [ expr { ${v:t:14} || ${v:t:23} } ]
    set v:t:12 [ expr { ${v:t:13} || ${v:t:27} } ]
    turbine::store_integer ${t:12} ${v:t:12}
}


proc f:recalibrateBam { u:outBam u:prefix u:variables u:inputBam u:recalparmsindels } {
    turbine::c::log "function: recalibrateBam"
    # Var: string[string] u:vars /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:148:0
    global u:vars
    # Var: file u:recalLog /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:recalibrateBam():62:32
    # Var: file u:printLog /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:recalibrateBam():63:32
    # Var: file u:report /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:recalibrateBam():64:30
    # Var: string t:7 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:recalibrateBam():67:37
    # Var: string t:9 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:recalibrateBam():67:54
    # Var: string t:11 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:recalibrateBam():68:11
    # Var: string t:12 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:recalibrateBam():68:18
    # Var: string t:15 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:recalibrateBam():68:45
    # Var: int t:17 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:recalibrateBam():69:11
    # Var: string t:18 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:recalibrateBam():69:22
    # Var: string t:20 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:recalibrateBam():70:11
    # Var: string t:24 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:recalibrateBam():70:45
    # Var: boolean t:39 EXPR_TEMPORARY /ui/ncsa/jacobrh/Swift-T-Variant-Calling/src/RealignRecalAndVC.swift:recalibrateBam():76:1
    # Var: $boolean v:mapped_outputfile:2 RENAMED [$boolean:__v:mapped_outputfile]
    lassign [ adlb::multicreate [ list string 1 1 88 ] [ list string 1 1 89 ] [ list string 1 1 90 ] [ list string 1 1 91 ] [ list string 1 1 92 ] [ list integer 1 1 93 ] [ list string 1 1 94 ] [ list string 1 1 95 ] [ list string 1 1 96 ] [ list integer 0 1 97 ] ] t:7 t:9 t:11 t:12 t:15 t:17 t:18 t:20 t:24 t:39
    turbine::c::log "allocated t:7=<${t:7}> t:9=<${t:9}> t:11=<${t:11}> t:12=<${t:12}> t:15=<${t:15}>"
    turbine::c::log "allocated t:17=<${t:17}> t:18=<${t:18}> t:20=<${t:20}> t:24=<${t:24}> t:39=<${t:39}>"
    lassign [ turbine::make_file_tds [ adlb::multicreate [ list file 0 1 85 ] [ list file 0 1 86 ] [ list file 1 1 87 ] ] [ list 1 1 1 ] ] u:recalLog u:printLog u:report
    turbine::file_read_refcount_incr ${u:outBam} 1
    turbine::file_read_refcount_incr ${u:inputBam} 1
    turbine::container_reference ${u:vars} "JAVADIR" ${t:7} string
    turbine::container_reference ${u:vars} "GATKDIR" ${t:9} string
    turbine::container_reference ${u:vars} "REFGENOMEDIR" ${t:12} string
    turbine::container_reference ${u:vars} "REFGENOME" ${t:15} string
    turbine::container_reference ${u:vars} "PBSCORES" ${t:18} string
    turbine::container_reference ${u:vars} "DBSNP" ${t:24} string
    set filename:inputFile [ turbine::get_file_path ${u:inputBam} ]
    set v:mapped_outputfile:2 [ turbine::is_file_mapped ${u:outBam} ]
    set filename:outputfile:1 [ turbine::get_file_path ${u:outBam} ]
    if { ${v:mapped_outputfile:2} } {
    } else {
        # Var: $string optf:outputfile:1 RENAMED [$string:__of:outputfile]
        set optf:outputfile:1 [ turbine::mktemp ]
        turbine::set_filename_val ${u:outBam} ${optf:outputfile:1}
    }
    turbine::rule [ list ${t:18} ] "recalibrateBam-async_op-parse_int ${t:17} ${t:18}"
    turbine::rule [ list ${u:prefix} ] "recalibrateBam-optmerged {${filename:inputFile}} {${filename:outputfile:1}} ${t:11} ${t:17} ${t:20} ${t:39} ${t:7} ${t:9} ${v:mapped_outputfile:2} {${u:inputBam}} {${u:outBam}} {${u:prefix}} {${u:printLog}} {${u:recalLog}} {${u:recalparmsindels}} {${u:report}} {${u:variables}}"
    turbine::rule [ list ${t:12} ] "recalibrateBam-optmerged-1 ${t:11} ${t:12} ${t:15} ${t:20} ${t:24}"
}


proc recalibrateBam-async_op-parse_int { t:17 t:18 } {
    # Var: $string v:t:18 VALUE_OF [string:__t:18]
    # Var: $int v:t:17 VALUE_OF [int:__t:17]
    set v:t:18 [ turbine::retrieve_string ${t:18} CACHED 1 ]
    set v:t:17 [ turbine::parse_int_impl ${v:t:18} 10 ]
    turbine::store_integer ${t:17} ${v:t:17}
}


proc recalibrateBam-optmerged { filename:inputFile filename:outputfile:1 t:11 t:17 t:20 t:39 t:7 t:9 v:mapped_outputfile:2 u:inputBam u:outBam u:prefix u:printLog u:recalLog u:recalparmsindels u:report u:variables } {
    # Var: $string v:prefix VALUE_OF [string:prefix]
    # Var: $string v:t:1 VALUE_OF [string:__t:1]
    # Var: $string v:t:3 VALUE_OF [string:__t:3]
    # Var: $string v:t:5 VALUE_OF [string:__t:5]
    set v:prefix [ turbine::retrieve_string ${u:prefix} CACHED 1 ]
    set v:t:1 "${v:prefix}_BaseRecalibrator.log"
    set v:t:3 "${v:prefix}_PrintReads.log"
    set v:t:5 "${v:prefix}.recal_report.grp"
    turbine::set_filename_val ${u:recalLog} ${v:t:1}
    turbine::set_filename_val ${u:printLog} ${v:t:3}
    turbine::set_filename_val ${u:report} ${v:t:5}
    turbine::rule [ list ${filename:inputFile} ${t:11} ${t:17} ${t:20} ${t:7} ${t:9} [ turbine::get_file_td ${u:inputBam} ] ${u:recalparmsindels} ] [ list BaseRecalibrator-app-leaf1 ${filename:inputFile} ${filename:outputfile:1} ${t:11} ${t:17} ${t:20} ${t:39} ${t:7} ${t:9} ${v:mapped_outputfile:2} ${v:t:1} ${v:t:3} ${v:t:5} ${u:inputBam} ${u:outBam} ${u:printLog} ${u:recalLog} ${u:recalparmsindels} ${u:report} ${u:variables} ]
}


proc BaseRecalibrator-app-leaf1 { filename:inputFile filename:outputfile:1 t:11 t:17 t:20 t:39 t:7 t:9 v:mapped_outputfile:2 v:t:1 v:t:3 v:t:5 u:inputBam u:outBam u:printLog u:recalLog u:recalparmsindels u:report u:variables } {
    # Var: $string v:javadir RENAMED [$string:__v:javadir] ./bioapps/realign_varcal.swift:BaseRecalibrator():47:9
    # Var: $string v:gatkdir RENAMED [$string:__v:gatkdir] ./bioapps/realign_varcal.swift:BaseRecalibrator():47:9
    # Var: $string v:reference RENAMED [$string:__v:reference] ./bioapps/realign_varcal.swift:BaseRecalibrator():47:9
    # Var: $string v:__filename:inputFile RENAMED [$string:__v:__filename:inputFile] ./bioapps/realign_varcal.swift:BaseRecalibrator():47:9
    # Var: $string v:dbsnp RENAMED [$string:__v:dbsnp] ./bioapps/realign_varcal.swift:BaseRecalibrator():47:9
    # Var: $string$[int] v:knownindels RENAMED [$string$[int]:__v:knownindels] ./bioapps/realign_varcal.swift:BaseRecalibrator():47:9
    # Var: $int v:thr RENAMED [$int:__v:thr] ./bioapps/realign_varcal.swift:BaseRecalibrator():47:9
    # Var: $file v:inputFile RENAMED [$file:__v:inputFile] ./bioapps/realign_varcal.swift:BaseRecalibrator():47:9
    # Var: $file v:outputfile RENAMED [$file:__v:outputfile] ./bioapps/realign_varcal.swift:BaseRecalibrator():47:9
    # Var: $file v:outLog RENAMED [$file:__v:outLog] ./bioapps/realign_varcal.swift:BaseRecalibrator():47:9
    set v:javadir [ turbine::retrieve_string ${t:7} CACHED 1 ]
    set v:gatkdir [ turbine::retrieve_string ${t:9} CACHED 1 ]
    set v:reference [ turbine::retrieve_string ${t:11} CACHED 1 ]
    set v:__filename:inputFile [ turbine::retrieve_string ${filename:inputFile} ]
    set v:dbsnp [ turbine::retrieve_string ${t:20} CACHED 1 ]
    set v:knownindels [ turbine::unpack_args ${u:recalparmsindels} 1 string ]
    set v:thr [ turbine::retrieve_integer ${t:17} CACHED 1 ]
    set v:inputFile [ turbine::retrieve_file ${u:inputBam} ]
    set tcltmp:init_rc 2
    set v:outputfile [ turbine::create_local_file_ref ${v:t:5} ${tcltmp:init_rc} 1 ]
    set tcltmp:init_rc 2
    set v:outLog [ turbine::create_local_file_ref ${v:t:1} ${tcltmp:init_rc} 1 ]
    turbine::c::log [ list exec: __v:javadir "-Xmx16g" "-jar" ${v:gatkdir} "-T" "BaseRecalibrator" "-R" ${v:reference} "-I" ${v:__filename:inputFile} "-knownSites" ${v:dbsnp} {*}${v:knownindels} "-nct" ${v:thr} "-o" ${v:t:5} [ dict create "stderr" ${v:t:1} ] ]
    turbine::exec_external ${v:javadir} [ dict create "stderr" ${v:t:1} ] "-Xmx16g" "-jar" ${v:gatkdir} "-T" "BaseRecalibrator" "-R" ${v:reference} "-I" ${v:__filename:inputFile} "-knownSites" ${v:dbsnp} {*}${v:knownindels} "-nct" ${v:thr} "-o" ${v:t:5}
    turbine::store_file ${u:report} v:outputfile 0
    turbine::store_file ${u:recalLog} v:outLog 0
    turbine::rule [ list ${filename:outputfile:1} ] [ list PrintReads-app-leaf1 ${filename:outputfile:1} ${t:39} ${v:__filename:inputFile} ${v:gatkdir} ${v:javadir} ${v:mapped_outputfile:2} ${v:reference} ${v:t:3} ${v:t:5} ${v:thr} ${u:inputBam} ${u:outBam} ${u:printLog} ${u:report} ${u:variables} ]
    turbine::decr_local_file_refcount v:outputfile
    turbine::decr_local_file_refcount v:outLog
    turbine::file_read_refcount_decr ${u:inputBam} 1
    turbine::read_refcount_decr ${u:recalparmsindels} 1
}


proc PrintReads-app-leaf1 { filename:outputfile:1 t:39 v:__filename:inputFile v:gatkdir v:javadir v:mapped_outputfile:2 v:reference v:t:3 v:t:5 v:thr u:inputBam u:outBam u:printLog u:report u:variables } {
    # Var: $string v:__filename:outputfile:1 RENAMED [$string:__v:__filename:outputfile] ./bioapps/realign_varcal.swift:PrintReads():61:9
    # Var: $file v:inputFile:1 RENAMED [$file:__v:inputFile] ./bioapps/realign_varcal.swift:PrintReads():61:9
    # Var: $file v:recalreport RENAMED [$file:__v:recalreport] ./bioapps/realign_varcal.swift:PrintReads():61:9
    # Var: $file v:outputfile:1 RENAMED [$file:__v:outputfile] ./bioapps/realign_varcal.swift:PrintReads():61:9
    # Var: $file v:outLog:1 RENAMED [$file:__v:outLog] ./bioapps/realign_varcal.swift:PrintReads():61:9
    # Var: $boolean v:4:1 RENAMED [$boolean:__v:4] ./bioapps/realign_varcal.swift:PrintReads():61:9
    set v:__filename:outputfile:1 [ turbine::retrieve_string ${filename:outputfile:1} ]
    set v:inputFile:1 [ turbine::retrieve_file ${u:inputBam} CACHED 1 ]
    set v:recalreport [ turbine::retrieve_file ${u:report} CACHED 1 ]
    if { ${v:mapped_outputfile:2} } {
        set tcltmp:init_rc 2
    } else {
        set tcltmp:init_rc 1
    }
    set v:outputfile:1 [ turbine::create_local_file_ref ${v:__filename:outputfile:1} ${tcltmp:init_rc} ${v:mapped_outputfile:2} ]
    set tcltmp:init_rc 2
    set v:outLog:1 [ turbine::create_local_file_ref ${v:t:3} ${tcltmp:init_rc} 1 ]
    turbine::c::log [ list exec: __v:javadir "-Xmx16g" "-jar" ${v:gatkdir} "-T" "PrintReads" "-R" ${v:reference} "-I" ${v:__filename:inputFile} "-BQSR" ${v:t:5} "-nct" ${v:thr} "--out" ${v:__filename:outputfile:1} [ dict create "stderr" ${v:t:3} ] ]
    turbine::exec_external ${v:javadir} [ dict create "stderr" ${v:t:3} ] "-Xmx16g" "-jar" ${v:gatkdir} "-T" "PrintReads" "-R" ${v:reference} "-I" ${v:__filename:inputFile} "-BQSR" ${v:t:5} "-nct" ${v:thr} "--out" ${v:__filename:outputfile:1}
    set v:4:1 [ expr { ! ${v:mapped_outputfile:2} } ]
    turbine::store_file ${u:outBam} v:outputfile:1 ${v:4:1}
    turbine::rule [ list [ turbine::get_file_td ${u:outBam} ] ] "f:checkBam ${t:39} {${u:variables}} {${u:outBam}}"
    turbine::store_file ${u:printLog} v:outLog:1 0
    turbine::decr_local_file_refcount v:outputfile:1
    turbine::decr_local_file_refcount v:outLog:1
    turbine::file_read_refcount_decr ${u:outBam} 1
}


proc recalibrateBam-optmerged-1 { t:11 t:12 t:15 t:20 t:24 } {
    # Var: $string v:t:12 VALUE_OF [string:__t:12]
    set v:t:12 [ turbine::retrieve_string ${t:12} CACHED 1 ]
    turbine::rule [ list ${t:15} ] [ list recalibrateBam-async_op-strcat ${t:11} ${t:15} ${v:t:12} ]
    turbine::rule [ list ${t:24} ] [ list recalibrateBam-async_op-strcat-1 ${t:20} ${t:24} ${v:t:12} ]
}


proc recalibrateBam-async_op-strcat { t:11 t:15 v:t:12 } {
    # Var: $string v:t:15 VALUE_OF [string:__t:15]
    # Var: $string v:t:11 VALUE_OF [string:__t:11]
    set v:t:15 [ turbine::retrieve_string ${t:15} CACHED 1 ]
    set v:t:11 "${v:t:12}/${v:t:15}"
    turbine::store_string ${t:11} ${v:t:11}
}


proc recalibrateBam-async_op-strcat-1 { t:20 t:24 v:t:12 } {
    # Var: $string v:t:24 VALUE_OF [string:__t:24]
    # Var: $string v:t:20 VALUE_OF [string:__t:20]
    set v:t:24 [ turbine::retrieve_string ${t:24} CACHED 1 ]
    set v:t:20 "${v:t:12}/${v:t:24}"
    turbine::store_string ${t:20} ${v:t:20}
}


proc f:samtools_index { u:signal u:samtoolsdir u:inputFilename v:loc_rank v:loc_strictness v:loc_accuracy } {
    turbine::c::log "function: samtools_index"
    turbine::file_read_refcount_incr ${u:inputFilename} 2
    turbine::read_refcount_incr ${u:samtoolsdir} 1
    set filename:inputFilename [ turbine::get_file_path ${u:inputFilename} ]
    turbine::rule [ list ${filename:inputFilename} [ turbine::get_file_td ${u:inputFilename} ] ${u:samtoolsdir} ] "samtools_index-app-leaf1 {${filename:inputFilename}} {${u:inputFilename}} {${u:samtoolsdir}} {${u:signal}}" target ${v:loc_rank} strictness ${v:loc_strictness} accuracy ${v:loc_accuracy}
}


proc samtools_index-app-leaf1 { filename:inputFilename u:inputFilename u:samtoolsdir u:signal } {
    # Var: $string v:samtoolsdir VALUE_OF [string:samtoolsdir] ./bioapps/realign_varcal.swift:samtools_index():7:21
    # Var: $string v:__filename:inputFilename VALUE_OF [string:__filename:inputFilename] ./bioapps/realign_varcal.swift:samtools_index():7:21
    # Var: $file v:inputFilename VALUE_OF [file:inputFilename] ./bioapps/realign_varcal.swift:samtools_index():7:21
    # Var: $void v:signal VALUE_OF [void:signal] ./bioapps/realign_varcal.swift:samtools_index():7:21
    set v:samtoolsdir [ turbine::retrieve_string ${u:samtoolsdir} CACHED 1 ]
    set v:__filename:inputFilename [ turbine::retrieve_string ${filename:inputFilename} ]
    set v:inputFilename [ turbine::retrieve_file ${u:inputFilename} CACHED 2 ]
    turbine::c::log [ list exec: __v:samtoolsdir "index" ${v:__filename:inputFilename} [ dict create ] ]
    turbine::exec_external ${v:samtoolsdir} [ dict create ] "index" ${v:__filename:inputFilename}
    turbine::store_void ${u:signal}
}


proc f:find_files { u:output u:dir u:pattern v:loc_rank v:loc_strictness v:loc_accuracy } {
    turbine::c::log "function: find_files"
    # Var: $boolean v:mapped_output OPT_TEMPORARY
    turbine::file_read_refcount_incr ${u:output} 1
    turbine::read_refcount_incr ${u:pattern} 1
    turbine::read_refcount_incr ${u:dir} 1
    set v:mapped_output [ turbine::is_file_mapped ${u:output} ]
    set filename:output [ turbine::get_file_path ${u:output} ]
    if { ${v:mapped_output} } {
    } else {
        # Var: $string optf:output FILENAME_OF [file:output]
        set optf:output [ turbine::mktemp ]
        turbine::set_filename_val ${u:output} ${optf:output}
    }
    turbine::rule [ list ${filename:output} ${u:dir} ${u:pattern} ] "find_files-app-leaf1 {${filename:output}} ${v:mapped_output} {${u:dir}} {${u:output}} {${u:pattern}}" target ${v:loc_rank} strictness ${v:loc_strictness} accuracy ${v:loc_accuracy}
}


proc find_files-app-leaf1 { filename:output v:mapped_output u:dir u:output u:pattern } {
    # Var: $string v:dir VALUE_OF [string:dir] ./generalfunctions/general.swift:find_files():29:36
    # Var: $string v:pattern VALUE_OF [string:pattern] ./generalfunctions/general.swift:find_files():29:36
    # Var: $string v:__filename:output VALUE_OF [string:__filename:output] ./generalfunctions/general.swift:find_files():29:36
    # Var: $file v:output VALUE_OF [file:output] ./generalfunctions/general.swift:find_files():29:36
    # Var: $boolean v:3 EXPR_TEMPORARY ./generalfunctions/general.swift:find_files():29:36
    set v:dir [ turbine::retrieve_string ${u:dir} CACHED 1 ]
    set v:pattern [ turbine::retrieve_string ${u:pattern} CACHED 1 ]
    set v:__filename:output [ turbine::retrieve_string ${filename:output} CACHED 1 ]
    if { ${v:mapped_output} } {
        set tcltmp:init_rc 2
    } else {
        set tcltmp:init_rc 1
    }
    set v:output [ turbine::create_local_file_ref ${v:__filename:output} ${tcltmp:init_rc} ${v:mapped_output} ]
    turbine::c::log [ list exec: "find" ${v:dir} "-name" ${v:pattern} [ dict create "stdout" ${v:__filename:output} ] ]
    turbine::exec_external "find" [ dict create "stdout" ${v:__filename:output} ] ${v:dir} "-name" ${v:pattern}
    set v:3 [ expr { ! ${v:mapped_output} } ]
    turbine::store_file ${u:output} v:output ${v:3}
    turbine::decr_local_file_refcount v:output
}


proc f:checkBam { u:success u:variables u:bamFile } {
    turbine::c::log "function: checkBam"
    # Var: string t:1 EXPR_TEMPORARY ./generalfunctions/general.swift:checkBam():47:32
    # Var: $string v:of:bamFile VALUE_OF [string:__of:bamFile]
    lassign [ adlb::multicreate [ list string 1 1 98 ] ] t:1
    turbine::c::log "allocated t:1=<${t:1}>"
    turbine::container_reference ${u:variables} "SAMTOOLSDIR" ${t:1} string
    set v:of:bamFile [ turbine::get_filename_val ${u:bamFile} ]
    turbine::rule [ list ${t:1} ] [ list samtools_view2-argwait ${t:1} ${v:of:bamFile} ${u:success} ]
    turbine::file_read_refcount_decr ${u:bamFile} 1
}


proc samtools_view2-argwait { t:1 v:of:bamFile u:success } {
    # Var: $string v:samtoolsdir RENAMED [$string:__v:samtoolsdir]
    # Var: $int v:numAlignments RENAMED [$int:__v:numAlignments]
    # Var: $boolean v:success VALUE_OF [boolean:success]
    set v:samtoolsdir [ turbine::retrieve_string ${t:1} CACHED 1 ]
    set v:numAlignments [ alignment::samtools_view ${v:samtoolsdir} ${v:of:bamFile} ]
    set v:success [ expr { ${v:numAlignments} > 0 } ]
    turbine::store_integer ${u:success} ${v:success}
}


proc f:sed { u:o u:i u:command v:loc_rank v:loc_strictness v:loc_accuracy } {
    turbine::c::log "function: sed"
    # Var: $boolean v:mapped_o OPT_TEMPORARY
    turbine::read_refcount_incr ${u:command} 1
    turbine::file_read_refcount_incr ${u:o} 1
    turbine::file_read_refcount_incr ${u:i} 2
    set filename:i [ turbine::get_file_path ${u:i} ]
    set v:mapped_o [ turbine::is_file_mapped ${u:o} ]
    set filename:o [ turbine::get_file_path ${u:o} ]
    if { ${v:mapped_o} } {
    } else {
        # Var: $string optf:o FILENAME_OF [file:o]
        set optf:o [ turbine::mktemp ]
        turbine::set_filename_val ${u:o} ${optf:o}
    }
    turbine::rule [ list ${filename:i} ${filename:o} ${u:command} [ turbine::get_file_td ${u:i} ] ] "sed-app-leaf1 {${filename:i}} {${filename:o}} ${v:mapped_o} {${u:command}} {${u:i}} {${u:o}}" target ${v:loc_rank} strictness ${v:loc_strictness} accuracy ${v:loc_accuracy}
}


proc sed-app-leaf1 { filename:i filename:o v:mapped_o u:command u:i u:o } {
    # Var: $string v:command VALUE_OF [string:command] /usr/local/apps/bioapps/swift-t/swift-t-1.1/turbine/export/unix.swift:sed():40:26
    # Var: $string v:__filename:i VALUE_OF [string:__filename:i] /usr/local/apps/bioapps/swift-t/swift-t-1.1/turbine/export/unix.swift:sed():40:26
    # Var: $string v:__filename:o VALUE_OF [string:__filename:o] /usr/local/apps/bioapps/swift-t/swift-t-1.1/turbine/export/unix.swift:sed():40:26
    # Var: $file v:i VALUE_OF [file:i] /usr/local/apps/bioapps/swift-t/swift-t-1.1/turbine/export/unix.swift:sed():40:26
    # Var: $file v:o VALUE_OF [file:o] /usr/local/apps/bioapps/swift-t/swift-t-1.1/turbine/export/unix.swift:sed():40:26
    # Var: $boolean v:3 EXPR_TEMPORARY /usr/local/apps/bioapps/swift-t/swift-t-1.1/turbine/export/unix.swift:sed():40:26
    set v:command [ turbine::retrieve_string ${u:command} CACHED 1 ]
    set v:__filename:i [ turbine::retrieve_string ${filename:i} ]
    set v:__filename:o [ turbine::retrieve_string ${filename:o} CACHED 1 ]
    set v:i [ turbine::retrieve_file ${u:i} CACHED 2 ]
    if { ${v:mapped_o} } {
        set tcltmp:init_rc 2
    } else {
        set tcltmp:init_rc 1
    }
    set v:o [ turbine::create_local_file_ref ${v:__filename:o} ${tcltmp:init_rc} ${v:mapped_o} ]
    turbine::c::log [ list exec: "sed" ${v:command} ${v:__filename:i} [ dict create "stdout" ${v:__filename:o} ] ]
    turbine::exec_external "sed" [ dict create "stdout" ${v:__filename:o} ] ${v:command} ${v:__filename:i}
    set v:3 [ expr { ! ${v:mapped_o} } ]
    turbine::store_file ${u:o} v:o ${v:3}
    turbine::decr_local_file_refcount v:o
}

turbine::defaults
turbine::declare_custom_work_types COASTER
turbine::init $servers "Swift"
turbine::enable_read_refcount
adlb::declare_struct_type 16 s:location [ list "rank" integer "strictness" string "accuracy" string ]
turbine::check_constants "WORKER\[WORKER\]" ${turbine::WORK_TASK} 0 "CONTROL" ${turbine::WORK_TASK} 0 "ADLB_RANK_ANY" ${adlb::RANK_ANY} -100
lassign [ turbine::declare_globals [ list "u:vars" ] [ list [ list container string string 1 1 99 ] ] ] u:vars
adlb::add_debug_symbol 1 "__c:s__vcf-1" ""
adlb::add_debug_symbol 2 "__c:s_bam_list_t" ""
adlb::add_debug_symbol 3 "__c:s_sknownSite" ""
adlb::add_debug_symbol 4 "__c:s_sknown_g" ""
adlb::add_debug_symbol 5 "__t:9" "RealignRecalAndVC:138:34"
adlb::add_debug_symbol 6 "configFile" "RealignRecalAndVC:144:0"
adlb::add_debug_symbol 7 "directory" "RealignRecalAndVC:129:0"
adlb::add_debug_symbol 8 "__t:16" "RealignRecalAndVC:__entry():178:5"
adlb::add_debug_symbol 9 "__t:119" "RealignRecalAndVC:__entry():231:6"
adlb::add_debug_symbol 10 "__t:134" "RealignRecalAndVC:__entry():263:29"
adlb::add_debug_symbol 11 "__t:31" "RealignRecalAndVC:__entry():182:19"
adlb::add_debug_symbol 12 "__t:118" "RealignRecalAndVC:__entry():231:23"
adlb::add_debug_symbol 13 "__t:12" "RealignRecalAndVC:__entry():180:25"
adlb::add_debug_symbol 14 "keyValuePair" "generalfunctions.general:getConfigVariables():21:2"
adlb::add_debug_symbol 15 "__t:10" "RealignRecalAndVC:__entry():161:35"
adlb::add_debug_symbol 16 "recalparmsindels" "RealignRecalAndVC:__entry():163:1"
adlb::add_debug_symbol 17 "realparms" "RealignRecalAndVC:__entry():164:1"
adlb::add_debug_symbol 18 "vcfFileName" "RealignRecalAndVC:__entry():176:1"
adlb::add_debug_symbol 19 "__t:11" "RealignRecalAndVC:__entry():181:27"
adlb::add_debug_symbol 20 "bamFile" "RealignRecalAndVC:__entry():219:2"
adlb::add_debug_symbol 21 "prefix" "RealignRecalAndVC:__entry():226:9"
adlb::add_debug_symbol 22 "recalibratedbam" "RealignRecalAndVC:__entry():229:40"
adlb::add_debug_symbol 23 "slashSplit" "RealignRecalAndVC:__entry():259:2"
adlb::add_debug_symbol 24 "VarcallDir" "RealignRecalAndVC:__entry():263:2"
adlb::add_debug_symbol 25 "vcfLocationFile" "RealignRecalAndVC:__entry():266:25"
adlb::add_debug_symbol 26 "realignedbam" "RealignRecalAndVC:__entry():237:38"
adlb::add_debug_symbol 27 "__t:124" "RealignRecalAndVC:__entry():240:3"
adlb::add_debug_symbol 28 "__t:125" "RealignRecalAndVC:__entry():240:18"
adlb::add_debug_symbol 29 "targetLog" "RealignRecalAndVC:realignBam():40:33"
adlb::add_debug_symbol 30 "realignLog" "RealignRecalAndVC:realignBam():41:34"
adlb::add_debug_symbol 31 "intervals" "RealignRecalAndVC:realignBam():42:33"
adlb::add_debug_symbol 32 "__t:7:1" "RealignRecalAndVC:realignBam():45:47"
adlb::add_debug_symbol 33 "__t:9:1" "RealignRecalAndVC:realignBam():45:64"
adlb::add_debug_symbol 34 "__t:12:1" "RealignRecalAndVC:realignBam():46:15"
adlb::add_debug_symbol 35 "__t:15:1" "RealignRecalAndVC:realignBam():46:42"
adlb::add_debug_symbol 36 "__t:18:1" "RealignRecalAndVC:realignBam():47:29"
adlb::add_debug_symbol 37 "__t:30:1" "RealignRecalAndVC:realignBam():53:1"
adlb::add_debug_symbol 38 "__t:127" "RealignRecalAndVC:__entry():250:3"
adlb::add_debug_symbol 39 "__t:128" "RealignRecalAndVC:__entry():250:18"
adlb::add_debug_symbol 40 "splitPrefix" "RealignRecalAndVC:__entry():277:3"
adlb::add_debug_symbol 41 "gvcfSample" "RealignRecalAndVC:__entry():282:62"
adlb::add_debug_symbol 42 "ploidy" "RealignRecalAndVC:callChrVariants():84:1"
adlb::add_debug_symbol 43 "haploLog" "RealignRecalAndVC:callChrVariants():95:58"
adlb::add_debug_symbol 44 "__t:13:2" "RealignRecalAndVC:callChrVariants():97:36"
adlb::add_debug_symbol 45 "__t:15:2" "RealignRecalAndVC:callChrVariants():97:53"
adlb::add_debug_symbol 46 "__t:17:2" "RealignRecalAndVC:callChrVariants():98:8"
adlb::add_debug_symbol 47 "__t:18:2" "RealignRecalAndVC:callChrVariants():98:15"
adlb::add_debug_symbol 48 "__t:21:2" "RealignRecalAndVC:callChrVariants():98:42"
adlb::add_debug_symbol 49 "__t:23:2" "RealignRecalAndVC:callChrVariants():100:8"
adlb::add_debug_symbol 50 "__t:27:2" "RealignRecalAndVC:callChrVariants():100:42"
adlb::add_debug_symbol 51 "__t:29:2" "RealignRecalAndVC:callChrVariants():101:8"
adlb::add_debug_symbol 52 "__t:30:2" "RealignRecalAndVC:callChrVariants():101:19"
adlb::add_debug_symbol 53 "newFile" "generalfunctions.general:append():12:17"
adlb::add_debug_symbol 54 "gvcfSample:1" "RealignRecalAndVC:__entry():289:52"
adlb::add_debug_symbol 55 "haploLog:1" "RealignRecalAndVC:callVariants():113:48"
adlb::add_debug_symbol 56 "__t:7:3" "RealignRecalAndVC:callVariants():115:36"
adlb::add_debug_symbol 57 "__t:9:3" "RealignRecalAndVC:callVariants():116:8"
adlb::add_debug_symbol 58 "__t:11:3" "RealignRecalAndVC:callVariants():117:8"
adlb::add_debug_symbol 59 "__t:12:3" "RealignRecalAndVC:callVariants():117:15"
adlb::add_debug_symbol 60 "__t:15:3" "RealignRecalAndVC:callVariants():117:42"
adlb::add_debug_symbol 61 "__t:17:3" "RealignRecalAndVC:callVariants():119:8"
adlb::add_debug_symbol 62 "__t:21:3" "RealignRecalAndVC:callVariants():119:42"
adlb::add_debug_symbol 63 "__t:23:3" "RealignRecalAndVC:callVariants():120:8"
adlb::add_debug_symbol 64 "__t:24:3" "RealignRecalAndVC:callVariants():120:19"
adlb::add_debug_symbol 65 "newFile:1" "generalfunctions.general:append():12:17"
adlb::add_debug_symbol 66 "splitPath" "RealignRecalAndVC:__entry():185:2"
adlb::add_debug_symbol 67 "__t:36" "RealignRecalAndVC:__entry():186:15"
adlb::add_debug_symbol 68 "__t:44" "RealignRecalAndVC:__entry():191:20"
adlb::add_debug_symbol 69 "__t:45" "RealignRecalAndVC:__entry():191:27"
adlb::add_debug_symbol 70 "recalfiles" "RealignRecalAndVC:__entry():191:53"
adlb::add_debug_symbol 71 "__t:49" "RealignRecalAndVC:__entry():192:26"
adlb::add_debug_symbol 72 "__t:50" "RealignRecalAndVC:__entry():192:33"
adlb::add_debug_symbol 73 "__t:53" "RealignRecalAndVC:__entry():192:60"
adlb::add_debug_symbol 74 "__t:56" "RealignRecalAndVC:__entry():193:5"
adlb::add_debug_symbol 75 "__t:62" "RealignRecalAndVC:__entry():198:25"
adlb::add_debug_symbol 76 "__t:71" "RealignRecalAndVC:__entry():200:49"
adlb::add_debug_symbol 77 "__t:79" "RealignRecalAndVC:__entry():207:20"
adlb::add_debug_symbol 78 "__t:80" "RealignRecalAndVC:__entry():207:27"
adlb::add_debug_symbol 79 "recalfiles:1" "RealignRecalAndVC:__entry():207:43"
adlb::add_debug_symbol 80 "__t:83" "RealignRecalAndVC:__entry():208:26"
adlb::add_debug_symbol 81 "__t:84" "RealignRecalAndVC:__entry():208:33"
adlb::add_debug_symbol 82 "__t:87" "RealignRecalAndVC:__entry():208:60"
adlb::add_debug_symbol 83 "__t:96" "RealignRecalAndVC:__entry():212:25"
adlb::add_debug_symbol 84 "__t:105" "RealignRecalAndVC:__entry():214:42"
adlb::add_debug_symbol 85 "recalLog" "RealignRecalAndVC:recalibrateBam():62:32"
adlb::add_debug_symbol 86 "printLog" "RealignRecalAndVC:recalibrateBam():63:32"
adlb::add_debug_symbol 87 "report" "RealignRecalAndVC:recalibrateBam():64:30"
adlb::add_debug_symbol 88 "__t:7" "RealignRecalAndVC:recalibrateBam():67:37"
adlb::add_debug_symbol 89 "__t:9" "RealignRecalAndVC:recalibrateBam():67:54"
adlb::add_debug_symbol 90 "__t:11" "RealignRecalAndVC:recalibrateBam():68:11"
adlb::add_debug_symbol 91 "__t:12" "RealignRecalAndVC:recalibrateBam():68:18"
adlb::add_debug_symbol 92 "__t:15" "RealignRecalAndVC:recalibrateBam():68:45"
adlb::add_debug_symbol 93 "__t:17" "RealignRecalAndVC:recalibrateBam():69:11"
adlb::add_debug_symbol 94 "__t:18" "RealignRecalAndVC:recalibrateBam():69:22"
adlb::add_debug_symbol 95 "__t:20" "RealignRecalAndVC:recalibrateBam():70:11"
adlb::add_debug_symbol 96 "__t:24" "RealignRecalAndVC:recalibrateBam():70:45"
adlb::add_debug_symbol 97 "__t:39" "RealignRecalAndVC:recalibrateBam():76:1"
adlb::add_debug_symbol 98 "__t:1" "generalfunctions.general:checkBam():47:32"
adlb::add_debug_symbol 99 "vars" "RealignRecalAndVC:148:0"
turbine::start swift:main swift:constants
turbine::finalize
