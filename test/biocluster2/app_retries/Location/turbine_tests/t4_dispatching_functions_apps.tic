
# Generated by stc version 0.7.4
# date                    : 2018/02/08 20:58:31
# Turbine version         : 1.1.0
# Input filename          : /home/azza/swift-project/src/nw_code/Swift-T-Variant-Calling/test/biocluster2/app_retries/Location/tests_location/t4_dispatching_functions_apps.swift
# Output filename         : /home/azza/swift-project/src/nw_code/Swift-T-Variant-Calling/test/biocluster2/app_retries/Location/tests_location
# STC home                : /home/azza/swift-project/provenance/installations/tst1-simple-logging/stc
# Turbine home            : /home/azza/swift-project/provenance/installations/tst1-simple-logging/turbine
# Compiler settings:
# stc.auto-declare              : true
# stc.c_preprocess              : true
# stc.checkpointing             : true
# stc.compiler-debug            : true
# stc.debugging                 : COMMENTS
# stc.ic.output-file            : 
# stc.input_filename            : t4_dispatching_functions_apps.swift
# stc.log.file                  : 
# stc.log.trace                 : false
# stc.must_pass_wait_vars       : true
# stc.opt.algebra               : true
# stc.opt.array-build           : true
# stc.opt.batch-refcounts       : true
# stc.opt.cancel-refcounts      : true
# stc.opt.constant-fold         : true
# stc.opt.controlflow-fusion    : true
# stc.opt.dataflow-op-inline    : true
# stc.opt.dead-code-elim        : true
# stc.opt.demote-globals        : true
# stc.opt.disable-asserts       : false
# stc.opt.expand-loop-threshold-insts: 256
# stc.opt.expand-loop-threshold-iters: 16
# stc.opt.expand-loops          : false
# stc.opt.finalized-var         : true
# stc.opt.flatten-nested        : true
# stc.opt.full-function-inline  : false
# stc.opt.full-unroll           : false
# stc.opt.function-always-inline-threshold: 5
# stc.opt.function-inline       : true
# stc.opt.function-inline-threshold: 50
# stc.opt.function-signature    : true
# stc.opt.hoist                 : true
# stc.opt.hoist-refcounts       : true
# stc.opt.loop-simplify         : true
# stc.opt.max-iterations        : 10
# stc.opt.merge-refcounts       : true
# stc.opt.piggyback-refcounts   : true
# stc.opt.pipeline              : false
# stc.opt.propagate-aliases     : true
# stc.opt.reorder-insts         : false
# stc.opt.shared-constants      : true
# stc.opt.unroll-loop-threshold-insts: 192
# stc.opt.unroll-loop-threshold-iters: 8
# stc.opt.unroll-loops          : true
# stc.opt.value-number          : true
# stc.opt.wait-coalesce         : true
# stc.output_filename           : 
# stc.preproc.force-cpp         : false
# stc.preproc.force-gcc         : false
# stc.preprocess_only           : false
# stc.profile                   : false
# stc.refcounting               : true
# stc.rpath                     : 
# stc.stc_home                  : /home/azza/swift-project/provenance/installations/tst1-simple-logging/stc
# stc.turbine.version           : 1.1.0
# stc.turbine_home              : /home/azza/swift-project/provenance/installations/tst1-simple-logging/turbine
# stc.version                   : 0.7.4

# Metadata:

package require turbine 1.1.0
namespace import turbine::*


proc swift:constants {  } {
    turbine::c::log "function:swift:constants"
}


proc swift:main {  } {
    turbine::c::log "function: __entry"
    # Var: file u:tmp RENAMED [file:tmp] t4_dispatching_functions_apps.swift:main():23:11
    lassign [ turbine::make_file_tds [ adlb::multicreate [ list file 1 1 1 ] ] [ list 1 ] ] u:tmp
    turbine::set_filename_val ${u:tmp} "tmp.txt"
    set tcltmp:prio [ turbine::get_priority ]
    adlb::put 12 0 "hostname-app-leaf1 {${u:tmp}}" ${tcltmp:prio} 1
    set tcltmp:prio [ turbine::get_priority ]
    adlb::put 12 0 "f-argwait" ${tcltmp:prio} 1
}


proc hostname-app-leaf1 { u:tmp } {
    # Var: $file v:o RENAMED [$file:__v:o] t4_dispatching_functions_apps.swift:hostname():13:21
    set tcltmp:init_rc 2
    set v:o [ turbine::create_local_file_ref "tmp.txt" ${tcltmp:init_rc} 1 ]
    turbine::c::log [ list exec: "hostname" [ dict create "stdout" "tmp.txt" ] ]
    turbine::exec_external "hostname" [ dict create "stdout" "tmp.txt" ]
    turbine::store_file ${u:tmp} v:o 0
    set tcltmp:prio [ turbine::get_priority ]
    turbine::set_priority ${tcltmp:prio}
    adlb::spawn 0 "__entry-call_foreign-read {${u:tmp}}"
    turbine::reset_priority
    turbine::decr_local_file_refcount v:o
}


proc __entry-call_foreign-read { u:tmp } {
    # Var: $file v:tmp VALUE_OF [file:tmp]
    # Var: $string v:t:4:1 VALUE_OF [string:__t:4:1]
    # Var: $string v:o:1 RENAMED [$string:__v:o]
    # Var: $int v:rank:1 RENAMED [$int:__v:rank]
    # Var: $int v:rank RENAMED [$int:__v:rank]
    set v:tmp [ turbine::retrieve_file ${u:tmp} CACHED 1 ]
    set v:t:4:1 [ turbine::file_read_local ${v:tmp} ]
    set v:o:1 [ string trim ${v:t:4:1} ]
    set v:rank:1 [ ::turbine::random_rank WORKER [ adlb::hostmap_lookup ${v:o:1} ] ]
    set v:rank [ draw [ adlb::hostmap_lookup ${v:o:1} ] ]
    set tcltmp:prio [ turbine::get_priority ]
    turbine::set_priority ${tcltmp:prio}
    adlb::spawn 0 [ list __entry-call_foreign-printf ${v:o:1} ]
    turbine::reset_priority
    set tcltmp:prio [ turbine::get_priority ]
    turbine::set_priority ${tcltmp:prio}
    adlb::spawn 0 "__entry-call_foreign-printf-1 ${v:rank:1}"
    turbine::reset_priority
    set tcltmp:prio [ turbine::get_priority ]
    turbine::set_priority ${tcltmp:prio}
    adlb::spawn 0 "__entry-call_foreign-printf-2 ${v:rank}"
    turbine::reset_priority
}


proc __entry-call_foreign-printf { v:o:1 } {
    # Var: $void v:t:5 VALUE_OF [void:__t:5]
    set v:t:5 [ turbine::printf_local "\t\tname: %s" ${v:o:1} ]
}


proc __entry-call_foreign-printf-1 { v:rank:1 } {
    # Var: $void v:t:12 VALUE_OF [void:__t:12]
    set v:t:12 [ turbine::printf_local "\t\tworker_rank_2: %i" ${v:rank:1} ]
}


proc __entry-call_foreign-printf-2 { v:rank } {
    # Var: $void v:t:7 VALUE_OF [void:__t:7]
    set v:t:7 [ turbine::printf_local "\t\trank: %i" ${v:rank} ]
}


proc f-argwait {  } {
    puts "HELLO 12 "
}

turbine::defaults
turbine::declare_custom_work_types COASTER
turbine::init $servers "Swift"
turbine::enable_read_refcount
adlb::declare_struct_type 16 s:location [ list "rank" integer "strictness" string "accuracy" string ]
turbine::check_constants "WORKER\[WORKER\]" ${turbine::WORK_TASK} 0 "CONTROL" ${turbine::WORK_TASK} 0 "ADLB_RANK_ANY" ${adlb::RANK_ANY} -100
adlb::add_debug_symbol 1 "tmp" "t4_dispatching_functions_apps:main():23:11"
turbine::start swift:main swift:constants
turbine::finalize
